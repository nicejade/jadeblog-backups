<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晚晴幽草轩</title>
  
  <subtitle>It&#39;s only too late if you decide it is. Get busy living. or get busy dying!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeffjade.com/"/>
  <updated>2018-09-12T14:25:00.341Z</updated>
  <id>https://jeffjade.com/</id>
  
  <author>
    <name>晚晴幽草轩轩主</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快应用之开发体验纪要</title>
    <link href="https://jeffjade.com/2018/08/31/143-develop-quick-app-experience-notes/"/>
    <id>https://jeffjade.com/2018/08/31/143-develop-quick-app-experience-notes/</id>
    <published>2018-08-31T10:18:00.000Z</published>
    <updated>2018-09-12T14:25:00.341Z</updated>
    
    <content type="html"><![CDATA[<p>何谓<a href="https://www.quickapp.cn/" target="_blank" rel="noopener">「快应用」</a>呢？它是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的<code>快应用联盟</code>联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="noopener">快应用</a>具备传统 APP 完整的应用体验，<strong>无需安装、即点即用</strong>； <strong>覆盖 10 亿设备</strong>，<strong>与操作系统深度集成，探索新型应用场景</strong>。快应用 ──<code>复杂生活的简单答案，让生活更顺畅</code> ── 来自 <a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="noopener">快应用官方网站 | 倾城之链</a>。</p><a id="more"></a><p><img src="https://image.nicelinks.site/quickapp.png" alt="快应用开发体验纪要"></p><blockquote><p>本文首发于个人新博客：<a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="noopener">静晴轩别苑 | 快应用之开发体验纪要</a>。</p></blockquote><h2 id="快应用特点"><a href="#快应用特点" class="headerlink" title="快应用特点"></a>快应用特点</h2><p>下面列出些关于「快应用」特点，这将有助于对它有更深刻的理解；</p><ul><li>基于手机硬件平台，标准由主流手机厂商组成的快应用联盟制定;</li><li>无需安装、即点即用，且具备传统 APP 完整的应用体验;</li><li>与操作系统深度集成，一键直达;</li><li>更新直接推送，新版本直接更新到后台，用户无感知快应用的技术实现;</li><li>基于前端技术栈开发、可快速迭代;</li><li>通过全新的引擎，将系统原生的渲染机制和接口能力提供给上层应用;</li><li>运行在框架应用进程中，对每个快应用会开一个 <code>Launcher</code> 进程快应用的开发、发布和使用流程;</li><li>开发者需要在快应用官网注册，上传至快应用官网，测试并通过审核后即可进行分发;</li><li>使用前端技术栈进行开发，经过编译、签名后最终产出 <code>rpk</code> 文件;</li><li>开发者需登录快应用官网进行上传和发布，发布前会经过审核快应用与小程序的对比;</li><li>快应用使用 <code>native</code> 渲染，性能体验会比较好，而小程序是使用 <code>webview</code> 渲染 ;</li><li>快应用的系统级能力更强，能调用更多系统级 API;</li></ul><h2 id="与小程序对比"><a href="#与小程序对比" class="headerlink" title="与小程序对比"></a>与小程序对比</h2><table><thead><tr><th style="text-align:center">──</th><th style="text-align:center">开发技术</th><th style="text-align:center">渲染方式</th><th style="text-align:center">硬件资源扶持</th><th style="text-align:center">系统级能力</th><th style="text-align:center">桌面留存</th></tr></thead><tbody><tr><td style="text-align:center">小程序</td><td style="text-align:center">前端技术栈</td><td style="text-align:center"><code>webview</code> 渲染</td><td style="text-align:center">有</td><td style="text-align:center">强</td><td style="text-align:center">有</td></tr><tr><td style="text-align:center">快应用</td><td style="text-align:center">前端技术栈</td><td style="text-align:center"><code>native</code> 渲染</td><td style="text-align:center">无</td><td style="text-align:center">弱</td><td style="text-align:center">有</td></tr></tbody></table><p>以上这些比对，皆是从两者的出生角度而言；可以肯定的是，「快应用」得益于其与生俱来的优势，将在更多应用场景发挥作用，它的崛起，将会给 <code>Android</code> 用户带来更多的便捷。同时作为后起之秀，其开发体验上，是明显优于<code>小程序</code>的；但目前的小程序，已经有长足的发展，而「快应用」才处于刚起步阶段，在经验累积、应用数量、分发传播、社区建设等方面，两者之间还存在些差距；后续故事将会如何，让我们将拭目以待。</p><h2 id="开发-amp-调试"><a href="#开发-amp-调试" class="headerlink" title="开发 &amp; 调试"></a>开发 &amp; 调试</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>鉴于<code>「快应用」</code>基于前端技术栈来开发，因此需要安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (&gt;= 6.0)；<a href="https://yarnpkg.com/" target="_blank" rel="noopener">yarn</a> （推荐使用）。</li><li>安装 <a href="https://www.npmjs.com/package/hap-toolkit" target="_blank" rel="noopener">hap-toolkit</a> ；它是针对<code>「快应用」</code>衍生出的开发者工具；</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">global</span> <span class="keyword">add</span> hap-toolkit</span><br><span class="line"><span class="comment">// 检测是否成功安装 hap-toolkit</span></span><br><span class="line">hap -V</span><br></pre></td></tr></table></figure><ul><li>手机安装<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">「快应用」调试器</a> ── 一个 <code>Android</code> 应用程序，它可以连接到手机系统内的快应用执行环境，包含<code>扫码安装</code>、<code>本地安装</code>、<code>在线更新</code>、<code>开始调试</code>、等功能；</li></ul><blockquote><p><strong>扫码安装</strong>：配置 HTTP 服务器地址，下载 rpk 包，并唤起平台运行 rpk 包；<br><strong>本地安装</strong>：选择手机文件系统中的 rpk 包，并唤起平台运行 rpk 包；<br><strong>在线更新</strong>：重新发送 HTTP 请求，更新 rpk 包，并唤起平台运行 rpk 包；<br><strong>开始调试</strong>：唤起平台运行 rpk 包，并启动远程调试工具；</p><p><strong>备注</strong>：当您的手机系统尚未内置快应用运行平台，或您想在开发过程中体验快应用尚未正式发布的新功能、新特性，您可以安装 <strong><a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">快应用预览版</a></strong>,这是一个包含了快应用基础功能的 Android 应用程序。下载安装成功后，通过快应用调试器可以选择在快应用预览版运行 <code>rpk</code>包，开发测试对应平台的 api 和功能。更详细的叙述，请参见<a href="https://doc.quickapp.cn/tutorial/getting-started/build-environment.html" target="_blank" rel="noopener">快应用开发文档 | 环境搭建</a>。</p></blockquote><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>在「快应用」中，对<a href="https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html" target="_blank" rel="noopener">代码编辑配置</a>做了说明；你可以使用 <code>VsCode</code>、<code>Sublime Text</code>、<code>WebStorm</code> 等工具来开发。鉴于官方针对 <code>VsCode</code> 推出了 <a href="https://marketplace.visualstudio.com/items?itemName=hap.Hap" target="_blank" rel="noopener">Hap Extension</a> 扩展，这里推荐使用 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VsCode</a> 来编写快应用代码（据悉，专门用于开发「快应用」的编辑器，尚在开发中 18-08-15）。</p><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><p>在开发文档<a href="https://doc.quickapp.cn/tools/debugging-tools.html" target="_blank" rel="noopener">调试工具</a>一节，对此有详细说明；从一般性开发角度总结而言，只需运行以下两个命令: <code>npm run server</code> 和 <code>npm run watch</code>；前者会在终端会输出一个二维码，用手机上启动快应用调试器，点击<code>扫码安装</code>扫描，即可下载安装 <code>apk</code> 包，并运行之；而后者将会启动文件监视器，每次修改工程文件时，会自动编译并在手机端刷新，速度蛮快；至于日志查看，可利用 devtools 调试界面 console 输出，也可利用 <code>adb</code> 工具，在终端进行查看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">adb logcat -s JsConsole</span></span><br></pre></td></tr></table></figure><h2 id="快应用示例"><a href="#快应用示例" class="headerlink" title="快应用示例"></a>快应用示例</h2><p>在安装 <code>Toolkit</code> 工具后，可通过全局 <code>hap</code> 命令创建一个项目模板，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hap init <span class="tag">&lt;<span class="name">YourProjectName</span>&gt;</span></span><br></pre></td></tr></table></figure><p>鉴于其内置的 Demo 项目示例，尚处于入门级项目设定(@18-08)，不便于用户着手开发，且不利于高效编写、维护；因此，有将编写的快应用 <a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="noopener">nicelinks-quick-app</a> 开源，借此以探索新型应用设计；此外，也是在探索如何构建优质<code>快应用</code>，希望可以在此事儿上提供些参考。其代码组织结构如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── sign                <span class="comment"># 存储 rpk 包签名模块;</span></span><br><span class="line">│   ├── <span class="built_in">debug</span>           <span class="comment"># 调试环境证书/私钥文件</span></span><br><span class="line">│   └── release         <span class="comment"># 正式环境证书/私钥文件</span></span><br><span class="line">└── src</span><br><span class="line">│   ├── assets          <span class="comment"># 公用的资源(Images/Styles/字体...)</span></span><br><span class="line">│   │   ├──images       <span class="comment"># 存储 png/jpg/svg 等公共图片资源</span></span><br><span class="line">│   │   └──styles       <span class="comment"># 存放 less/css/sass 等公共样式资源</span></span><br><span class="line">│   ├── helper          <span class="comment"># 项目自定义辅助各类工具</span></span><br><span class="line">│   │   ├──apis         <span class="comment"># 存储与后台请求接口相关(已封装好)</span></span><br><span class="line">│   │   ├──ajax.<span class="keyword">js </span>     <span class="comment"># 对系统提供的 fetch api 进行链式封装</span></span><br><span class="line">│   │   └──util.<span class="keyword">js </span>     <span class="comment"># 存放项目所需公共工具类方法</span></span><br><span class="line">│   ├── pages           <span class="comment"># 统一存放项目页面级代码</span></span><br><span class="line">│   ├── app.ux          <span class="comment"># 应用程序代码的人口文件</span></span><br><span class="line">│   └── manifest.<span class="keyword">json </span>  <span class="comment"># 配置应用基本信息</span></span><br><span class="line">└── package.<span class="keyword">json </span>       <span class="comment"># 定义项目需要的各种模块及配置信息</span></span><br></pre></td></tr></table></figure><p>有必要谈及的是，此项目秉承在<a href="https://nice.lovejade.cn/zh/article/vue-webpack-boilerplate-template.html" target="_blank" rel="noopener">高效开发 Web 单页应用解决方案</a>中所传递的理念：为<strong>高效开发</strong>而设计；相比于内置 Demo，她具有以下诸多优点：</p><ul><li><strong>对项目结构进行优化</strong>；如上组织结构所示，将各资源模块，更专业的分门别类，使之可以便捷的去编写、维护、查找，同时也是基于前端开发既定共识去设计，更容易为初接触者所理解 &amp; 上手；</li><li><strong>更优雅的处理数据请求</strong>；采用 <code>Promise</code> 对系统内置请求 <code>@system.fetch</code> 进行封装，并抛出至全局，使得可以极简的进行链式调用，同时便捷地处理返回数据；</li><li><strong>内置了样式处理方案</strong>；「快应用」支持 less, sass 的预编译；这里采取 <code>less</code> 方案，并内置了部分变量，以及常用混合方法，使得可以轻松开启样式编写、复用、修改等；</li><li><strong>优化本地开发端口设定</strong>；「快应用」默认端口为 <code>12306</code>，虽说可自定义端口，但使用体验却不够友好；此处参考 <code>creat-react-app</code> 设定，对本地开发地址端口使用进行优化：如果🈯️定端口(默认: <code>8080</code>)被占用，则向上递增寻找新的可用端口(如：8081 / 8082 / … )；</li><li><strong>浏览器打开调试主页二维码</strong>；运行 <code>npm run server</code>，会启动 HTTP 调试服务器，并将该地址在<strong>命令行终端</strong>显示，手机端用快应用调试器扫码，即可下载并运行 rpk 包；当终端积累的信息流多了，就造成扫码不便；故增设在浏览器打开调试主页二维码；如想不使用此功能，在 <em>command/server.js</em> 文件中，将 <strong>autoOpenBrowser</strong> 设置为 <code>false</code> 即可；</li><li>会持续探究，逐步将更多好用姿势集成 ……</li></ul><h2 id="关于快应用の发布"><a href="#关于快应用の发布" class="headerlink" title="关于快应用の发布"></a>关于快应用の发布</h2><p>关于快应用发布，有必要谈下的理由是，其发布流程说简单却也复杂，说快也慢；这是因为涉及多家厂商，且有着不同规则，导致变数横生；倘若经历过之后，这个流程就可以描述为：说复杂也简单，说慢也快；就以个人开发者来聊下相关经验：</p><ul><li>首先需要开发一款快应用；务必确认好 <code>minPlatformVersion</code> 版本，应用命名称也该有所考究，最好都是中文(利推广)；</li><li>快应用官网注册，完善相关资料之后(须手持身份证反面照片，需清晰)，即可创建 &amp; 提交你的<code>快应用</code>（有些资料要填写）；</li><li>厂商审核；对于华为、OPPO、小米等厂商，必须先绑定其开放者账号才可以（Vivo 无需），所以得先到厂商注册，并绑定账号；</li><li>绑定账号，应用提交之后，接下来就是坐等；不同平台审核结果许有不同：如华为还需<em>上传免责函签名至版权处</em>等等；</li><li>修正审核提到的问题，如指出应用提交分类错误(HuaWei)、应用界面单一、功能过于简单(OPPO)等，继续提交，坐等即可(速度还行)；</li></ul><blockquote><p>个人开发的<a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="noopener">倾城之链-快应用版</a>已于 09-05 日，发布上架；目前在 Vivo 厂商已审核通过，可在支持快应用手机的负一屏、浏览器等搜索<code>倾城之链</code>即可率先体验，之后将持续迭代升级，敬请期待。</p></blockquote><h2 id="快应用存在的缺陷"><a href="#快应用存在的缺陷" class="headerlink" title="快应用存在的缺陷"></a>快应用存在的缺陷</h2><p>从上面<a href="#快应用特点">快应用特点</a>，应该对其优点有所感受；接下来不妨‘揣测’下它或将是缺陷的存在（当然，在年与时驰间，随着版本的不断迭代升级，某些现在看来是缺陷，日后兴许就荡然无存，也说不定）。</p><ul><li>若要运行「快应用」，须要手机出厂时在底层支持；否则就须要先安装<code>平台预览版</code>;</li><li>使用前端技术栈开发，<code>native</code> 渲染，标签、样式、功能等都需要一一映射处理，目前来看支持不够完善；长期迭代情况将会好转；</li><li>暂不支持使用主流前端框架（Eg: <code>vue</code>、<code>react</code>）进行开发，且很多功能需要填补；长期迭代情况将会好转；</li><li>相比于其他‘竞品’而言，文档、周围生态系统、等都需要亟待完善；长期迭代情况将会好转；</li><li>由国内 <code>Android</code> 手机厂商联合推出的，不支持 <code>IOS</code> 操作系统，目测以后也无法给予支持；</li><li>社交：「快应用」缺乏微信的社交场景能力和传播手段，推广拉新，成本不低；再有上一条先天不足，现在来看，不容乐观。</li><li>……</li></ul><h2 id="如何看待「快应用」"><a href="#如何看待「快应用」" class="headerlink" title="如何看待「快应用」?"></a>如何看待「快应用」?</h2><p>就目前来看，在移动设备市场，充盈各种类型的应用，大有“诸子百家争鸣”之基础；以技术栈来分，有原生型、混合型、Web 型、小程序、「快应用」…… 百花齐放；从类别上看，有支付宝这般丰富的超级 App，亦有许多精品级小众应用；就用户而言，不仅能享受其便捷性，同时也能体验市场的多元化；而各种不同类型应用间良性竞争，对更一步改善用户体验也是大有裨益。如此，看来「快应用」的诞生，从外部环境来看，有其成长的土壤；而具有体量的公司都参与的事情（如闪充、全面屏），便是不错的趋势，至少不会输，受影响的是旧的模式 ── 原生应用。</p><p>出于业务需求以及用户拉新等方面诉求，Native VS Web 这个由来已久之争，如今愈发向前端技术栈倾斜，且已占上风；虽然说，技术的发展，同时有给 Native 和 Web 两种模式，都提供了利好（对 Web，硬件提升使得体验越来越好；于 Native，越来越大的存储空间使得用户装 APP 成本下降），但“即点即用”这种快捷模式的横空出世，附带以前端技术栈开发的低成本，将打破固有局面，修改用户原有习惯，从而渐变整个格局。</p><p>谈及「快应用」，微信小程序是无法绕过的点；两者肯定存在竞争关系，同时也可算是伙伴：如同两部同时上映的电影，虽有竞争，也会是彼此之助力，共同把盘子做大，吸引更多的用户倾斜，从而变更未来的应用格局。再有，都是基于前端技术栈，如能有互转工具给予铺成，对于开发者而言，即可实现一次编写，多平台运行；将会为这种模式提升更多竞争力。</p><p>上面已经从出生层面，对「快应用」和小程序做了对比；「快应用」使用 <code>Native</code> 渲染，而非小程序基于 <code>Webview</code> 渲染，再加上硬件资源扶持，体验上则能更上一层楼。况且，对于已经司空见惯的事物，新鲜感在如今看来，也极具诱惑，如<code>子弹短信</code>的出现；就小程序而言目前火热程度，已有百万应用，渐成<strong>垄断</strong>之势，从过往历史来看，这对于用户来讲，绝不都是好事；而对于开发商来说，也尽是受制于人(腾讯有绝对控制权)，无法主导自己命运，多个渠道，则多份活路；况且，兵无常势，水无常形，在大时代的拉锯之下，微信又岂会是永恒的王者？<strong>独立的才是自己的</strong>，而小程序并不提供这方面红利；对于个人开发者来讲，加入「快应用」阵营，借助厂商流量扶持，为自己独立平台倒量，不失为更明智的抉择；现在来看「快应用」，机遇与挑战并存，未来它将如何，朋友你怎么看？</p><p>@2018-08-06 于深圳.福田 Last Modify：2018-09-02</p>]]></content>
    
    <summary type="html">
    
      快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。快应用具备传统 APP 完整的应用体验，无需安装、即点即用；覆盖 10 亿设备，与操作系统深度集成，探索新型应用场景。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://jeffjade.com/tags/Vue/"/>
    
      <category term="快应用" scheme="https://jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android" scheme="https://jeffjade.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用ESLint ＆ Prettier美化Vue代码</title>
    <link href="https://jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier/"/>
    <id>https://jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier/</id>
    <published>2018-06-18T10:18:00.000Z</published>
    <updated>2018-06-18T16:17:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">Prettier</a> 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；支持 <code>JavaScript</code>、 <code>Flow</code>、 <code>TypeScript</code>、 <code>CSS</code>、 <code>SCSS</code>、 <code>Less</code>、 <code>JSX</code>、 <code>Vue</code>、 <code>GraphQL</code>、 <code>JSON</code>、 <code>Markdown</code> 等语言，您可以结合 ESLint 和 Prettier，检测代码中潜在问题的同时，还能统一团队代码风格，从而促使写出高质量代码，来提升工作效率。</p><a id="more"></a><p><img src="https://image.nicelinks.site/prettier-girl.jpg" alt="beautify-vue-by-eslint-and-prettier"></p><blockquote><p><strong>备注</strong>，此文首发于使用 <code>Vuepress</code> 搭建的新 Web 应用：<a href="https://nice.lovejade.cn/" target="_blank" rel="noopener">静晴轩别苑</a>；如果您对此感兴趣，可以移步查看：<a href="https://nice.lovejade.cn/zh/article/beautify-vue-by-eslint-and-prettier.html" target="_blank" rel="noopener">使用ESLint ＆ Prettier美化Vue代码</a>。</p></blockquote><h2 id="初始化-Vue-项目推介"><a href="#初始化-Vue-项目推介" class="headerlink" title="初始化 Vue 项目推介"></a>初始化 Vue 项目推介</h2><p>在格式化代码方面， Prettier 确实和 ESLint 有重叠，但两者侧重点不同：ESLint 主要工作就是检查代码质量并给出提示，它所能提供的格式化功能很有限；而 Prettier 在格式化代码方面具有更大优势。而 Prettier 被设计为易于与 ESLint 集成，所以你可以轻松在项目中使两者，而无需担心冲突。本文就如何使用 ESLint ＆ Prettier，来格式并美化 Vue 代码做下探讨；如果您使用其他类型框架，这份经验绝大部份依旧适用。</p><p>正如在 <a href="https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a> 所倡导的：<code>vue-cli3</code>在这个版本，它集成了更多丰富的功能，以及更多默认配置，可通过附带的图形用户界面创建、开发和管理项目… 而且已发布 <code>RC</code> 版本，核心功能已准备就绪，<code>API</code> 已趋于稳定，所以，建议采用 <code>vue-cli3</code> 来创建您的项目；您只需运行 <code>vue create my-project</code> 命令，接下来按照提示进行选择即可；为了您的项目可持续性愉快进行，<code>ESlint</code> 是您必要的选项。如果，您这样做了，您就可以在 <em>package.json</em> 中 <code>eslintConfig</code> 属性下，找到 <code>ESLint</code> 配置；接下来，只需将 <code>Prettier</code> 与 <code>ESLint</code> 集成即可。</p><h2 id="集成-ESLint-amp-Prettier"><a href="#集成-ESLint-amp-Prettier" class="headerlink" title="集成 ESLint &amp; Prettier"></a>集成 ESLint &amp; Prettier</h2><p>对于二者集成，可以利用插件来完成；<a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener">eslint-plugin-prettier</a> 公开了一个 “recommended” 配置，将 <code>plugin:prettier/recommended</code> 添加到 <code>extends</code> 的子属性 <code>plugin:vue/essential</code> 之后，以默认设置在 <code>ESLint</code> 中启用对 <code>Prettier</code> 的支持：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"eslintConfig": &#123;</span><br><span class="line">    "root": true,</span><br><span class="line">    "extends": [</span><br><span class="line">      "plugin:vue/essential",</span><br><span class="line">      "plugin:prettier/recommended",</span><br><span class="line">      <span class="string">"eslint:recommended"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>当然，还需安装依赖库： eslint-plugin-prettier 和 eslint-config-prettier (下文会讲到此依赖的作用)，更详细信息可以参见 Prettier 文档： <a href="https://prettier.io/docs/en/eslint.html" target="_blank" rel="noopener">Integrating with ESLint</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev eslint-plugin-prettier eslint-config-prettier prettier-eslint-cli</span><br></pre></td></tr></table></figure><p>这里需要补充说明下的是 <code>eslint-plugin-prettier</code> 得工作原理，它会对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错提示；我们可以借助一些工具来修复，比如： <code>eslint --fix</code>，<a href="https://github.com/prettier/prettier-eslint-cli" target="_blank" rel="noopener">prettier-eslint-cli</a>；可将其配置在 package scripts 中，以方便使用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"eslint-fix"</span>: <span class="string">"eslint src/**/**/*.vue --fix"</span>,</span><br><span class="line">    <span class="attr">"format-code"</span>: <span class="string">"prettier-eslint --write \"src/**/*.js\" \"src/**/*.vue\""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.nicelinks.site/vue-eslint-prettier.png" alt="beautify-vue-by-eslint-and-prettier"></p><h2 id="修改规则配置"><a href="#修改规则配置" class="headerlink" title="修改规则配置"></a>修改规则配置</h2><p>您需要知道的是，两者混合使用时候，需要修改规则，以防止重复或冲突；<code>eslint-config-prettier</code> 即为解决此问题的存在，可以使用它关闭所有可能引起冲突的规则。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">  "prettier/prettier": "error"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，当在项目中如此配置，可能会出现些“诡异”的报错，即便采用如上修复，也无法解决；而且这也不是您预期的提示；</p><p><span style="color: red">error</span>: Delete <code>⏎</code> (prettier/prettier) at src/pages/xxx</p><p>此时，可以对规则进行甄别、梳理，择选出适宜的规则；对于此，您可以参考 <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener">Configuring Prettier Options</a> &amp; <a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener">eslint-plugin-prettier#options</a>；依据个人编码习惯，有采取如下配置 ( 可在 <a href="https://github.com/nicejade/awesome-vue-cli3-example/blob/master/package.json" target="_blank" rel="noopener">awesome-vue-cli3-example</a> 查看源码)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">  "no-console": 0,</span><br><span class="line">  "prettier/prettier": [</span><br><span class="line">    "error",</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line">      <span class="attr">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"jsxBracketSameLine"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"parser"</span>: <span class="string">"flow"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加编辑器配置"><a href="#添加编辑器配置" class="headerlink" title="添加编辑器配置"></a>添加编辑器配置</h2><h4 id="Atom-编辑器"><a href="#Atom-编辑器" class="headerlink" title="Atom 编辑器"></a>Atom 编辑器</h4><p>可以安装 <a href="https://atom.io/packages/prettier-atom" target="_blank" rel="noopener">prettier-atom</a>；<code>Atom</code> 编辑器还会提示你安装更多辅助插件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install prettier-atom</span><br></pre></td></tr></table></figure><p>它有两种模式可以使用：   </p><ul><li>保存时自动格式化（Packages → Prettier → Toggle Format on Save）   </li><li>使用键盘快捷方式手动调用（如果没有选择，整个文件被格式化）：<code>CTRL + ALT + F</code>   </li></ul><h4 id="VS-Code-编辑器"><a href="#VS-Code-编辑器" class="headerlink" title="VS Code 编辑器"></a>VS Code 编辑器</h4><p>安装插件：<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESlint</a>，<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">Prettier</a>，VS Code 插件配置统一在 preference  → setting  → user setting 设置 (快捷键： <code>Command + ,</code>)，即可实现保存时自动格式化：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sublime-Text-编辑器"><a href="#Sublime-Text-编辑器" class="headerlink" title="Sublime Text 编辑器"></a>Sublime Text 编辑器</h3><p>安装插件：<a href="https://github.com/jonlabelle/SublimeJsPrettier" target="_blank" rel="noopener">JsPrettier</a>，它有依赖到 <code>Prettier</code>  等，所以需要全局安装：<code>yarn global add prettier</code>；在 “Preferences  → Setting” 中添加如下设置，即可实现保存时自动格式化；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"auto_format_on_save"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然您也可以自定义快捷键，以按需格式化代码；在 “Preferences  → Key Binding” 的 User Keymap 中，参考如下示例，注入命令即可 (Windows OS 则是：<code>ctrl + alt + f</code>)：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"keys"</span>: [<span class="string">"command+alt+f"</span>], <span class="attr">"command"</span>: <span class="string">"js_prettier"</span> &#125;</span><br></pre></td></tr></table></figure><p>更多设置、使用细节，可参见 <a href="https://github.com/jonlabelle/SublimeJsPrettier#usage" target="_blank" rel="noopener">SublimeJsPrettier#Usage</a>。</p><h2 id="Pre-commit-Hook-约束代码提交"><a href="#Pre-commit-Hook-约束代码提交" class="headerlink" title="Pre-commit Hook 约束代码提交"></a>Pre-commit Hook 约束代码提交</h2><p>以上探讨了如何运用 ESLint ＆ Prettier 写出优质代码，这都是针对个人的推荐性行为；为保证团队统一代码风格，则必须采取些手段以强制约束；假如您的团队使用 <code>Git</code> 作为代码管理工具，在 <code>commit</code> 行为及之前进行甄别约束，是很棒的选择；于此，可借助 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> &amp; <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 来实现之。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install husky &amp; lint-staged</span></span><br><span class="line">yarn add lint-staged husky --dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># package.json config</span></span><br><span class="line"><span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">  <span class="string">"**/**.&#123;js,json,pcss,md,vue&#125;"</span>: [</span><br><span class="line">    <span class="string">"prettier --write"</span>,</span><br><span class="line">    <span class="string">"git add"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"yarn run precommit-msg &amp;&amp; lint-staged"</span>,</span><br><span class="line">    <span class="string">"pre-push"</span>: <span class="string">"yarn test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>值得一提的是，在实际项目中， <code>husky</code> 很可能由于各种原因，导致不能很好的工作；这多半是由于 <code>.git/hooks/pre-commit</code> 与期待目标不匹配所致，您可以手动修改，也可以采取如下办法 (备注：如果您的 <code>husky</code> 版本在 0.14 及以上)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git/hooks/*</span><br><span class="line">node node_modules/husky/lib/installer/bin install</span><br></pre></td></tr></table></figure><h2 id="写在文章最后"><a href="#写在文章最后" class="headerlink" title="写在文章最后"></a>写在文章最后</h2><p>“上邪，我欲与君相知，长命无绝衰。山无陵，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝”。这突如其来的一首古诗，乍看起来，与本文没有丝毫关系；但需要提醒的是：<strong>您在编写高质量代码时付出的努力越多，您花在调试上的时间就越少</strong>。如果您为项目开发工作流程，做了足够充分而适宜的建设，这不仅可以极大提升代码编写质量与速度，同时可节省调试、解决问题时间开销，而且还能避免无端而起的坏心情，从而更进一步促进工作效率，如此造就的这份优质循环，可以使得您拥有更多时间去学习、折腾、品味人生，这其中自然也可包括品读优美<code>古诗词</code>🐉☺️；所以？<strong>工欲善其事，必先利其器</strong>，您学到了么？</p><p>@2018-06-15 于深圳.南山 Last Modify： 2018-06-15</p><hr><h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的Vue</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></li><li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/">Npm vs Yarn 之备忘详单</a></li><li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li><li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/">晚晴幽草说之-前端札记</a></li><li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a></li><li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/">墙裂推荐文章集锦</a></li></ul>]]></content>
    
    <summary type="html">
    
      Prettier 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；您可以结合 ESLint 和 Prettier，检测代码中潜在问题的同时，还能统一团队代码风格，从而促使写出高质量代码，来提升工作效率。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://jeffjade.com/tags/Vue/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
      <category term="Prettier" scheme="https://jeffjade.com/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>轩帅的博客之旅</title>
    <link href="https://jeffjade.com/2018/06/04/141-talk-about-my-blogs/"/>
    <id>https://jeffjade.com/2018/06/04/141-talk-about-my-blogs/</id>
    <published>2018-06-04T14:22:00.000Z</published>
    <updated>2018-06-04T17:51:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>当时间轴滑至 18 年 6 月，在工作中从事前端相关，已整满三年；这段从征程到旅程的过程，是技术与体力不断交织变更的活计；回顾这几年之种种，多半已是无从言说，随风渐逝；幸好这一路走来，偶有沉淀些文字留存，得以在光阴流逝中使我心安；而本篇就为这些年，承载那些文字的平台作下回顾。</p><a id="more"></a><h2 id="云轩奕鹤"><a href="#云轩奕鹤" class="headerlink" title="云轩奕鹤"></a><a href="https://nice.lovejade.cn/zh/blog/csdn-blog.html" target="_blank" rel="noopener">云轩奕鹤</a></h2><p>早年在初高中、大学期间，就常爱写点文字以自娱；那些年，在西北一隅，游走于教科书中的世界，闭塞且狭小，贫瘠的见识，根本无从得知 <code>互联网</code> 的存在；偶尔苦吟出的“佳句”，只得在纸笔间存留；即便有心保存，而今也是难觅其踪；大学期间，虽学的是<code>计算机</code>相关专业，鲜有接触的网络，却被更多用以充当<code>游戏机</code>与<code>影视播放机</code>；就如在 <a href="https://jeffjade.com/about-me/">Aboue Me</a> 中虽提及的：苦心孤诣想去做些事儿，却未成一事。直到毕业工作后，从事软件开发，才算真正接触到互联网；也是那时方得知并注册了<strong>博客园</strong>： <a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="noopener">云轩奕鹤</a>，不久“写”了第一篇博文，也是由此开启了写博之旅，那时：2013 年 8 月。</p><p><img src="https://image.nicelinks.site/csdn-blog.png" alt="云轩奕鹤"></p><h2 id="晚晴幽草轩"><a href="#晚晴幽草轩" class="headerlink" title="晚晴幽草轩"></a><a href="https://nice.lovejade.cn/zh/blog/hexo-blog.html" target="_blank" rel="noopener">晚晴幽草轩</a></h2><p><a href="https://jeffjade.com/">晚晴幽草轩</a>，由 <code>Hexo</code> 所驱动；部署于 <code>Coding page</code>；基于 <code>Github Issue</code> 作评论系统；使用 <code>Gitalk</code> 作为评论插件；有 <code>Google Analytics</code>、<code>Clustrmaps</code>、<code>百度统计</code>三套分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p><p><img src="https://image.nicelinks.site/hexo-blog.png" alt="晚晴幽草轩"></p><p>坦白说，最开始的“写博”，其实是始自于<strong>纯粹的搬运工</strong>：即遇到觉得好的文章就给移植了来。年随时驰间，技术也有所增长，逐渐会注入有自己的观点；当积淀的多了，也就真正开始写属于自己的技术文章；正如在<a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="noopener">云轩奕鹤</a>副标题中引用的文字: “勤學如春起之苗，不見其增，日有所長。綴學如磨刀之石，不見其損，日有所虧”。在学于思之后，不停折腾之间，越发感觉到<code>个人品牌</code>的重要性，这便是个人主博客<a href="https://jeffjade.com/">晚晴幽草轩</a>诞生的契机。从 <code>jeffjade.com</code> 域名注册时间来看，那是在 2015 年 4 月。</p><h2 id="天意人间舫"><a href="#天意人间舫" class="headerlink" title="天意人间舫"></a><a href="https://nice.lovejade.cn/zh/blog/jekyll-blog.html" target="_blank" rel="noopener">天意人间舫</a></h2><p><a href="https://blog.lovejade.cn/" target="_blank" rel="noopener">天意人间舫</a>，由 <code>Jekyll</code> 所驱动；部署于 <code>Coding page</code> &amp; <code>Github Page</code>；基于 <code>Github Issue</code> 作评论系统；使用 <code>Gitalk</code> 作为评论插件；采用 <code>Google Analytics</code> 作为分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p><p><img src="https://image.nicelinks.site/jekyll-blog.png" alt="天意人间舫"></p><p>记得是 14 年的时候，就有使用 <code>jekyll</code> 来折腾个人博客；只是那时候，其文档以英文为主，相关资料又颇显匮乏；邂逅了 <code>hexo</code>，就被“移情别恋”，也是因此成就了主博：<a href="https://jeffjade.com/">晚晴幽草轩</a>；事实上，对于 <code>Jekyll</code>，也是念念难忘，在接触到一份挺欢喜的响应式主题后，就分分钟又塑造一博客；在历经几次三番的优化（调<code>UI</code>、自定义域名、引入 AnchorJS、渐进式支持等等）之后，成就了现在的<a href="https://blog.lovejade.cn/" target="_blank" rel="noopener">天意人间舫</a>；对于此博客的功用、名字的由来等，在<a href="https://jeffjade.com/2016/01/22/2016-01-22-jeffjade-and-nicejade/">晚晴幽草轩,天意人间舫</a>一文中，有过专门记载。从 Github 提交时间来看，这始于 2015 年 10 月份左右。</p><h2 id="晚晴幽草"><a href="#晚晴幽草" class="headerlink" title="晚晴幽草"></a><a href="https://nice.lovejade.cn/zh/blog/jianshu-blog.html" target="_blank" rel="noopener">晚晴幽草</a></h2><p>谈起在<code>简书</code>写博，也是和<a href="https://jeffjade.com/">晚晴幽草轩</a>有着不小的关系；那时一心想塑造个人品牌，却难于初始流量；可以选择方法就是，在写完文章以后，同步一份到其他平台，如<a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="noopener">博客园</a>等；恰好也是在那时候，初出的平台<code>简书</code>，融合读写一体，且也在努力扩大用户；不拍即合双方，自此也就有了在简书平台的博客：<a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="noopener">晚晴幽草</a>。那是 2015 年 2 月。</p><h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a><a href="https://nice.lovejade.cn/zh/blog/wechat-blog.html" target="_blank" rel="noopener">微信公众号</a></h2><p>对于开通公众号，当时特有留下一篇文章：<a href="https://jeffjade.com/2016/03/23/2016-03-23-toss-wechat-public_no">微信公众号：静晴轩</a>，以作说明。谈起其初衷，无外乎这两点：<strong>跟风</strong>与<strong>无奈</strong>。你知道，对于 <code>wechat</code> 那不支持 <code>Markdown</code> 的‘威武’存在，同步(写)文章显得颇为麻烦；且又不便于引用外链、亦不能修改更新等设定，令人难以心生赞誉；只是有庞大的用户群体，且便于推广扩散；而个人博客也面临与<code>聚合网</code>做斗争等，故而才上了这条船，那是 2016 年 3 月。如今依旧(更)坚信：<strong>独立的才是自己的</strong>；加之如今公众号的红利已过，所以在这方面的经营，只是将博客那边已经沉淀出来的文章，运用工具同步罢了。再怎么威武的平台，不自由的同时，也必定携带你方唱罢我登场的<code>新陈代谢</code>；故而，力荐每个人要建立自己可以掌控的会场，打造属于自己的<code>个人品牌</code>，任江湖兴衰更替，我仍自有一方天地纵横；而这便也是个人作品<a href="https://nicelinks.site/?from=nice.lovejade.cn" target="_blank" rel="noopener">「倾城之链」</a> 的初衷。</p><p><img src="https://image.nicelinks.site/qrcode_jqx.jpg" alt="微信公众号-静晴轩"></p><h2 id="静晴轩别苑"><a href="#静晴轩别苑" class="headerlink" title="静晴轩别苑"></a><a href="https://nice.lovejade.cn/zh/blog/vuepress-blog.html" target="_blank" rel="noopener">静晴轩别苑</a></h2><p><a href="https://nice.lovejade.cn" target="_blank" rel="noopener">静晴轩别苑</a>，由 <code>VuePress</code> 所驱动；部署于 <code>Github Page</code>；采用 <code>Google Analytics</code> 作为分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p><p><a href="https://nice.lovejade.cn" target="_blank" rel="noopener">静晴轩别苑</a>的诞生，其初衷完全是为了体验 <code>VuePress</code>: Vue 驱动的静态网站生成器。<a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">VuePress</a> 由两部分组成：一部分是支持用 <code>Vue</code> 开发主题的极简静态网站生成器，另一个部分是为书写技术文档而优化的默认主题。它的诞生初衷是为了支持 <code>Vue</code> 及其子项目的文档需求。</p><p>每一个由 <code>VuePress</code> 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（<code>SEO</code>）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（<code>SPA</code>），其他的页面则会只在用户浏览到的时候才按需加载。除此之外，它还内置了以下优秀特性：</p><ul><li>为技术文档而优化的<a href="https://vuepress.vuejs.org/zh/guide/markdown.html" target="_blank" rel="noopener">内置 Markdown 拓展</a></li><li><a href="https://vuepress.vuejs.org/zh/guide/using-vue.html" target="_blank" rel="noopener">在 Markdown 文件中使用 Vue 组件的能力</a></li><li><a href="https://vuepress.vuejs.org/zh/guide/custom-themes.html" target="_blank" rel="noopener">Vue 驱动的自定义主题系统</a></li><li><a href="https://vuepress.vuejs.org/zh/config/#serviceworker" target="_blank" rel="noopener">自动生成 Service Worker</a></li><li><a href="https://vuepress.vuejs.org/zh/config/#ga" target="_blank" rel="noopener">Google Analytics 集成</a></li><li><a href="https://vuepress.vuejs.org/zh/guide/i18n.html" target="_blank" rel="noopener">多语言支持</a></li><li>默认主题包含：<ul><li>响应式布局</li><li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">可选的主页</a></li><li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E5%86%85%E7%BD%AE%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener">简洁的开箱即用的标题搜索</a></li><li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#algolia-%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener">Algolia 搜索</a></li><li>可自定义的<a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E5%AF%BC%E8%88%AA%E6%A0%8F" target="_blank" rel="noopener">导航栏</a>和<a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E4%BE%A7%E8%BE%B9%E6%A0%8F" target="_blank" rel="noopener">侧边栏</a></li><li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#git-%E4%BB%93%E5%BA%93%E5%92%8C%E7%BC%96%E8%BE%91%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">自动生成的 GitHub 链接和页面的编辑链接</a></li></ul></li></ul><p>相比与 <code>Nuxt</code>、 <code>Hexo</code>、<code>Jekyll</code>、<code>Docsify</code>、<code>GitBook</code> 等工具，<code>VuePress</code> 在不同方向，都拥有着巨大优势，并且仍在开发更新当中；如果你有搭建个人博客、技术文档的需求，那么 <code>VuePress</code> 将是超棒的选择。</p><p>于 2018-05-20 @深圳.南山 last modify: 2018-06-04</p><h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的Vue</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></li><li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/">Npm vs Yarn 之备忘详单</a></li><li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li><li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/">晚晴幽草说之-前端札记</a></li><li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a></li><li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/">墙裂推荐文章集锦</a></li></ul>]]></content>
    
    <summary type="html">
    
      回顾这些年，所搭建的那些个人博客(基于 Hexo、Jekyll、VuePress 等)，以及体验过的写作分享平台(如：博客园、简书、微信公众号等)。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
      <category term="Blog" scheme="https://jeffjade.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>开箱即用的 Vue Webpack 脚手架模版</title>
    <link href="https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/"/>
    <id>https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/</id>
    <published>2018-05-20T13:21:00.000Z</published>
    <updated>2018-08-19T15:17:18.439Z</updated>
    
    <content type="html"><![CDATA[<p>于 2017 年初，有在 <code>Github</code> 建立并维护一个项目：<a href="https://github.com/nicejade/vue-boilerplate-template" target="_blank" rel="noopener">Vue Boilerplate Template</a>，欲成就一款开箱即用 <code>Vue</code> + <code>Webpack</code> 的脚手架模版；其目标与宗旨是：根据以往经验提供一些参考，对于如何构建中大型 <code>Vue</code> 项目。这蛮久以来，有坚持维护更新，各项主要依赖库，基本都保持着同步升级；记载这篇文章，即是对关于它的设计做下更全面的阐述，以起到项目 <code>Wiki</code> 的作用。</p><a id="more"></a><p><img src="https://image.nicelinks.site/beautiful-cold-fog.jpg" alt="题图来自 picjumbo.com"></p><h3 id="关于此-Vue、Webpack-脚手架模版"><a href="#关于此-Vue、Webpack-脚手架模版" class="headerlink" title="关于此 Vue、Webpack 脚手架模版"></a><strong>关于此 <a href="https://github.com/nicejade/vue-boilerplate-template" target="_blank" rel="noopener">Vue、Webpack 脚手架模版</a></strong></h3><p>这是一个用以开发 Web 单页应用的脚手架项目；谨以 <code>Vue</code> 为开发框架、<code>Webpack</code> 为构建工具，<code>element-ui</code> 为 UI 组件库；同时注入了 <code>vue-router</code>、<code>vuex</code>、<code>vue-i18n</code>，用以支持单页应用，复杂的状态管理，以及多语言设定；另外依赖了 <code>lodash</code>、<code>dayjs</code>、<code>js-cookie</code> 等开发工具库，以提升页面开发效率。当然，在实际项目中，可根据实际需要自由移除或者修改。在此项目中提供了两个演示页，您可以<a href="https://blog.lovejade.cn/vue-boilerplate-template/" target="_blank" rel="noopener">在线查看</a>。</p><p>对于如何使用这款脚手架模版，例如<code>先决条件</code>，<code>用法</code>等在 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/README.md" target="_blank" rel="noopener">README</a> 中已做说明，此处就不在赘述。此脚手架模版，是基于 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a> 所构建，那时 <code>vue-cli</code> 版本还在 <strong>2.*</strong>；再有就是，主张项目是可以<strong>开箱即用</strong>，像 <code>vuex</code>、 <code>eslint</code>、<code>sass</code> 等都默认引入（其好处在于：可以清晰较为全套的项目设定；倘若无需多语言，可在此基础之上做减法，移除 <code>vue-i18n</code> 及相关代码即可；二来，也无需编写些额外代码，来支持用户选择性注入依赖，以节省精力，开发更多有价值的功能；三来，这也算是一种<strong>道</strong>的提倡，像 <code>eslint</code>、 <code>pre-commit</code> 等对于团队项目，都是极为必要的存在，默认引入，也算理所应当）；所以其整个目录结构是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE --------------- 项目许可证（MIT License）文件</span><br><span class="line">├── build ----------------- 存放项目构建相关文件</span><br><span class="line">├── config ---------------- 存放项目构建相关配置文件</span><br><span class="line">├── dist ------------------ 存放项目构建后的输出文件</span><br><span class="line">├── index.ejs ------------- 项目起始文件 (/index.html)</span><br><span class="line">├── package-lock.json ----- 记录用 npm 修改依赖操作的锁文件</span><br><span class="line">├── package.json ---------- npm 的 package.json 处理细节</span><br><span class="line">├── src ------------------- 项目程序主代码文件夹</span><br><span class="line">│   ├── App.vue ----------- 应用程序的主组件</span><br><span class="line">│   ├── assets ------------ 存放资源：样式、图片、字体</span><br><span class="line">│   ├── components -------- 项目自定义的公共组件</span><br><span class="line">│   ├── constants --------- 项目自定义的公共常量</span><br><span class="line">│   ├── filters.js -------- 项目自定义的 vue 过滤指令</span><br><span class="line">│   ├── global.js --------- 协助分担 main.js 工作</span><br><span class="line">│   ├── helper ------------ 项目自定义辅助各类工具</span><br><span class="line">│   ├── locales ----------- 存放(公用)多语言配置</span><br><span class="line">│   ├── main.js ----------- 项目代码的人口文件</span><br><span class="line">│   ├── mixins ------------ 存放 mixin 代码相关</span><br><span class="line">│   ├── router ------------ 存放 &amp; 处理路由相关</span><br><span class="line">│   ├── store ------------- 存放 &amp; 处理 Vuex 相关</span><br><span class="line">│   └── views ------------- 存放项目页面代码</span><br><span class="line">├── static ---------------- 静态的 assets(不被 webpack 处理)</span><br><span class="line">├── <span class="built_in">test</span> ------------------ 项目各类测试相关</span><br><span class="line">└── yarn.lock ------------- 记录用 yarn 修改依赖操作的锁文件</span><br></pre></td></tr></table></figure><hr><p>(Update@2018-08-19)经过多时的酝酿，Vue 终于(2018/08/12)发布了正式发布 <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI 3.0</a>，它也将为很多开发者带来期待已久的新特性。相比于之前版本，它经历了很大程度上的重构，目的是：尽可能减少现代前端工具在配置上的烦恼，尤其是在开发者将多个工具混合使用时；尽可能在工具链中加入最佳实践，并让其成为 <code>Vue</code> 应用程序的默认实践。除了具有丰富的内置功能之外，还有无需 Eject 即可配置、可扩展的插件系统、完整的图形用户界面 (GUI）、Instant Prototyping、Modern Mode 等功能与特性。还未使用的朋友们，可以开始尝鲜了；如果你想更为便捷的体验，这里开源了 <a href="https://github.com/nicejade/awesome-vue-cli3-example" target="_blank" rel="noopener">Awesome Vue-Cli3 Example</a>可供参考，她除了集成了此开箱即用模板的大部分功能，此外还将保持探索、持续更新。</p><p>(Update@2018-06-15) 经过多时的发展，<code>vue-cli3</code> 已经发布 <code>RC</code> 版本；在这个版本，它集成了更多丰富的功能，以及更多默认配置，可通过附带的图形用户界面创建、开发和管理项目。可查看 <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a> 文档，查看更多相关信息。<a href="https://github.com/nicejade/awesome-vue-cli3-example" target="_blank" rel="noopener">awesome-vue-cli3-example</a>，是基于 <code>Vue-Cli3</code> 所搭建的 <code>Vue</code> 项目使用示例，旨在方便开发人员更便捷地使用 <code>Vue-cli3</code>，并更高效合理地构建 <code>Web</code> 应用程序。如果您乐于追求更优质的开发体验，并敢于冒险，不妨一起来展望，<code>Vue</code> 项目新的打开方式。</p><hr><h3 id="项目背后的环境设定"><a href="#项目背后的环境设定" class="headerlink" title="项目背后的环境设定"></a><strong>项目背后的环境设定</strong></h3><p>先从环境说起；众所周知，鉴于 <code>JavaScript</code> 的发展历史，随着其版本的不断更新，更多新语法和代码特性被引入进来，使得编写 JavaScript 体验持续迈向更好。虽然部分浏览器没有能提供很好的支持，但此脚手架已然引入 <a href="https://babeljs.cn/" target="_blank" rel="noopener">babel</a> 系依赖，您可以放心放心 <code>ES6</code> 甚至更超前版本，而不用担心造成兼容性问题。同样，对于 <code>CSS</code> 也是一样，这里已引入 <code>autoprefixer</code>，并作了相应设定，您可以放心使用新特性、预处理语言等，而不用关注浏览器供应商前缀。</p><hr><p>(Update@2018-05-28) 参考 <code>vue-cli3</code> ( 实际上是 <code>creat-react-app</code> ) 对开发体验做了优化：</p><ul><li><strong>对本地开发地址端口使用进行优化</strong>：如果🈯️定端口(如: 8080)被占用，则递增向上寻找新的可用端口(如：8081 / 8082 / … )；</li><li><strong>对自动在浏览器打开本地开发地址做了优化</strong>：如存在已经打开，则不重新打开新的 Tab（适用于 <code>OS X</code> 系统）；</li></ul><p>具体详情，可以参见<a href="https://github.com/nicejade/vue-boilerplate-template/issues/11" target="_blank" rel="noopener"> vue-boilerplate-template | 提升本地开发体验</a>。</p><h3 id="代码及提交规则约束"><a href="#代码及提交规则约束" class="headerlink" title="代码及提交规则约束"></a><strong>代码及提交规则约束</strong></h3><p>这是至关重要的，对于代码的设计和编写；因为：<strong>代码首先是写给人，然后才是写给机器</strong> —— 出自《代码大全》。在设计代码时候，为其赋予<strong>可读性</strong>而花费的时间和努力，绝对物有所值；然而，要求每位成员自觉保持代码统一质量/风格，这种事情的难度，不亚于靠一己之力去上青天。所以 <code>eslint</code> 系依赖，绝对是团队项目必装神器；并将其注入于 <code>Git</code> 的 <code>pre-commit</code> 钩子内，以强制约定尽可能统一代码风格；此时江山一统，方有可传万世之机。另外，对于代码的提交，也是同理，图一时之省心，而提交的无意义 <code>message</code>，这并不是好习惯；因为<strong>当你回头再看，你会发觉所有错的事情，都发生在最对的时间里</strong>。幸好的是，对于这些工作，此脚手架已经帮您做好；当然您可以根据团队整体喜好而作调整。</p><h3 id="所提供的全局性方法"><a href="#所提供的全局性方法" class="headerlink" title="所提供的全局性方法"></a><strong>所提供的全局性方法</strong></h3><p>对于代码的编写效率，也是尤为的重要；毕竟：“<strong>天下武功，唯快不破</strong>；即便说<strong>轻功不表武功，但速度决定了你我の距离</strong>”；更严肃的作证这个观点是：只有快速完成需求，才有时间去学习更多、或在关键点上作优化。故此，在此脚手架中，已将常用的工具、插件、方法，通过添加至 Vue 全局实例，以方便调用；譬如：通过添加至 <code>Vue.prototype</code>，或者全局 <code>mixin</code>(<em>minxns/globalMixin.js</em>) 以及过滤(<em>filters.js</em>)等；</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import _ from <span class="string">'@helper/lodash.js'</span></span><br><span class="line">import &#123; <span class="variable">$apis</span>, <span class="variable">$utils</span> &#125; from <span class="string">'@helper'</span></span><br><span class="line"></span><br><span class="line">Vue<span class="selector-class">.prototype</span>.$_ = _</span><br><span class="line">Vue<span class="selector-class">.prototype</span>.<span class="variable">$apis</span> = <span class="variable">$apis</span></span><br><span class="line">Vue<span class="selector-class">.prototype</span>.<span class="variable">$utils</span> = <span class="variable">$utils</span></span><br></pre></td></tr></table></figure><p>如上这般，您就不用在使用时候反复 <code>import</code>， 直接像这样 <code>this.$_.debounce</code> 使用即可，从而大幅度节省您的编写时间开支；对于其中 <code>$</code> 符号，是个人偏爱的标记，以方便知晓其是来自全局；当然，您可以修改为您所欢喜的记号。您可以看到在 <code>helper</code> 文件夹下，特意开辟出一个文件 <code>lodash.js</code>，用以优化对 <code>lodash</code> 的使用，同时也是为了方便使用；这在 <a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%95%E5%85%A5">《Webpack 打包优化之体积篇》的 <code>尽量使用模块化引入</code></a> 中有过详细叙述。同理，您可以对所引入的各类库，进行再次封装，以使得再项目中可便捷调用，同时可以统一修改、更替，而无需操作调用的地方。另外，值得一提的是对于 HTTP 请求相关的处理。</p><h4 id="更优雅的处理-Http-请求"><a href="#更优雅的处理-Http-请求" class="headerlink" title="更优雅的处理 Http 请求"></a><strong>更优雅的处理 Http 请求</strong></h4><p>下面是一个上古时代关于处理 Http 请求的实例；以现在的视角来看，它显得有些极端，甚至有些不可思议，却是至今仍然屡见不鲜的玩法（即使用的是当下流行的 <code>MVVM</code> 框架，即便 Query.ajax 也是支持链式调用）；然而，不乏有勤劳的开发者，不厌其烦的写着类似的代码，这本身倒也没什么；但当交给别人去维护、或者去读的时候，容易造成身心上的创伤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"GET"</span>,</span><br><span class="line">  url: <span class="string">"xxx/getYyyContent"</span>,</span><br><span class="line">  data: &#123; <span class="attr">username</span>: $(<span class="string">"#username"</span>).val() &#125;,</span><br><span class="line">  dataType: <span class="string">"json"</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> textContent = data.data.textContent</span><br><span class="line">    $(<span class="string">'#text-content'</span>).html(textContent)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something to handle Error</span></span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 做额外的处理无论请求成功或失败</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>大道至简</strong>，优秀的开发流程，一定是便于编写和维护！本脚手架引用类库 <code>axios</code> 和 <code>q</code>，并对其进行简单封装，以处理 Http 请求相关；使其能够支持链式调用，同时对返回数据统一处理，精简返回内容，使得在获取到最终结果处，可以尽可能简单，详见 <code>helper/ajax.js</code>；另外，推荐开发者将接口，按照功能模块规划，分门别类以存放至统一文件夹下，如 <code>helper/apis</code>；如此清晰明了，方便调用，且对于多人协作开发，又不相互响应，减少不必要的冲突。类似善用配置，以<strong>表驱动法</strong>的编程手法，应该活学活用，贯穿始终；具体更详细的陈述，可参见 <a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/#%E5%A6%82%E4%BD%95%E6%BC%82%E4%BA%AE%E4%BD%BF%E7%94%A8-Vue-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87">如何漂亮使用 Vue 之基础篇</a>。倘若以此法来处理 Http 请求，那如上磨人的示例，即可修改为如下模样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123; <span class="attr">username</span>: <span class="keyword">this</span>.form.username &#125;</span><br><span class="line"><span class="keyword">this</span>.$apis.xxx.getYyyContent(params).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.textContent = result.textContent</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something to handle Error</span></span><br><span class="line">&#125;).fin(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 做额外的处理无论请求成功或失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="贴心的路由（Router）配置"><a href="#贴心的路由（Router）配置" class="headerlink" title="贴心的路由（Router）配置"></a><strong>贴心的路由（Router）配置</strong></h3><p>使用 <code>MVVM</code> 框架 + <code>*-router</code> 来创建单页应用，已成为一种主流。在此脚手架中，已将 <code>vue-router</code> 添加进来，并进行了处理；并附有示例：<code>router/routes/demo.js</code>；您可以自由的添加路由及页面映射，来丰盈您的应用程序；同时，您还能为其配置各种页面信息（如：标题、是否须权限验证等）。 对于路由配置，更为贴心的配置，在处理与<strong>导航栏</strong>(/侧边栏)相关部分。</p><p>在前后端分离的现代化 <code>Web</code> 应用中，<code>导航栏</code>配置一般由前后端共同作用：后端负责给予相关配置数据，前端则掌管数据与页面的映射；为了节省工作量，深度拷贝前端路由配置，递归遍历移除无需在<code>导航栏</code>展示项，再融合后端数据，即可组装出一套后台可配置的应用导航列表，而不用牵扯改动前端。当然，您可以根据业务需求，添加更多设定，使得程序拥有更佳的访问、维护体验。比如：为避免每次刷新界面，都发起请求导航栏数据，应将持久化存储（Eg：localStorage）等等。</p><h3 id="完善的-Webpack-打包优化"><a href="#完善的-Webpack-打包优化" class="headerlink" title="完善的 Webpack 打包优化"></a><strong>完善的 Webpack 打包优化</strong></h3><p>这是此脚手架一大亮点，即保持着对主流依赖库的更新及优化，如：<code>webpack</code>、<code>element-ui</code> 等。使用 <code>webpack</code> 来构建 Web 应用程序，如何使其呈现良好的构建速度、优化构建后包体积/文件数量、提升其运行效率等，是每位前端开发者都该去了解的。在这方面，也作了很多学习与尝试，并将些经验记载于：<a href="http://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a> &amp; <a href="http://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a>。关于其配置方案，参见 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.prod.conf.js" target="_blank" rel="noopener">Vue Webpack Config</a>；当然，十分欢迎提出您宝贵的建议，协助进一步完善之。另外，值得一提的是，关于构建包的体积与文件数的平衡：避免造成体量很大或很小的包；对此，<code>Webpack</code> 方面也提供很多插件来辅助这件事，譬如：<code>LimitChunkCountPlugin</code>、<code>MinChunkSizePlugin</code>。鉴于 HTTP 工作机制，在不破坏按需加载的基础上，使得所构建出的 js 文件，数量尽可能少，文件又不过大(100kb ~ 500kb)是一个不错的选择，当然这里指的的是服务端开启 <code>gip</code> 压缩的情况下；如果是由前端负责开启 <code>gzip</code> 压缩，这个 Size 上限应该更低些为宜。除了外，考虑通过 <code>HTTP/2</code> 来对项目项目进行优化，是另一个纬度的解决方案，在此就不多做探讨。</p><h3 id="支持渐进式-Web-应用程序"><a href="#支持渐进式-Web-应用程序" class="headerlink" title="支持渐进式 Web 应用程序"></a><strong>支持渐进式 Web 应用程序</strong></h3><p>渐进式 Web 应用程序（<code>PWA</code> ～ <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Progressive Web App</a>）：它的存在，使得在网络上提供惊人用户体验的新方式，它为构建高质量的渐进式 Web 应用程序，提供了令人难以置信的优势，可以轻松取悦用户，增加参与度并增加转化次数。所以这已经成为了现代化 Web 应用程序必做工作。本脚手架对 <code>PWA</code> 的支持，选择参考了 <a href="https://github.com/vuejs-templates/pwa" target="_blank" rel="noopener">vuejs-templates/pwa</a>，其中用到 <a href="https://github.com/goldhand/sw-precache-webpack-plugin" target="_blank" rel="noopener">sw-precache-webpack-plugin</a> 插件协助生成 <code>service-worker.js</code>。鉴于 <code>serviceWorker</code> 本身的些许限制，此模版默认不引入此功能，取消<a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/index.ejs?#L42" target="_blank" rel="noopener">此行被注释的代码</a>，即可打开该功能。关于这部分更多，可参见<a href="https://github.com/nicejade/nicelinks-vue-client/issues/24" target="_blank" rel="noopener">优化网页 Performance、Progressive、Accessibility、Best Practices</a> 相关提交 &amp; 陈述。推荐您使用 <code>Lighthouse</code> 谷歌浏览扩展，来对自己的 Web 应用跑分，以查纠项目中潜存的可优化点。</p><p>需要补充说明的是：您可以在项目全局搜索 <code>~@CHANGE@~</code> 关键字，这是对于可变化设定的标记；您可以根据项目实际所需，对该部分进行修改。</p><h3 id="脚手架提供的默认命令"><a href="#脚手架提供的默认命令" class="headerlink" title="脚手架提供的默认命令"></a><strong>脚手架提供的默认命令</strong></h3><p>您知道，<code>npm</code>（<code>yarn</code> 亦同）允许在 <code>package.json</code> 文件里面，使用 <code>scripts</code> 字段定义脚本命令。它支持通配符、变量、钩子、外部传参、支持并发 &amp; 异步执行等等；所以，完全可以借助 <code>npm script</code>，打造属于自己的高效工作流。在此脚手架中，默认只是些提供了简单命令，您可以在自己的脚本中，结合您欢喜的工具，如 <code>gulp</code>、<code>bash</code> 等，来塑造属于您的高效工作流。下面对默认命令略作说明：</p><table><thead><tr><th style="text-align:left">npm (yarn) 命令</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">yarn start</td><td style="text-align:left">运行项目以开发环境，是 <code>yarn run dev</code> 的快捷版方式</td></tr><tr><td style="text-align:left">yarn run build:dll</td><td style="text-align:left">构建出 <code>vendor.dll.js</code>，依据 <code>webpack.dll.conf.js</code></td></tr><tr><td style="text-align:left">yarn run build</td><td style="text-align:left">构建项目，以生产环境</td></tr><tr><td style="text-align:left">yarn run jarvis</td><td style="text-align:left">运行 <code>webpack-jarvis</code>（非常智能的基于浏览器的Webpack仪表板）在 <a href="http://localhost:1337/" target="_blank" rel="noopener">http://localhost:1337/</a></td></tr><tr><td style="text-align:left">yarn run analyz</td><td style="text-align:left">对所构建的包进行可视化呈现，在 <a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></td></tr><tr><td style="text-align:left">yarn run preview</td><td style="text-align:left">对项目进行在本地预览，以生产环境，在 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></td></tr><tr><td style="text-align:left">yarn run pretest</td><td style="text-align:left">对生产环境所构建的包进行简单的“预测”：在 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></td></tr></tbody></table><h3 id="使用此脚手架的线上项目"><a href="#使用此脚手架的线上项目" class="headerlink" title="使用此脚手架的线上项目"></a><strong>使用此脚手架的线上项目</strong></h3><ul><li><a href="https://nicelinks.site?from=vue-webpack" target="_blank" rel="noopener">「倾城之链｜NICE LINKS」</a>：一个开放平台，旨在云集全球优秀网站，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。</li></ul><h3 id="项目待优化的那些方向"><a href="#项目待优化的那些方向" class="headerlink" title="项目待优化的那些方向"></a><strong>项目待优化的那些方向</strong></h3><ul><li><strong>完善<a href="https://cn.vuejs.org/v2/guide/unit-testing.html" target="_blank" rel="noopener">单元测试</a>相关</strong>；在代码层面，做好单元测试，有助于提升代码质量，从而使得项目质量、后续维护都可以更好。考虑将在之后的版本中，参考 <a href="https://vue-test-utils.vuejs.org/zh-cn/" target="_blank" rel="noopener">Vue Test Utils</a> 对这块儿进行完善。</li><li><strong>SEO 优化相关</strong>；这是多方都应该考虑的问题；但在项目设计层面，可以考虑<a href="https://cn.vuejs.org/v2/guide/ssr.html" target="_blank" rel="noopener">服务端渲染</a>来极大提升 SEO （如：<a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">Nuxt</a>）；但这对于已经处于开发阶段的项目，涉及需要更多的调整，相比于其他的可选方案。<a href="https://nicelinks.site?from=vue-webpack" target="_blank" rel="noopener">「倾城之链｜NICE LINKS」</a> 是基于 <a href="https://github.com/prerender/prerender" target="_blank" rel="noopener">prerender</a>，在 <code>nginx</code> 层面，针对浏览器作预渲染以优化 SEO，现在看起来效果可以。 另外可以选择的方案是运用 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">Prerender SPA Plugin</a>，在 <code>Webpack</code> 构建项目时预渲染静态 html 内容，；在未来版本中，会考虑针对这块儿给出一个相对折中的方案。</li><li><strong>塑造更便捷的前端开发环境</strong>；这里所言的<code>开箱即用</code>，仍需要在您已经安装高版本 <code>node</code> 的前提；这对于新晋开发着并不是友好；如果，您使用的是基于 <code>windows</code> 系统的环境，并不能保证这套脚手架可以很顺利运行(😌)；因此，有考虑借助 <code>Docker</code> 等工具，优化前端开发环境，使其可以更新便捷，而无需依赖更多。</li></ul><h3 id="写在最后的结语"><a href="#写在最后的结语" class="headerlink" title="写在最后的结语"></a><strong>写在最后的结语</strong></h3><p>对于分享，您的海量包容和意见建议，是促进彼此都能<strong>更上一层楼</strong>的关键。输出文字，总是比写代码辛苦的多；在付出多时的敲敲打打之后，希望可以得到您宝贵的意见和建议，使得此脚手架可以更进一步，以惠及到更多的人。最后，推荐您体验个人最新作品 ～ <a href="https://nicelinks.site?from=vue-webpack" target="_blank" rel="noopener"><code>「倾城之链｜NICE LINKS」</code></a>： <strong>倾心缔造，痴心为你</strong>，希望您会喜欢。</p><p>@2018-05-13 于深圳.南山 Last Modify： 2018-05-20</p><hr><h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier">使用ESLint ＆ Prettier美化Vue代码</a></li><li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的Vue</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></li><li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/">Npm vs Yarn 之备忘详单</a></li><li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li><li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/">晚晴幽草说之-前端札记</a></li><li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a></li><li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/">墙裂推荐文章集锦</a></li></ul>]]></content>
    
    <summary type="html">
    
      通过介绍一款开箱即用的 Vue Webpack 脚手架模版，以探讨“如何更高效开发单页面应用”；其中，对于构建中大型 Vue 项目，根据不断积淀的开发经验，提供创立项目基础、演示、大量的实践以及参考性建议；并且将保持持续性更新优化。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://jeffjade.com/tags/Vue/"/>
    
      <category term="Webpack" scheme="https://jeffjade.com/tags/Webpack/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
  </entry>
  
  <entry>
    <title>交易之为，攻守之道</title>
    <link href="https://jeffjade.com/2018/03/31/139-attack-and-defense-between-trade/"/>
    <id>https://jeffjade.com/2018/03/31/139-attack-and-defense-between-trade/</id>
    <published>2018-03-30T16:00:00.000Z</published>
    <updated>2018-04-24T14:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们赖以生存的世界，正在以超高加速度被变革着。未来充盈无限美好，令人憧憬；却也伴随着巨大挑战，使人心惊。<strong>长而远观</strong>，斯蒂芬·霍金先生，有预测地球上的生命，很有可能由于某种灾难而灭绝，而人类以不可持续的速率，继续吞噬地球上的资源，这将加速地球的毁灭；<strong>就近来看</strong>：中国作家刘慈欣先生，于 2005 年的作品《赡养人类》，在流逝的不长时间中，其描绘的图景正在一步步的成为现实；<strong>就身边生活感受而言</strong>：<a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">@阮一峰</a>也有早早意识到<strong>世界正在猛烈变化</strong>，并写<a href="http://www.ruanyifeng.com/survivor/" target="_blank" rel="noopener">未来世界的幸存者</a>一书，希望能让读者意识到洪水就在不远处，从而早早准备出路。而，就我个人感受，不知多少年前开始，至也不知道延伸至以后的多少年，各种元素造成的压力，正变本加厉的，向我们的身心袭来 ……</p><a id="more"></a><p><img src="https://image.nicelinks.site/%E9%BB%91%E7%8C%BF.jpeg" alt="晚晴幽草轩 | 交易之为，攻守之道"></p><p>以这样的语调，来开始这篇文章，实在非我之所愿；只是萦绕在身边的现实，确实就是如此，也无须刻意去回避。这在之前很多文章里，这种略显现实主义的观点早已蔓延。很显然的未来是：世界正处在一个前所未有的大变局：<strong>机器人、自动化、人工智能正在变得比人类更强大。在可预见的将来，技术最终将淘汰人类</strong>。而在不远的将来（2035年左右），不出意外的人类社会，将只会只存留两种人：一者，拥有技术与资源的人；二者，被社会、国家所赡养的人。更明显的是，同为人类的你我，几乎少有例外，都不愿意成为第二种人；否则，也不会那么多人如你我，早起晚寝，辛勤工作，拼命奋斗于这个充满竞争的现实里。</p><p>玩过对抗游戏的朋友，兴许都能体会，前期如已占据优势，如果没有大的意外，随着节奏的推移，优势会更显明显，直至取得最后的胜利。一如现在的这个社会，强者易更强。而广大奋斗在一线工作岗位的你我，在这场博弈中竞争，已处于明显的劣势；那么，如何能够让自己及妻儿老小，在未来到来的那天，能够不那么焦虑、辛苦，这兴许是大多人（至少是国人）都应该思考和准备的议题。</p><p>努力而认真的工作，无疑是应对此问题最直接的选择，多半也是最优的选择；但，这并非唯一，而且也不能够是。伴随着世代风云变幻，物价蔓涨，货币失值，仅靠工作而得资本，倘若没有仔细经营，那一方存储小金库，想必不会怎么丰盈；况且，如果一旦外力导致不能够工作，事情陡然间就变得危险了。因此，拥有第二(Or 第三)等多种收入来源，就被成为了理所当然得成了共识。于此，有人选择挖掘自身第二自由职业、很人早早的选择了炒房、也有很人选择做投资理财，买卖货币基金，当然也有很多选择人涌入了股市，坐看风起云涌，凡此等等，数不胜数。</p><p>无论做何种尝试，其本身都是值得鼓励，毕竟前路多艰。但，如果作为看官的你，也选择了投资或炒股，那么接下的就进入了文章的主题：<strong>入市有风险，投资需谨慎</strong>。众所周知，投资大师巴菲特有句名言：“在别人恐慌时贪婪，在别人贪婪时恐慌”，这句话实践起来，本身就对人性产生着极大的考验；况且一堆堆背后的机构也是向利而生，唯利是图，故而市场总是波橘云诡；想在这些虎口谋财，需要的不仅仅是信息、运气、耐心、技巧等等，更多的可能是需要不断调整好的心态，默默地等待机会的到来；于此，下面分享之前看到一篇文章，据评为“韭菜者圣经”（已不知其原始出处）；如题所言：<strong>交易之为，攻守之道</strong>，大概就该是如此了：</p><blockquote><br>　　交易之道，刚者易折。惟有至阴至柔，方可纵横天下。天下柔弱者莫如水，然上善若水。<br><br>　　成功，等于小的亏损，加上大大小小的利润，多次累积。做到不出现大亏损很简单。以生存为第一原则，当出现妨碍这一原则的危险时，抛弃其他一切原则。因为，无论你过去曾经，有过多少个100%的优秀业绩，现在只要损失一个100%你就一无所有了。<br><br>　　交易之道，守不败之地，攻可赢之敌。100万亏损50%就成了50万，50万增值到100万却要盈利100%才行。每一次的成功，只会使你迈出一小步。但每一次失败，却会使你向后倒退一大步。从帝国大厦的第一层走到顶楼，要一个小时。但是从楼顶纵身跳下，只要30秒，就可以回到楼底。<br><br>　　在交易中，永远有你想不到的事情，会让你发生亏损。需不需要止损的最简单方法，就是问自己一个问题：假设现在还没有建立仓位，是否还愿意在此价位买进。答案如果是否定，马上卖出，毫不犹豫。<br><br>　　逆势操作是失败的开始。不应该对抗市场，或尝试击败他。没有必要比市场精明。趋势来时，应之，随之。无趋势时，观之，静之。等待趋势最终明朗后，再动手也不迟。这样会失去少量的机会，但却赢得了资金的安全。你的目标必须与市场保持一致，顺应市场的趋势。如果你与市场保持一致，利润自会滚滚而来。如果你看错了趋势，就得使用古老而可靠的保护伞止蚀单。这就是趋势和利润的关系。<br><br>　　操盘成功的两项最基本规则就是：停损和持长。一方面，截断亏损，控制被动。另一方面，盈利趋势未走完，就不轻易出场，要让利润充分增长。多头市场上，大多数股票可以不怕暂时被套。因为下一波上升会很快让人解套，甚至获利。这时候，买对了还要懂得安坐不动，不管风吹浪打，胜似闲庭信步。交易之道的关键，就是持续掌握优势。<br><br>　　快速认赔，是空头市场交易中的一个重要原则。当头寸遭受损失时，切忌加码再搏。在空头市场中，不输甚至少输就是赢。多做多错，少做少错，不做不错。在一个明显的空头市场，如果因为害怕遭受小损失而拒绝出局，迟早会遭受大损失。<br><br>　　一只在中长期下降趋势里挣扎的股票，任何时候卖出都是对的。哪怕是卖在了最低价上。被动持有等待它的底部，这种观点很危险，因为它可能根本没有底。<br><br>　　学会让资金分批入场。一旦首次入场头寸发生亏损，第一原则就是不能加码。最初的损失往往就是最小的损失，正确的做法就是应该直接出场。如果行情持续不利于首次进场头寸，就是差劲的交易，不管成本多高，立即认赔。<br><br>　　希望在底部或头部一次搞定的人，总会拿到烫手山芋。熊市下跌途中，钱多也不能赢。机构常常比散户死的难看。小资金没有战略建仓的必要，不需要为来年未知行情提前做准备。不需要和主力患难到底。明显下跌趋势中，20-30点的小反弹，根本不值得兴奋和参与。有所不为才能有所为。行动多并不一定就效果好。有时什么也不做，就是一种最好的选择。<br><br>　　不要担心错失机会，善猎者必善等待。在没有大机会的时候，要安静的如一块石头。交易之道在于，耐心等待机会，耐心等待最有利的风险/报酬比，耐心掌握机会。熊市里，总有一些机构，拿着别人的钱，即使只有万分之几的希望，也拼命找机会挣扎，以求突围解困。我们拿着的是自己的钱，要格外珍惜才对。不要去盲目测底，更不要盲目炒底。<br><br>　　要知道，底部和顶部，都是最容易赔大钱的区域。当你感到困惑时，不要作出任何交易决定。不需要勉强进行交易，如果没有适当的行情。没有胜算较高的机会，不要勉强进场。股市如战场，资金就是你的士兵。在大方向正确的情况下，才能从容地投入战斗。要先胜而后求战，不能先战而后求胜。<br><br>　　投机的核心就是尽量回避不确定走势，只在明显的涨势中下注。并且在有相当把握的行动之前，再给自己买一份保险(止损位摆脱出局)，以防自己的主观错误。<br><br>　　做交易，必须要拥有二次重来的能力，包括资金上，信心上和机会上。你可以被市场打败，但千万不能被市场消灭。我们来到这个市场是为了赚钱，但是这个市场却不是全自动提款机。进入股市，就是要抢劫那些时刻准备抢劫你的人。股票投机讲究时机和技巧，机会不是天天有，即使有，也不是人人都能抓住。要学会分析自己擅长把握的机会，以己之长，攻彼之短。有机会就捞一票，没机会就观望，离开。如果自己都不清楚自己擅长什么，就不要轻举妄动。与鳄共泳有风险，入市捞钱需谨慎。做交易,最忌讳使用压力资金。资金一旦有了压力,心态就会扭曲。你会因为市场上的正常波动而惊慌出局，以至事后才发现自己当初处于非常有利的位置。你也会因为受制于资金的使用时间，在没有机会的时候孤注一掷，最终满盘皆输。资金管理是战略，买卖股票是战术，具体价位是战斗。<br><br>　　在十次交易中，即使六次交易你失败了，但只要把这六次交易的亏损，控制在整个交易本金20%的损失内，剩下的四次成功交易里，哪怕用三次小赚，去填补整个交易本金 20% 的亏损，剩下一次大赚，也会令你的收益不低。<br><br>　　你无法控制市场的走向，所以不需要在自己控制不了的形势中浪费精力和情绪。不要担心市场将出现怎样的变化，要担心的是你将采取怎样的对策回应市场的变化。<br><br>　　判断对错并不重要，重要的是当你正确时，你获得了多大的利润，当你错误的时候，你能够承受多少亏损。<br><br>　　入场之前，静下心来多想想，想想自己有多少专业技能支撑自己在市场中拼杀，想想自己的心态是否可以禁得住大风大浪的起伏跌宕，想想自己口袋中有限的资金是否应付得了无限的机会和损失。<br><br>　　炒股如出海，避险才安全。海底的沉船都有一堆航海图。最重要的交易成功因素，并不在于用的是哪一套规则，而在于你的自律功夫。时间决定一切。人生并不只是谋略之争，某种程度上也是时间和生命的竞争。巴菲特 多活 10 年，每年哪怕只有 5% 的持续盈利，其财富的总增长，也足以笑傲天下。<br></blockquote><p>上面谈了这些许，也得说说笔者自身的状态，否则容易给人一种泛泛而谈得感觉(即便真的只是如此，但出发点并非如此)；鉴于现实的无奈，随着时间的更替，笔者对资本兴趣也是正向指数增长；那些年从用某宝开始，投资买点理财产品，前两年也有买卖些基金，去年开始玩儿了股票，偶尔也倒腾点黄金；有赚有赔（你知道的，18 年伊始的的前三个月，市场各种震荡），有赔有赚（长久的市场，总是越发向好的，不是么？）。世人皆知，鸡蛋不能放在一个篮子，尤其是对于不够了解的篮子；所以，笔者也没有在这些方面投入过多精力去打理；投资自己或者信得过朋友，未尝不是更好的选择。就笔者而言，过去的这一年，蛮多业余时间就投在自己擅长的领域 —— Web 技术相关；自编自导，有塑造一款 Web 应用: <a href="https://nicelinks.site?from=139-aadbt" target="_blank" rel="noopener">「倾城之链｜NICE LINKS」</a>；在做好之前，倒没考虑靠其盈利；不过独自去设计、维护、运营，这本身对自身能力也是一种提炼。倘若，你信得过自己，那么还有什么比投资自己，来的更<strong>妙而稳</strong>呢？</p><p>最后，让我们一起相信，明天将充盈更多的是美好，如果我们运气不差，且足够努力的话。</p><p>@2018-03-31 于深圳.南山 Last Modify： 2018-04-23</p>]]></content>
    
    <summary type="html">
    
      交易之道，刚者易折。惟有至阴至柔，方可纵横天下。天下柔弱者莫如水，然上善若水。
    
    </summary>
    
      <category term="Share" scheme="https://jeffjade.com/categories/Share/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>疆湖期待有你，携手互联疆来</title>
    <link href="https://jeffjade.com/2018/03/05/138-aggregated-info-about-dji-recruitment/"/>
    <id>https://jeffjade.com/2018/03/05/138-aggregated-info-about-dji-recruitment/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-03-15T13:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>（嗯，这是一篇招聘贴😊）记得在“不久”之前，才写了<a href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/">疆来有你，从心出发</a>一文；转眼却已是新的一年，时光荏苒！当我们再次告别熟悉的家乡，怀揣着梦想，肩扛以现实，奔走于陌生的城市；正值春意即将盎然，倘若你想换一个环境闯闯，那么不妨关注下这篇帖子；倘若，你同时还对「大疆创新」的工作机会感兴趣，那么这篇就是为你而准备的。</p><a id="more"></a><p><img src="https://image.nicelinks.site/the-future-of-possible.jpeg" alt="未来无所不能"></p><p>在这篇文章中，将会持续对<strong>大疆创新</strong>日后招聘信息，同步更新于此，以飨“晚晴幽草轩”的读者们。此刻，倘若你对<strong>大疆创新</strong>，尚不是很了解，可以参见<a href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/">疆来有你，从心出发</a>一文，或者也可以从以下链接所介绍的内容中，得到些讯息：<a href="https://we.dji.com/zh-CN/djistory?from=jeffjade.com" target="_blank" rel="noopener">关于大疆</a>、<a href="https://www.dji.com/?from=jeffjade.com" target="_blank" rel="noopener">大疆官网</a>、<a href="https://we.dji.com/zh-CN/?from=jeffjade.com" target="_blank" rel="noopener">大疆招聘官网</a>、<a href="https://www.lagou.com/gongsi/21775.html" target="_blank" rel="noopener">DJI大疆创新-拉勾</a>。以下即为<strong>大疆创新</strong>招聘信息/活动（按时间逆序同步）：</p><h3 id="校园活动-│-“拓疆者”号，再次启航"><a href="#校园活动-│-“拓疆者”号，再次启航" class="headerlink" title="校园活动 │ “拓疆者”号，再次启航"></a>校园活动 │ “拓疆者”号，再次启航</h3><p><strong>时间</strong>： 2018 年 3 月 ～ 2018 年 10 月</p><ul><li><a href="https://mp.weixin.qq.com/s/gwxXqyFS0YfDux6VFL3-DA" target="_blank" rel="noopener">校园活动 │ “拓疆者”号，再次启航</a></li></ul><h3 id="疆遇良才·OPEN-DAY-系列活动"><a href="#疆遇良才·OPEN-DAY-系列活动" class="headerlink" title="疆遇良才·OPEN DAY 系列活动"></a>疆遇良才·OPEN DAY 系列活动</h3><p><strong>时间</strong>： 2018 年 3 月 10 日 ～ 2018 年 3 月 25 日</p><p>这个春天，「大疆创新」将举办多场 Open Day 活动(是大疆创新为职场人士精心打造的专场招聘活动，旨在通过集中提供指定细分方向岗位，以现场体验、快速响应的方式，拉近求职者与企业的距离，便于双方在更短时间内进行精准匹配及双向选择。)，其涵盖市场销售，地产，服务，采购，软件以及研发等多个体系；这种招聘形式，速度快得超乎你的想象；从简历投递，到面试完毕，可一天之内搞定。具体的活动介绍、时间表、地点、活动流程等，可参考以下链接：</p><ul><li><a href="https://mp.weixin.qq.com/s/eKlxWA9laB_R0WSD4ihsog" target="_blank" rel="noopener">大揭秘│2018年春季社招活动前瞻</a></li><li><a href="https://we.dji.com/zh-CN/recruitment/openday" target="_blank" rel="noopener">新的一年，以更快的方式相遇</a></li><li><a href="https://mp.weixin.qq.com/s/XbqxpoXSRNvH5bWzAssO2Q" target="_blank" rel="noopener">北京招聘│大疆创新，互联北京</a></li><li><a href="https://mp.weixin.qq.com/s/2Ls_waGxdLCGirFS-azFhg" target="_blank" rel="noopener">疆遇良才Open Day│大牛们：招聘季，什么是最好的语言</a></li><li><a href="https://mp.weixin.qq.com/s/9wdUDdAob1EBi1AO4FbM-Q" target="_blank" rel="noopener">疆遇良才Open Day│来大疆市场销售，做更好的自己</a></li><li><a href="http://mp.weixin.qq.com/s/qzTa_SFulR0zhxmKtgVP8Q" target="_blank" rel="noopener">疆遇良才Open Day│嵌入式专场</a></li><li><a href="https://mp.weixin.qq.com/s/LJr5mi9izjZtnZIrT_RrCw" target="_blank" rel="noopener">疆遇良才Open Day│算法&amp;NPI专场</a></li></ul><p>当然，具体详细活动安排，可关注<a href="https://we.dji.com/zh-CN/?from=jeffjade.com" target="_blank" rel="noopener">大疆招聘官网</a>、或者“大疆招聘”微信公众号。另外，也可发送邮件至 <a href="mailto:hr@dji.com" target="_blank" rel="noopener">hr@dji.com</a> 或者 <a href="mailto:jeffjade@163.com" target="_blank" rel="noopener">jeffjade@163.com</a> （后者，可获取内推码）。</p><p>欢迎各位有志拓疆的勇士届时亲临现场，和我们一起探索不一样的职场！疆湖期待有你，携手互联疆来。</p><p>@2018-03-05 于深圳.南山 Last Modify： 2018-03-06</p>]]></content>
    
    <summary type="html">
    
      在仅有一次的人生里，是庸庸碌碌以求个安安稳稳，还是在迎风逆浪中选择决不妥协，相信你心中自有答案，遵从内心，做真正的自己，现在，机会在这里：大疆创新 2018 春季招聘盛大开启，具远见者，方识天下，不忘初心，梦想必达，你准备好迎接挑战了么，是时候该你登场了。
    
    </summary>
    
      <category term="Share" scheme="https://jeffjade.com/categories/Share/"/>
    
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>写于 2017 年末</title>
    <link href="https://jeffjade.com/2018/01/01/137-written-at-the-end-of-2017/"/>
    <id>https://jeffjade.com/2018/01/01/137-written-at-the-end-of-2017/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-03-15T15:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>公元 2017 年，就这般即将退出历史的舞台。坦白说，对此内心有盈一份欢喜，亦存几分不舍。对于这一年，以及所经历之种种，如要用一句诗词以祭奠，于我而言，最恰如其分的，莫过于纳兰性德在《木兰花令》（拟古决绝词柬友）中写的这两句：“人生若只如初见，何事秋风悲画扇”。</p><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="340" height="86" src="//music.163.com/outchain/player?type=2&id=194405&auto=0&height=66"></iframe><br><img src="https://image.nicelinks.site/new-years-eve.jpg" alt="写于 2017 年末"></p><p>先前，偶刷微博，看到有人如此感慨，大意是“如果「去 TMD」，为其取个别名的话，那就是 2017”；记得当时略微思忖之后，反手就给了一个赞。永动的时光涟漪，不停敲打着生命有限的年轮（备注，当写到这里时候，就搁浅至今 —— 2018 年 二月份），这不失为一种善意的提醒：岁月无尽，韶华有限；生活中虽不免有很多事，须要去不断 <code>2017</code>；亦有很多事，则需去好好规划经营一番，以不负好不易走的这一遭青春年华 ……</p><p>回顾那年与 ta 走散的 2017，说是孤寂无比，虽说不是百分百贴切，倒也非”为赋新词强说愁”，况且已非少年；那年多是形单影只的躯体下，有一颗灵魂无处可寄；所以，这一年有过沉沦，4 月份到 8 月份，堕落于「王者农药」难以自拔，甚至于到难以自顾之境；倒不是因为觉得好玩，更确切的缘由，自己一两句也难以阐述得清楚；这一年的下半段，疲忙之余，即便躺下时已是很晚，仍会沉浸在各种被算法推荐的视频中 —— 多半年轻时候看过的武侠、历史剧，或者一些娱乐搞笑；消遣在这些虚幻，整个人都十分放松而自在 ……</p><p>那年 2017，365 个白天和黑夜，有过或失眠、或贪玩至天亮；也有过或无意、或有意酣睡到傍晚；那年 2017，平淡的工作中，偶也点缀些磕磕绊绊，了解工作的地方叫做“职场”；那年 2017，没怎么读书、鲜有去电影院，KTV 去的次数，一只手好像也能数得过来；那年 2017，吃的最多的食物，是楼下一家东北饺子；那年 2017，做过最频繁的运动，是坐着敲代码(偶尔也会站着) …… 幸好的是，有那么些时候，还是合理的利用了独处的时光，做了些自我感觉不错的事情，比如说：</p><ul><li>这一年，虽笔耕时辍，但也在个人博客，留下文章近 20 篇；当然，对于之前预期的网站访问量，如今看来当时立的是一个 Flag；2018 再接再厉，继续努力；在知识付费大行其道的今天，坚信知识应该开源、共享；未来的日子，仍然会朝向这条路，一直走下去。同时，也在此感谢那些<strong>慷慨打赏</strong>的朋友们，是你们坚定了这份坚持的信念；因此也将更加用心，生产出更多好文，以飨看官朋友们。</li><li>这一年，终于开始做真正意义上的个人产品：<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链 ｜ NICE LINKS」</a>，当然，目前仍在不断迭代、升级、优化之中。列了诸多<a href="https://github.com/nicejade/nicelinks-vue-client/issues#boards" target="_blank" rel="noopener">待开发得功能/优化</a>，等待一一去解决。在这条路上，孤寂前行，一个人去策划、设计、编码、测试、维护、运营、推广 …… 遇到困难，须独自承担，解决问题，却无人分享；想必大凡成其事者，大概都要经历这样的孤独吧。当然，多希望人生、事业也好，兴趣、闲情也罢，可有伴同行。</li><li>这一年，有在 <code>Github</code> 上坚持维护<a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a>，增删更变，几未间断；当然，这份收录，跟自身的见识(见闻)，以及对事务的优劣判别是息息相关的。随着视野的宽广，以及层次的提升，这份不断更新的收录，想必质量会越发的好些；2018，仍会持续学习，保持更新，希望它的存在帮助更多的人。</li><li>这一年，有开始在微信上，维护<a href="https://jeffjade.com/nicelinks/#%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%81%94%E7%9B%9F">大前端联盟</a>交流群，旨在方便同道中人交流技术，切磋技艺，分享心得与见闻；没怎么特别的去推广，如今有 Coder Friends 百余人。见过不少肆意吹水的群，也见得些闹裂般“自以为是”的交流群维护者，所以对于如今自己维护的群，还颇为满意；宽严适度，轻松交流；只为众人可从中获益以取舍，实在善莫大焉。</li></ul><p>2017，平淡而平凡的工作 &amp; 生活之外，打了蛮久的游戏，看了不少那些年经典视频；没怎么锻炼身体，没读几本书，也没怎么线下社交，也没有自己做过餐；偶尔追了几部好剧，跟朋友看了几场电影，也跟好友走了附近一两个地方，KTV 也去过一两次的样子…… 其他大部分时间就是一个<strong>宅</strong>字。鉴于(人类社会)形势的越发严峻，也有开始学者倒腾些股票、基金、黄金等等，以求资财（备注：段位不够，位及输家）；这基本就是那已然逝去的 2017 了。讲真的，身体真得多家锻炼下，好书也该跟多地去品味。可早在<a href="https://jeffjade.com/2016/12/31/117-written_at-the-end-of-2016/">写于 2016 年末</a>也有这样设想 Or 规划，最后是什么样得 2017 呢？虽然说“不经审视的人生，是不值得过的”，但，岁月划在人生的这个年轮上，想的只是分秒必争的做好该做的事儿，且享受当下的生活，其他的<strong>一切随缘</strong>好了。</p><p>如今，2017，已然成为历史。2018 也走过了十二分之一有余，祭奠过往，只为将那些逝去好好封存，然后轻装更好地前行。</p><p>@2017-12-31 于深圳.南山 Last Modify： 2018-03-14</p>]]></content>
    
    <summary type="html">
    
      对 2017 年生活、工作（Web前端开发）的总结，同时记录下这个年龄段对人生的感悟，以及对接下来的 2018 年，做下展望与规划。
    
    </summary>
    
      <category term="Share" scheme="https://jeffjade.com/categories/Share/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>云集优站，尽在「倾城之链」</title>
    <link href="https://jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/"/>
    <id>https://jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/</id>
    <published>2017-12-31T03:11:00.000Z</published>
    <updated>2018-04-25T12:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>“1975年二、三月间，一个平平常常的日子，细蒙蒙的雨丝夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天看来就要过去，但那真正温暖的春天还远远地没有到来”，路遥先生在其伟大的著作《平凡的世界》的开篇中，如此写道。</p><a id="more"></a><blockquote><p><strong>题记：</strong>又一天结束了。除过又增加了一堆揉皱的为纸处，眼前仍然没有一个字。第三天重蹈覆辙。三天以后，竟然仍是一片空白。叫天天不应，叫地地不灵。开始在记谙不停地转圈圈走，走，走，像磨道的一头驴。从高烧似的激烈一直走到满头热汗变为冰凉。冰凉的汗水使燃烧的思索冷静了下来。冷静在这种时候可以使人起死回生。—— 路遥<a href="https://blog.lovejade.cn/2016/02/26/the-morning-started-at-noon-1.html" target="_blank" rel="noopener">《早晨从中午开始》</a></p></blockquote><p><img src="//image.nicelinks.site/nice-fantasy.jpg" alt="倾城之链"></p><p>2017 疲忙之年；闲暇时光也多，却总孤寂以连绵；热血所至时，多用来设计 &amp; 折腾最新个人作品：<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链｜NICE LINKS」</a>，前端代码开源于<a href="https://github.com/nicejade/nicelinks-vue-client" target="_blank" rel="noopener">nicelinks-vue-client</a>；其旨在打造一款优质 Web 应用，在锻炼个人技法的同时，希望以其独特的有用性，可以帮助到更多的人；在此篇中，将分享下关于<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>，及其背后的故事，希望您会喜欢。</p><blockquote><p><strong>微注</strong>：倘若您使用移动端设备，不妨在浏览器打开后，将她添加到「设备主屏幕」；如果您这样做，将为下次访问提供了极大的便利，且不会对您的设备产生副作用。当然，将会持续性对她进行优化改造，使其拥有和原生应用相媲美的体验（update@2018-01-03）。</p></blockquote><h2 id="故事的起源"><a href="#故事的起源" class="headerlink" title="故事的起源"></a><strong>故事的起源</strong></h2><p>那些年，在搭建这个人博客平台——<a href="https://jeffjade.com">晚晴幽草轩</a>之时，就有深刻的认识到：<strong>当今时代，即便是再小的个体，也当有自己的品牌</strong>；这一观点在过去很多文章中，都有极力的去呈现、宣扬。然而，这种影响力毕竟有限，况且对于那些优质品牌，也无法起到实质性作用。要知道，当今时代，最重要莫过于「信息」；对信息的承载，可以说绝大部分是源于网络；而信息在网络中传播，起着绝对作用的则是各类网站；故此，不难得出：对于很多品牌最佳的承载，即「专属网站」；因此，在 2016 年初，就决心自己开发一款产品，为这观点以布道，使那优秀能广传；这即是<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>的动机起源。</p><h2 id="「倾城之链」之由来"><a href="#「倾城之链」之由来" class="headerlink" title="「倾城之链」之由来"></a><strong>「倾城之链」之由来</strong></h2><p>对于为何命名为“倾城之链”，有必要率先做下阐述。兴许，很多事务，在冥冥之中早有定数，包括如今用这样的态度，来言说这作品名字的由来。既然决定开发一款产品，而那时正值从事互联网行业，所接触更多的又是「前端开发」，因为以「Web 应用」来呈现，自然成为了那最佳选择；那么接下来即是域名的选定了；域名选定，最好是好记且见名知义；其后缀，最优考虑莫过于 <code>.com</code>，你知道这种类型的域名早已被“名花有主”，若要得来，代价不菲；退而求其次，<code>.site</code>似乎是不错的选择(当时，鬼使神差的认为，后缀已有 <code>site</code>，正名中再带有这词，似有不妥，就择选以“链”代替“站”，在英文中，取其复数即为 <code>links</code>；在书写这篇文章的时候，倒觉得也还好)；既是为了云集「优秀网站」，而个人又向来偏爱「NICE」这一词汇，所以就有了后来的 <code>nicelinks.site</code>；域名已定，那么网站的名字，自然也就是 <code>NICE LINKS</code> 了。而对于进行的中文释义，按照我那天性以及后天经历，「倾城之链」则是必然的结果😄。所以这么看来，在冥冥之中，是不是已有此定数？</p><h2 id="「倾城之链」更多机缘"><a href="#「倾城之链」更多机缘" class="headerlink" title="「倾城之链」更多机缘"></a><strong>「倾城之链」更多机缘</strong></h2><p>食物、空气、水和休息，基本上就可以构成人类生存的「必要元素」；但，远古时期伊始，人类就不止仅周旋于这些。因而，还需补充说明的是，在起源动机之外，还有很多其他因素的支撑；简要以陈述，主要有以下几点：</p><ul><li><strong>带盐布道</strong>；如前文所言，她的起源是，为了提供一个可控的「开放平台」，为想了解更多优质讯息的人，提供方便；同时，为产出优质作品，提供一个便捷、可靠的推广之门。</li><li><strong>修炼技艺</strong>；<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>，前端以 <code>Es6</code>、<code>Vue.js</code>为主，为方便开发，有引用 <code>Element-ui</code>；后台则依靠<code>Node.js</code>、<code>Koa2</code>，数据库选取的是 <code>MongoDb</code>，服务器部署基于 <code>Nginx</code>、<code>Pm2</code>等；坦白说，即便到现在，都仍就处于边学边做的过程；技艺的提升，和「倾城之链」越来越好，是一脉相承的；两者之间，皆不会局限于目前所知所学；后期不乏会尝试用人工智能，来完善她；这将会专门写一篇以作详述。</li><li><strong>创造挑战</strong>；<a href="https://blog.lovejade.cn/2016/02/14/inspirational-words.html" target="_blank" rel="noopener">在一个人的日子里，你要做的只有一件事，把自己变的更优秀</a>；所以在闲暇之余，总该去创造些挑战，从而让自己变得更好、更强、更有趣；在独立完成这项作品之时，涉及知识层面还是颇为广泛的；从想法诞生开始，你需要独立去完成整体策划、网站设计、前后端编码与测试、服务部署&amp;运维(步骤A)，额外还要优化访问体验、视觉设计、网站安全(步骤B)；之余还要去收集反馈、推广、运营等等(步骤C)；然后，很长时间内要在步骤B、C中循环往复……这中间，对人的耐心和知识广度，都有不小的考究和考验。</li><li><strong>追逐名利</strong>；两千余年以前，司马迁先生在《货殖列传》就谈到：“天下熙熙，皆为利来；天下攘攘，皆为利往”。对于这一点，倒没什么好避讳的；虽非君子，也不自诩所谓好人，但向来认为，名利之事，当“取之有道”；因此，即便在作品之上，打些广告，也是挑选极为认可的，且保证以不影响访问体验为前提。</li></ul><h2 id="「倾城之链」可以为您带来什么？"><a href="#「倾城之链」可以为您带来什么？" class="headerlink" title="「倾城之链」可以为您带来什么？"></a><strong>「倾城之链」可以为您带来什么？</strong></h2><p>出于不知何来的一种「强迫症」，向来对所写的文字，抑或推荐的事物，都希望对于接收到人，能产生积极的影响；此番作品，在策划之初，对要赋予她的使命，就已然构思好；在之前或者以后的设计当中，将始终秉承这初心，力争使她变得更有价值，且保持简单便捷。那么「倾城之链」可以为您带来什么？可从以下几个方面作为阐述。</p><h3 id="探索更广阔的世界，为您"><a href="#探索更广阔的世界，为您" class="headerlink" title="探索更广阔的世界，为您"></a><strong>探索更广阔的世界，为您</strong></h3><p>在这个信息化的世界，海量的讯息可能让您不知所措；担心错过她而努力汲取的同时，却可能错过更多；<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>的存在，即是为您解决这种困扰。这里将讯息主分为四类，分别是<a href="https://nicelinks.site/explore/skill" target="_blank" rel="noopener">技术客栈</a>，<a href="https://nicelinks.site/explore/resource" target="_blank" rel="noopener">资源之家</a>，<a href="https://nicelinks.site/explore/life" target="_blank" rel="noopener">写意人生</a>，<a href="https://nicelinks.site/explore/info" target="_blank" rel="noopener">信息快讯</a>；每个网站将设有一个主题，且配备最多三个相关标签；借此以对信息分门别类，从而更好去索引。</p><p>举例说明，如若您对「优质美图」感兴趣，那么您可以去<a href="https://nicelinks.site/collections/theme" target="_blank" rel="noopener">「倾城主题」</a>中找寻<a href="https://nicelinks.site/theme/picture" target="_blank" rel="noopener">美图</a>；亦可以到<a href="https://nicelinks.site/collections/tags" target="_blank" rel="noopener">「倾城标签」</a>索引<a href="https://nicelinks.site/tags/美图" target="_blank" rel="noopener">美图</a>。当然，配备智能搜索，已列于计划之中，后续将持续迭代开发，以进一步优化使用体验。</p><p>在这里，您可以浏览全球各类智慧的结晶(PS：有待您的注入与帮助)；丰富视野的同时，可以标注您喜欢的站点，从而增加其热度排名，为更多挖掘讯息的人提供建设性参考；当然，如果您乐意，也可以将其轻松分享至各个不同平台。</p><h3 id="推广，为您所看中的网站"><a href="#推广，为您所看中的网站" class="headerlink" title="推广，为您所看中的网站"></a><strong>推广，为您所看中的网站</strong></h3><p>此功能，即是“故事的起源”；<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>鼓励您，自荐或者推荐优秀网站；这里只是呈现所荐的标题和功能性描述，点击即为其打开该链接地址，并不抓取网站内容，以成聚合，故不会对该网站形成竞争关系。推荐至此，可以预见的结果是：将是获得更多一些访问量。出于 SEO(搜索引擎优化) 方面考量呢，也无需忧虑；有志将<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>打造为一个优质 Web 应用；如是，对所收录的网站而言，则将是多一个「优质外链」，那么 SEO 也将产生积极影响，何乐不为？</p><p>额外需要声明的是，<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>对于收录目标，是有所考量的；首先得是一个网站(即主域名地址，二级域名亦可)，而非某网站麾下某个具体链接；这一点将不做妥协，毕竟这里所推崇鼓励的，是造就更多品牌级产物，而不是依附于某些品牌的子集；举例说明：</p><blockquote><p><code>https://domainname.com/</code>  <span style="color:green">💯✔</span>️<br><code>https://nice.domainname.com/</code>  <span style="color:green">☂✔</span>️<br><code>https://domainname.com/niceuser</code>  <span style="color:red">✘</span>️️</p></blockquote><p>在此之上，还须得有着「优质内容」，在保证原创基础之上，能给人以有用或有趣，如增长见闻、提供便利、赏心悦目，凡此种种，皆无不可；再有就是一些网站本身应有的品质，譬如：排版简洁，画风耐看，访问安全，启动快速，适配良好，凡此等等，不一而足。</p><h2 id="写在文章最后"><a href="#写在文章最后" class="headerlink" title="写在文章最后"></a><strong>写在文章最后</strong></h2><p>遥想当年，路遥先生在开始写《平凡的世界》这部巨作之时，即便已准备三年之久，然而下笔开头的时候，却依然经历了巨大的磨难；最终：先生从高烧似的激烈一直走到满头热汗变为冰凉，冰凉的汗水使燃烧的思索冷静了下来，然后平静的坐下来，顺利的开始。先生在最后的杂文<a href="https://blog.lovejade.cn/2016/02/26/the-morning-started-at-noon-1.html" target="_blank" rel="noopener">《早晨从中午开始》</a>中有提及：“记着列夫·托尔斯泰的话，艺术的打击力量应该放在后面。这应该是一个原则”。所以，在此文中的开头，引用先生的那段经典，一来作为缅怀，同时，也希冀借着这股榜样的力量，能够贯穿行事之始终；在此文之寄望，就是一步一步，慢慢循环渐进，将<a href="https://nicelinks.site" target="_blank" rel="noopener">「倾城之链」</a>打磨成一款经典而有其用的作品。</p><p>@2017-12-30 于深圳.南山 Last Modify： 2018-01-01</p><hr><h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul><li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/">晚晴幽草说之-前端札记</a></li><li><a href="https://jeffjade.com/2017/10/14/131-some-filth-such-as-jianshu/">劾『简书』之蛮横无道</a></li><li><a href="https://jeffjade.com/2017/02/05/119-wanqingyoucaoshuo-/">《晚晴幽草说－序》</a></li><li><a href="https://jeffjade.com/2017/09/29/128-talking-about-movies-or-life/">晚晴幽草说之 — 谈用心</a></li><li><a href="https://jeffjade.com/2016/03/23/2016-03-23-toss-wechat-public_no/">微信公众号：静晴轩</a></li><li><a href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/">疆来有你，从心出发</a></li><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      从故事起源，网站命名，以及所带来的价值等几个方面，来陈述“倾城之链”这项作品。
    
    </summary>
    
      <category term="Share" scheme="https://jeffjade.com/categories/Share/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
      <category term="Tools" scheme="https://jeffjade.com/tags/Tools/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
      <category term="Nice" scheme="https://jeffjade.com/tags/Nice/"/>
    
  </entry>
  
  <entry>
    <title>Npm vs Yarn 之备忘详单</title>
    <link href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/"/>
    <id>https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/</id>
    <published>2017-12-30T13:21:00.000Z</published>
    <updated>2018-02-07T14:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>有则笑话，如此讲到：“老丈人爱吃核桃，昨天买了二斤陪妻子送去，老丈人年轻时练过武，用手一拍核桃就碎了，笑着对我说：你还用锤子，你看我用手就成。我嘴一抽，来了句：人和动物最大的区别就是人会使用工具。……”。撇开这样特例场景，这句话还是非常用有道理的；毕竟从远古石器时期或更早，到如今，所言之语，所穿之衣，代步之车，所学的知识，所晓的常识…..皆是工具；可以说绝大部分人之间的差异(天才级除外)，仅在于工具使用之优劣罢了。在工具的使用中，很多人极大程度上停留于会用层面，如若不遇到问题，几乎就处于停滞；这本身倒也没有问题，但可能因为没有透彻的了解，而错失了对该物可以拥有的想象力，从而错过了许多本该有的美好，如此的可惜。</p><a id="more"></a><p>坦白说，在从事前端方面工作，蛮长一段时间内，就因缺乏对 Npm 有足够的认知，使得后来对其诸多讯息，颇感「相见恨晚」；在本篇中，将客观陈述 Npm 与 Yarn 的各自功用，以此显出两者间的差异；同时，以比较的形式，列出「常用命令清单」，以方便使用之时，作为参考(将陆续更新以完善)；同时也欲借此，再次倡导那经典名言：<strong>「工欲善其事，必先利其器」</strong>，与诸君共勉。</p><p><img src="https://image.nicelinks.site/npm-vs-yarn.png" alt="NPM vs Yarn"></p><h2 id="什么是-Npm，Yarn"><a href="#什么是-Npm，Yarn" class="headerlink" title="什么是 Npm，Yarn"></a><strong>什么是 Npm，Yarn</strong></h2><h3 id="什么是-npm？"><a href="#什么是-npm？" class="headerlink" title="什么是 npm？"></a><strong>什么是 npm？</strong></h3><p><code>npm</code> 即：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm package manager </a>，是一种重用其他开发人员的代码的方法，也是一种与他人共享代码的方式，并且可以很容易地管理不同版本的代码。<code>npm</code> 开始作为 Node 包管理器，所以你会发现很多模块可以在服务器端使用。也有很多的包添加命令供您在命令行中使用。你还会发现可以在前端使用的软件包。</p><p><code>npm</code> 由三个不同的部分组成：网站，注册表和 CLI 。该网站是用户发现软件包的主要工具，注册表是一个关于软件包信息的大型数据库，而 CLI 则是开发者如何在注册表上发布他们的软件包或下载他们希望安装的软件包。更多详细内容，可参见 <a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="noopener">what-is-npm</a>。</p><h3 id="什么是-yarn？"><a href="#什么是-yarn？" class="headerlink" title="什么是 yarn？"></a><strong>什么是 yarn？</strong></h3><blockquote><p><code>Yarn</code> 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码，或者分享自己的代码。 Yarn 做这些快捷、安全、可靠，所以你不用担心什么。通过 <code>Yarn</code>，你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。 使用过程中遇到问题，你可以将其上报或者贡献解决方案。一旦问题被修复，Yarn会更新保持同步。</p></blockquote><p><code>Yarn</code> 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。它并没有试图完全取代 npm。Yarn 同样是一个从 npm 注册源获取模块的新的 CLI 客户端。注册的方式不会有任何变化 —— 你同样可以正常获取与发布包。它存在的目的是解决团队在使用 <code>npm</code> 面临的少数问题。当然，在 <code>Node</code> 版本断更替中，Npm 本身也在积极更新。</p><h2 id="关于安装-更新"><a href="#关于安装-更新" class="headerlink" title="关于安装/更新"></a><strong>关于安装/更新</strong></h2><h3 id="如何安装-更新-Npm"><a href="#如何安装-更新-Npm" class="headerlink" title="如何安装/更新 Npm"></a><strong>如何安装/更新 Npm</strong></h3><h4 id="如何安装-Npm"><a href="#如何安装-Npm" class="headerlink" title="如何安装 Npm"></a><strong>如何安装 Npm</strong></h4><p><code>npm</code> 开始作为 Node 包管理器，所以它的安装是跟 Node.js 捆绑在一起的。至于如何安装 Node.js, Npm 官方，在 <a href="https://docs.npmjs.com/getting-started/installing-node" target="_blank" rel="noopener">Installing Node.js and updating npm</a> 做了阐述。之前在不同平台尝试更新 Node.js 之时，也是遇到过各种问题，有在 <a href="http://www.jianshu.com/p/019b10b948b6" target="_blank" rel="noopener">NodeJs 升级/安装折腾记</a> 一文做了记载；折腾许久，得出的结论跟官网一致：</p><blockquote><p>如果您使用的是OS X或Windows，安装Node.js的最佳方法是：使用 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js下载页面</a>中的一个安装程序。(笔者微注：如是我中国大陆用户，去<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a>下载，会是快速的法子)。</p></blockquote><h4 id="如何更新-Npm"><a href="#如何更新-Npm" class="headerlink" title="如何更新 Npm"></a><strong>如何更新 Npm</strong></h4><ol><li>npm install npm@latest -g （npm install npm -g）</li><li>更新(重新下载) Node.js</li></ol><h4 id="如何安装-Yarn"><a href="#如何安装-Yarn" class="headerlink" title="如何安装 Yarn"></a><strong>如何安装 Yarn</strong></h4><p>对于如何安装 <code>Yarn</code>，Yarn 官方给出了很全面的说明，详见 <a href="https://yarnpkg.com/zh-Hans/docs/install" target="_blank" rel="noopener">Install Yarn</a>；涵盖 MacOs，Windows，Linux 等平台，并且还给出一些备用安装方式，譬如通过 <code>npm</code> 来安装：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --<span class="built_in">global</span> yarn</span><br></pre></td></tr></table></figure><p>当然，<code>Yarn</code> 官方在 <a href="https://yarnpkg.com/zh-Hans/docs/install#alternatives-tab" target="_blank" rel="noopener">Yarn 备选安装方式</a>有明确讲道：</p><blockquote><p>一般来说, 不推荐通过 <code>npm</code> 安装 <code>Yarn</code>，在用基于 Node 的包管理器安装 Yarn 时，该包未被签名， 并且只通过基本的 <code>SHA1</code> 散列进行唯一完整性检查。这在安装系统级应用时有安全风险。因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。</p></blockquote><p>但在实际使用中，这倒是最为方便的方式之一，迄今倒也没遇到什么问题；当然，最好按照官方推荐的方式；如果你使用并熟悉 Mac 操作系统，用推荐方式安装 Yarn 也是很简单：<code>brew install yarn</code>(笔者注)。</p><h3 id="如何更新-Yarn"><a href="#如何更新-Yarn" class="headerlink" title="如何更新 Yarn"></a><strong>如何更新 Yarn</strong></h3><p>对于如何更新 Yarn，可以结合安装时候对应命令；如果是 Mac 操作系统，使用 <code>brew</code> 安装，那么如此操作予以更新：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew<span class="built_in"> upgrade </span>yarn</span><br></pre></td></tr></table></figure></p><p>如果 <code>Yarn</code> 通过 Debian / Ubuntu 包安装，则可以运行如下命令予以更新：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update &amp;&amp; sudo apt-<span class="builtin-name">get</span> install yarn</span><br></pre></td></tr></table></figure><p>也可以使用 <code>yarn</code> 本身来更新自己：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">yarn</span> <span class="meta">global</span> <span class="keyword">add </span>yarn</span><br></pre></td></tr></table></figure></p><p>如果有意了解更多如何更新 <code>yarn</code> 的方法，可参见：<a href="https://github.com/yarnpkg/yarn/issues/1139" target="_blank" rel="noopener">yarn self-update should update using the same installation method originally used</a>。</p><h2 id="npm-与-yarn-常用命令对比"><a href="#npm-与-yarn-常用命令对比" class="headerlink" title="npm 与 yarn 常用命令对比"></a><strong>npm 与 yarn 常用命令对比</strong></h2><h3 id="有所区别的命令"><a href="#有所区别的命令" class="headerlink" title="有所区别的命令"></a><strong>有所区别的命令</strong></h3><table><thead><tr><th style="text-align:left">Npm</th><th style="text-align:left">Yarn</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">npm install(npm i)</td><td style="text-align:left">yarn install(yarn)</td><td style="text-align:left">根据 package.json 安装所有依赖</td></tr><tr><td style="text-align:left">npm i –save [package]</td><td style="text-align:left">yarn add [package]</td><td style="text-align:left">添加依赖包</td></tr><tr><td style="text-align:left">npm i –save-dev [package]</td><td style="text-align:left">yarn add [package] –dev</td><td style="text-align:left">添加依赖包至 devDependencies</td></tr><tr><td style="text-align:left">npm i -g [package]</td><td style="text-align:left">yarn global add [package]</td><td style="text-align:left">进行全局安装依赖包</td></tr><tr><td style="text-align:left">npm update –save</td><td style="text-align:left">yarn upgrade [package]</td><td style="text-align:left">升级依赖包</td></tr><tr><td style="text-align:left">npm uninstall [package]</td><td style="text-align:left">yarn remove [package]</td><td style="text-align:left">移除依赖包</td></tr></tbody></table><h3 id="相同操作的命令"><a href="#相同操作的命令" class="headerlink" title="相同操作的命令"></a><strong>相同操作的命令</strong></h3><table><thead><tr><th style="text-align:left">Npm</th><th style="text-align:left">Yarn</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">npm run</td><td style="text-align:left">yarn run</td><td style="text-align:left">运行 package.json 中预定义的脚本</td></tr><tr><td style="text-align:left">npm config list</td><td style="text-align:left">yarn config list</td><td style="text-align:left">查看配置信息</td></tr><tr><td style="text-align:left">npm config set registry 仓库地址</td><td style="text-align:left">yarn config set registry 仓库地址</td><td style="text-align:left">更换仓库地址</td></tr><tr><td style="text-align:left">npm init</td><td style="text-align:left">yarn init</td><td style="text-align:left">互动式创建/更新 package.json 文件</td></tr><tr><td style="text-align:left">npm list</td><td style="text-align:left">yarn list</td><td style="text-align:left">查看当前目录下已安装的node包</td></tr><tr><td style="text-align:left">npm login</td><td style="text-align:left">yarn login</td><td style="text-align:left">保存你的用户名、邮箱</td></tr><tr><td style="text-align:left">npm logout</td><td style="text-align:left">yarn logout</td><td style="text-align:left">删除你的用户名、邮箱</td></tr><tr><td style="text-align:left">npm outdated</td><td style="text-align:left">yarn outdated</td><td style="text-align:left">检查过时的依赖包</td></tr><tr><td style="text-align:left">npm link</td><td style="text-align:left">yarn link</td><td style="text-align:left">开发时链接依赖包，以便在其他项目中使用</td></tr><tr><td style="text-align:left">npm unlink</td><td style="text-align:left">yarn unlink</td><td style="text-align:left">取消链接依赖包</td></tr><tr><td style="text-align:left">npm publish</td><td style="text-align:left">yarn publish</td><td style="text-align:left">将包发布到 npm</td></tr><tr><td style="text-align:left">npm test</td><td style="text-align:left">yarn test</td><td style="text-align:left">测试 = yarn run test</td></tr><tr><td style="text-align:left">npm bin</td><td style="text-align:left">yarn bin</td><td style="text-align:left">显示 bin 文件所在的安装目录</td></tr><tr><td style="text-align:left">yarn info <package></package></td><td style="text-align:left">yarn info <package></package></td><td style="text-align:left">显示一个包的信息</td></tr></tbody></table><p>对于以上还须对于，还须做如下补充性说明：</p><ul><li>在 npm 中，可以使用 npm config set save true 设置 —-save 为默认行为，但这对多数开发者而言，并非显而易见的。而使用 yarn，在package.json 中添加（add）和移除（remove）等行为是默认的。</li><li>对于要添加或升级的包，npm 与 yarn 都可以指定具体的版本，或者 Tag；如：<blockquote><p>yarn add [package]@[version]<br>yarn add [package]@[tag]</p></blockquote></li><li><p>在国内，使用 npm，最好还是替换成淘宝的镜像，如此网络影响减小到最低，这样安装依赖包的速度，可以得到蛮大的改善：</p><blockquote><p>npm config set registry <a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a><br>yarn config set registry <a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></p></blockquote><p>  当然也可以设置别名 <code>cnpm</code>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=http://registry.cnpmjs.org --cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Npm-独有的命令"><a href="#Npm-独有的命令" class="headerlink" title="Npm 独有的命令"></a><strong>Npm 独有的命令</strong></h3><ul><li><a href="https://docs.npmjs.com/cli/rebuild" target="_blank" rel="noopener">npm rebuild pacakgename</a>: 用于更改包内容后进行重建；比如常见的 <code>npm rebuild node-sass</code>；当使用 Sass（Scss） 来作样式表预处理器，再打包的时候，你可能会遇见如下错误；而解决此问题，最为简单的方式即使用 <code>rebuild</code> 命令，对 <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noopener">node-sass</a> 进行重建即可。</li></ul><blockquote><p><span style="color: red">Module build failed: ModuleBuildError: Module build failed: Error: Node Sass does not yet support your current environment: <br>This usually happens because your environment has changed since running npm install. Run npm rebuild node-sass to build the binding for your current environment.</span></p></blockquote><h3 id="Yarn-独有的命令"><a href="#Yarn-独有的命令" class="headerlink" title="Yarn 独有的命令"></a><strong>Yarn 独有的命令</strong></h3><ul><li><a href="https://yarnpkg.com/zh-Hans/docs/cli/import" target="_blank" rel="noopener">yarn import</a>：依据原npm安装后的<code>node_modules</code>目录生成一份<code>yarn.lock</code>文件；</li><li><a href="https://yarnpkg.com/zh-Hans/docs/cli/licenses" target="_blank" rel="noopener">yarn licenses</a>：列出已安装包的许可证信息；</li><li><a href="https://yarnpkg.com/zh-Hans/docs/cli/pack" target="_blank" rel="noopener">yarn pack</a>：创建一个压缩的包依赖 gzip 档案；</li><li><a href="https://yarnpkg.com/zh-Hans/docs/cli/why" target="_blank" rel="noopener">yarn why</a>：显示有关一个包为何被安装的信息。</li><li><a href="https://yarnpkg.com/zh-Hans/docs/cli/autoclean" target="_blank" rel="noopener">yarn autoclean</a>：从包依赖里清除并移除不需要的文件。</li><li>……</li></ul><h2 id="npm-使用之额外技巧"><a href="#npm-使用之额外技巧" class="headerlink" title="npm 使用之额外技巧"></a><strong>npm 使用之额外技巧</strong></h2><h3 id="如何寻找适宜的-npm-包"><a href="#如何寻找适宜的-npm-包" class="headerlink" title="如何寻找适宜的 npm 包"></a><strong>如何寻找适宜的 npm 包</strong></h3><p>找到合适的软件包可能相当具有挑战性 ——，毕竟有成千上万个模块供你选择。<a href="https://npms.io/" target="_blank" rel="noopener">https://npms.io/</a> ，这个网站的存在，让这项任务轻松很多；它显示了<strong>质量</strong>，<strong>受欢迎程度</strong>和<strong>维护</strong>等指标。这些计算是基于模块是否具有过时的依赖关系，是否配置了linters，是否包含测试或是否进行了最近的提交。</p><h3 id="执行-npm-包的二进制文件"><a href="#执行-npm-包的二进制文件" class="headerlink" title="执行 npm 包的二进制文件"></a><strong>执行 npm 包的二进制文件</strong></h3><p>显而易见，经由 <code>npm</code> 或是 <code>yarn</code> 安装，并被放置在 <code>./node_modules</code> 目录中的包，其二进制可执行文件可访问 <code>./node_modules/.bin</code>，那么该如何从项目根目录中调用它呢？以下提供了几种方式，你可以从中任意选择一种，来达到你的目的：</p><p>为了方便举例，这里以运行 <a href="https://github.com/nicejade/responsive-email-template" target="_blank" rel="noopener">responsive-email-template</a>（制作更好的响应式邮件模板）作为示例来作说明；其中有用到 <a href="https://github.com/mjmlio/mjml" target="_blank" rel="noopener">mjml</a> 这个库；此库被推荐的方式是在本地安装和使用；所以，要运行对应命令，你可以操作她，使用以下办法：</p><ul><li><strong>古老而原始的办法</strong></li></ul><p>在你安装 MJML 的文件夹中，你现在可以运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/node_modules/</span>.bin<span class="regexp">/mjml --watch src/i</span>ndex.mjml -o dist<span class="regexp">/index.html</span></span><br></pre></td></tr></table></figure><ul><li><strong>将 <code>./node_modules/.bin/</code> 添加至环境变量</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:./node_modules/.bin"</span></span><br><span class="line">mjml --watch src/index.mjml -o dist/index.html</span><br></pre></td></tr></table></figure><ul><li><strong>或者使用快捷键 <code>npm bin</code></strong></li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(npm bin)/mjml --watch src/<span class="keyword">index</span>.mjml -o dist/<span class="keyword">index</span>.html</span><br></pre></td></tr></table></figure><ul><li><strong>或者利用 npm 脚本命令</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将命令配置在 package.json 文件，使用 scripts 字段定义脚本命令</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"mjml"</span>: <span class="string">"mjml --watch src/index.mjml -o dist/index.html"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用之时，只需运行如下命令即可：</span></span><br><span class="line">npm <span class="built_in">run</span> mjml</span><br></pre></td></tr></table></figure><ul><li><strong>或者通过使用 <a href="https://github.com/zkat/npx" target="_blank" rel="noopener">npx</a></strong></li></ul><blockquote><p>注意：<a href="https://github.com/zkat/npx" target="_blank" rel="noopener">npx</a> 包含在 <code>npm &gt; v5.2</code>，或可以分开安装。</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># npm install -g npx</span></span><br><span class="line">npx mjml --watch src/<span class="keyword">index</span>.mjml -o dist/<span class="keyword">index</span>.html</span><br></pre></td></tr></table></figure><h3 id="如何管理-Node-版本"><a href="#如何管理-Node-版本" class="headerlink" title="如何管理 Node 版本"></a><strong>如何管理 Node 版本</strong></h3><p>众所周知，Node 版本的迭代速度很快，且开发者也比较能及时使用新版本开发；但，对于维护早期的项目，切换 node 版本就成了一个问题；幸好的是，已经有了比较成熟的几个方案；比如盛名遐迩的 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 以及 @tj 大神的 <a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a>；相比之下，<code>n</code> 使用与安装都会更简单，这也完全是作者理念的呈现；其区别主要是：</p><ul><li><code>n</code> 是须要基于 <code>node</code> 环境，它是全局安装的一个 npm 包；在安装之时，<code>n</code> 会先将指定版本的 node 存储下来，然后将其复制到我们熟知的路径 <em>/usr/local/bin</em>，非常简单明了。当然由于 <code>n</code> 会操作到非用户目录，所以需要加 sudo 来执行命令；</li><li><code>nvm</code> 是一个独立软件包：在安装之时，<code>nvm</code> 将不同的 node 版本存储到 <em>~/.nvm/<version>/</version></em> 下，然后修改 <code>$PATH</code>，将指定版本的 node 路径加入，如此我们调用的 node 命令，即是所指定版本的 node；</li></ul><h3 id="如何探查-npm-包"><a href="#如何探查-npm-包" class="headerlink" title="如何探查 npm 包"></a><strong>如何探查 npm 包</strong></h3><p>一旦我们选择了我们的模块，我们应该看看文档，并检查开放的问题，以更好地了解我们将要在我们的应用程序中需要什么。不要忘记，您使用的 npm 包越多，存在易受攻击或恶意攻击的风险就越高。</p><p>如果你想从cli打开模块的主页，你可以这样做：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">home</span> axios</span><br></pre></td></tr></table></figure><p>要检查未决的问题或公开的路线图（如果有的话），你可以试试这个：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">npm</span> <span class="keyword">bugs </span>axios</span><br></pre></td></tr></table></figure><p>另外，如果你只是想检查模块的 git 仓库，请输入：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> repo axios</span><br></pre></td></tr></table></figure></p><h2 id="强大如斯，npm-脚本"><a href="#强大如斯，npm-脚本" class="headerlink" title="强大如斯，npm 脚本"></a>强大如斯，npm 脚本</h2><p>npm（Yarn 亦同）允许在 <code>package.json</code> 文件里面，使用 <code>scripts</code> 字段定义脚本命令。它支持通配符、<strong>变量</strong>、钩子、外部传参、支持并发 &amp; 异步执行等等；所以，完全可以借助 <code>npm script</code>，打造属于自己的高效工作流。鉴于篇幅，这部分就不在这里多做赘述，具体使用以及运行原理等，可以参见 @阮一峰 所写的文章：<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a>。</p><p>具体例子来说，有些时候会有需求要删除 Git 仓库所有提交历史，而保留代码为当前状态；而删除 <code>.git</code> 文件夹可能会导致您的 git 存储库中的问题；所以可以使用另一种更为安全的办法：详见<a href="https://jeffjade.com/2014/12/22/2014-12-22-gitmemo/如何删除 Git 仓库所有提交历史记录">如何删除 Git 仓库所有提交历史记录</a>。但这个操作一套打下来，不免劳神费力。那么借助 <code>npm script</code>，运行如下命令，一键搞定（当然命令可自行定义）；如果你有需求执行更多，也可以在后面追加更多操作。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"clean-commit"</span>: <span class="string">"git checkout --orphan latest_branch &amp;&amp; git add -A &amp;&amp; git commit -am '</span>clean past commit history 😊<span class="string">' &amp;&amp; git branch -D master &amp;&amp; git branch -m master &amp;&amp; git push -f origin master"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者也可以将其作下拆解，譬如像这样：</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"recommit"</span>: <span class="string">"git add -A &amp;&amp; git commit -am '</span>clean past commit history 😊<span class="string">'"</span>,</span><br><span class="line">  <span class="string">"repush"</span>: <span class="string">"git branch -D master &amp;&amp; git branch -m master &amp;&amp; git push -f origin master"</span>,</span><br><span class="line">  <span class="string">"clean-commit"</span>: <span class="string">"git checkout --orphan latest_branch &amp;&amp; npm run recommit &amp;&amp; repush"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-package-lock-json-和-yarn-lock"><a href="#关于-package-lock-json-和-yarn-lock" class="headerlink" title="关于 package-lock.json 和 yarn.lock"></a><strong>关于 package-lock.json 和 yarn.lock</strong></h2><h3 id="关于-yarn-lock"><a href="#关于-yarn-lock" class="headerlink" title="关于  yarn.lock"></a><strong>关于  yarn.lock</strong></h3><p>有时候一个项目周期很长，在不断开发的同时，而依赖的库也会有很大改变；有时候你可能只想运行 <code>npm i</code> 更新没有下载的插件，却不想偶尔会将依赖的一些其他插件更到最新，导致各种奇葩问题；<code>package-lock.json</code> 和 <code>yarn.lock</code> 就是为解决这种问题而设定的存在。</p><p>使用 <code>npm</code> 或者 <code>yarn</code>，都会有 <code>pacakge.json</code> 这个文件，用以标出自己项目对 各库包的依赖。举个例子来说，你的项目中有如下依赖：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"jade-package"</span>: <span class="string">"^2.3.4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其中的 <strong>^</strong> 是定义了向后(新)兼容依赖；在 <code>npm&lt;5.0</code> 以前，如果 <em>jade-package</em> 的版本超过<em>2.3.4</em>，并在大版本号（2）上相同，就允许下载最新版本的 <em>jade-package</em> 库包，例如实际上可能运行<code>npm i</code>时候，下载的具体版本可能是<em>2.5.8</em>。</p><p>多数情况下，这种向后兼容依赖下载最新库包，是没有问题的；然而，因为 <code>npm</code> 是开源世界，各库包的版本语义可能并不相同，不是所有开发者都能严格遵守这一原则：<strong>相同大版本号的同一个库包，其接口符合兼容要求</strong>。而且，不同的库包之间也存在其他依赖。理想状态下使用语义化版本发布补丁不会包含大的变化，但不幸的是这必非真理。npm 的这种策略，有可能导致两台拥有相同 <code>package.json</code> 文件的机子，实际上安装了不同版本的包，这可能导致一些错误。有时候，相同机器稍不留神的一个  <code>npm i</code>，就可能导致 <em>node_modules</em> 中安装的实际依赖被更新，也就可能导致项目运行呈现，被面目全非。</p><p><code>yarn.lock</code> 就是为解决此问题而衍生的存在；为了跨机器安装得到一致的结果，Yarn 需要比你配置在 package.json 中的依赖列表更多的信息。 Yarn 需要准确存储每个安装的依赖是哪个版本；它类似于 npm 的 npm-shrinkwrap.json，并且无副作用。只是需要注意的是：</p><blockquote><p><code>yarn.lock</code> 文件是自动产生的，而且应该完全被 <code>Yarn</code> 管理。 当你用 Yarn CLI 增加／升级／删除依赖，它将自动更新你的 <code>yarn.lock</code> 文件。 不要直接编辑这个文件，那样很容易弄坏某些东西。</p></blockquote><h3 id="关于-package-lock-json"><a href="#关于-package-lock-json" class="headerlink" title="关于 package-lock.json"></a><strong>关于 package-lock.json</strong></h3><p>当 <code>Node.js</code> 升级之 <strong>v8.0</strong> 以后，自带的 npm 也升级到了5.0；带来速度上很大提升之外，也带来了其他很大变大；这其中就包括 <code>package-lock.json</code>：安装模块操作（改变 node_modules 文件夹内容）会生成或更新 <strong>package-lock.json</strong> 文件；<code>package-lock.json</code> 之于 <strong>npm</strong>，即是<code>yarn.lcok</code> 之于 <strong>yarn</strong> 的翻版；更多信息可参见 <a href="https://docs.npmjs.com/files/package-lock.json" target="_blank" rel="noopener">npm package-lock.json</a>。</p><p>另外，值得一提的是，在 Github 上有人专门提供了 <a href="https://github.com/imsnif/synp" target="_blank" rel="noopener">Synp</a> 工具，用以：将yarn.lock转换为package-lock.json，反之亦然（Convert yarn.lock to package-lock.json and vice versa）。</p><h2 id="写在文章的最后"><a href="#写在文章的最后" class="headerlink" title="写在文章的最后"></a><strong>写在文章的最后</strong></h2><p>相比 Npm 的默认配置，Yarn 获赞颇多。用其可以方便生成锁文件，安装依赖非常迅速，且会自动添加进 package.json，同时安装与使用 Yarn 的成本也极小，这使得 Yarn 可以完美替代 npm。yarn 之于 npm，有点像当年的 io.js 和 node.js，殊途同归，都是为了进一步解放和优善生产力；如今，在 Yarn 的影响下，npm 本身也改善不少(version &gt;= 5.0)。最后要说的是，不管用何种工具，全面了解其全貌，知其优晓其劣，方能更好驾驭它，使之为自己高效、快意的生活增姿添色。</p><p>@2017-12-30 于深圳.南山 Last Modify： 2018-01-02</p><hr><h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul><li><a href="http://www.jeffjade.com/2015/10/19/2015-10-18-chrome-vimium/" target="_blank" rel="noopener">Vimium~让您的Chrome起飞</a></li><li><a href="http://www.jeffjade.com/2016/03/17/2016-03-17-jade-tools/" target="_blank" rel="noopener">那些所倚靠的利器记载</a></li><li><a href="http://www.jeffjade.com/2016/03/11/2016-03-11-autohotkey/#" target="_blank" rel="noopener">Win下最爱效率神器:AutoHotKey</a></li><li><a href="http://www.jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="noopener">Win下必备神器之Cmder</a></li><li><a href="http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/" target="_blank" rel="noopener">新编码神器Atom使用纪要</a></li><li><a href="http://www.cnblogs.com/jadeboy/p/4165449.html" target="_blank" rel="noopener">sublime text 下的Markdown写作</a></li><li><a href="http://www.jeffjade.com/2015/08/28/2015-08-28-Write-Morkdown/" target="_blank" rel="noopener">SublimeText下写作利器之MarkdownEditing</a></li><li><a href="http://www.jeffjade.com/2015/07/29/2015-07-29-mac-musthave-software/" target="_blank" rel="noopener">Mac必备软件渐集之ZSH－终极Shell</a></li></ul>]]></content>
    
    <summary type="html">
    
      客观陈述 Npm 与 Yarn 的各自功用，以此显出两者间的差异；同时，以比较的形式，列出常用命令清单，以方便使用之时，作为参考；
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="https://jeffjade.com/tags/JavaScript/"/>
    
      <category term="Npm" scheme="https://jeffjade.com/tags/Npm/"/>
    
      <category term="Yarn" scheme="https://jeffjade.com/tags/Yarn/"/>
    
  </entry>
  
  <entry>
    <title>大前端神器安利之 Puppeteer</title>
    <link href="https://jeffjade.com/2017/12/17/134-kinds-of-toss-using-puppeteer/"/>
    <id>https://jeffjade.com/2017/12/17/134-kinds-of-toss-using-puppeteer/</id>
    <published>2017-12-17T03:30:00.000Z</published>
    <updated>2017-12-17T15:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">Puppeteer</a>(中文翻译”木偶”) 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具，它是一个 <code>Node</code> 库，提供了一个高级的 API 来控制 <a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener">DevTools协议上的无头版</a> Chrome 。也可以配置为使用完整（非无头）的 Chrome。<code>Chrome</code> 素来在浏览器界稳执牛耳，因此，Chrome Headless 必将成为 web 应用<strong>自动化测试</strong>的行业标杆。使用 <code>Puppeteer</code>，相当于同时具有 Linux 和 Chrome 双端的操作能力，应用场景可谓非常之多。此仓库的建立，即是尝试各种折腾使用 GoogleChrome Puppeteer；以期在好玩的同时，学到更多有意思的操作。</p><a id="more"></a><p><img src="https://image.nicelinks.site/%E6%98%9F%E7%A9%BA.jpg" alt="大前端神器安利之 Puppeteer"></p><h2 id="Puppeteer-能做些什么"><a href="#Puppeteer-能做些什么" class="headerlink" title="Puppeteer 能做些什么"></a><strong>Puppeteer 能做些什么</strong></h2><p>你可以在浏览器中手动完成的大部分事情都可以使用 <code>Puppeteer</code> 完成！你可以从以下几个示例开始：</p><ul><li>生成页面的截图和PDF。</li><li>抓取SPA并生成预先呈现的内容（即“SSR”）。</li><li>从网站抓取你需要的内容。</li><li>自动表单提交，UI测试，键盘输入等</li><li>创建一个最新的自动化测试环境。使用最新的JavaScript和浏览器功能，直接在最新版本的Chrome中运行测试。</li><li>捕获您的网站的时间线跟踪，以帮助诊断性能问题。</li></ul><hr><h2 id="Puppeteer-轻松入门"><a href="#Puppeteer-轻松入门" class="headerlink" title="Puppeteer 轻松入门"></a><strong>Puppeteer 轻松入门</strong></h2><p>想要在项目中使用 <code>Puppeteer</code>，只需要运行如下命令安装即可；不过要注意的是：<code>Puppeteer</code> 至少需要 Node v6.4.0，如要使用 <strong>async / await</strong>，只有 Node v7.6.0 或更高版本才支持；另外，安装 <code>Puppeteer</code> 时，它会下载最新版本的 <strong>Chromium</strong>（〜71Mb Mac，〜90Mb Linux，〜110Mb Win），保证与 API 协同工作。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="bash"> puppeteer</span></span><br><span class="line"><span class="bash"><span class="comment"># or "npm i puppeteer"</span></span></span><br></pre></td></tr></table></figure><p>对于如何使用 <code>Puppeteer</code>，这非常之容易；如下简易的示例，即实现了：导航到 <code>https://example.com</code> 并将截屏保存为 example.png；</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://example.com'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;path: <span class="string">'example.png'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>更多示例可参考 <a href="https://github.com/GoogleChrome/puppeteer#usage" target="_blank" rel="noopener">GoogleChrome Puppeteer Usage</a>；在略为熟悉 <a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="noopener">Puppeteer的 Api</a> 之后，即可用来她操纵浏览器，来为你做些你想搞的事儿；不过值得一提的是，她现在还处于开发阶段，随着版本的更替，Api 接口也有可能会跟着略有变动。<a href="https://github.com/nicejade/toss-puppeteer" target="_blank" rel="noopener">Toss Puppeteer</a>，这是在 Github 创建的一个仓库，以承载尝试使用 GoogleChrome Puppeteer 做的各种的折腾，具体如下：</p><hr><blockquote><p><strong>微注：</strong> 鉴于个人信息不便于提交，已设置 git 提交忽视私密配置文件；如要运行如下几个 Demo，需要手动在 <code>src/config</code> 目录下，创建 <em>secret.js</em>，格式如 <em>secretSample.js</em> 所示(🍀️)。</p></blockquote><h2 id="自动抓取指定网站文章分享至指定网站"><a href="#自动抓取指定网站文章分享至指定网站" class="headerlink" title="自动抓取指定网站文章分享至指定网站"></a><strong>自动抓取指定网站文章分享至指定网站</strong></h2><p>这番折腾，是基于 <code>Puppeteer</code> 抓取某网页链接（ 具体是在 <a href="https://jeffjade.com/categories/Front-End/">https://jeffjade.com/categories/Front-End/</a> 中随机出一篇），将其推送到<a href="http://blogread.cn/news/" target="_blank" rel="noopener">技术头条</a>；其目的在于：练习初步运用 <code>Puppeteer</code>。</p><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a><strong>运行命令</strong></h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicejade/toss-puppeteer</span><br><span class="line">npm i (更推荐 yarn)</span><br><span class="line">yarn run shareBlogToBlogread</span><br></pre></td></tr></table></figure><h3 id="步骤详述"><a href="#步骤详述" class="headerlink" title="步骤详述"></a><strong>步骤详述</strong></h3><ul><li>[X] 打开<a href="http://blogread.cn/news/submit.php" target="_blank" rel="noopener">技术头条-提交页面</a>，同时到 <a href="https://jeffjade.com/categories/Front-End/">晚晴幽草轩-Front-End</a> 随机抓取一篇文章，获取到标题、地址、描述。</li><li>[X] 模拟人为操作，点开“用微博登录”按钮(会跳转至微博登录页面)；</li><li>[X] 模拟人为操作，填充用户名和密码并“点击”登录按钮，完成登录(会重新跳转至<a href="http://blogread.cn/news/submit.php" target="_blank" rel="noopener">技术头条-提交页面</a>)；</li><li>[X] 模拟人为操作，填充之前获取到的标题、地址、描述，并“点击”提交，打完收工。</li><li>[ ] 将其部署于服务器，并设置任务，定时间隔性执行，完成自动按时分享。</li></ul><h3 id="提交🈯️定链接到指定网站"><a href="#提交🈯️定链接到指定网站" class="headerlink" title="提交🈯️定链接到指定网站"></a><strong>提交🈯️定链接到指定网站</strong></h3><p>处于某些分享需要，偶尔会涉及到这样的需求即：分享指定链接(Url)到指定网站；这个相比于如上功能，要省却些步骤。如果愿意折腾的话，还可以提交至多个不同的目标网站，只需增加设定目标地址，登录方式，以及提交表单的信息即可。当然，对于涉及到登录需要复杂的验证网站，额外需要多做些处理。这里只对<a href="http://blogread.cn/news/" target="_blank" rel="noopener">技术头条</a>做了配置，运行如下命令即可：(Update@17-12-17)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Url</span>=https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/ yarn <span class="builtin-name">run</span> shareUrlToTheSite</span><br><span class="line"><span class="attribute">url</span>=https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/ yarn <span class="builtin-name">run</span> shareUrlToTheSite</span><br></pre></td></tr></table></figure><h2 id="抓取指定网站页面并将其打印成-PDF"><a href="#抓取指定网站页面并将其打印成-PDF" class="headerlink" title="抓取指定网站页面并将其打印成 PDF"></a><strong>抓取指定网站页面并将其打印成 PDF</strong></h2><p>此番折腾，是基于 <code>Puppeteer</code> 抓取指定网站页面(示例是 <a href="https://jeffjade.com/">https://jeffjade.com/</a>  所有文章)，并将其打印成 PDF；其目的在于：进一步熟悉运用 <code>Puppeteer</code>。</p><h3 id="运行命令-1"><a href="#运行命令-1" class="headerlink" title="运行命令"></a><strong>运行命令</strong></h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicejade/toss-puppeteer</span><br><span class="line">npm i (更推荐 yarn)</span><br><span class="line">npm run printWebsiteToPDF</span><br></pre></td></tr></table></figure><h3 id="步骤详述-1"><a href="#步骤详述-1" class="headerlink" title="步骤详述"></a><strong>步骤详述</strong></h3><ul><li>[X] 打开 <a href="https://jeffjade.com/archives">https://jeffjade.com/archives</a> 页面，从而得到博客文章总分页总数；</li><li>[X] 运用 <code>axios</code> &amp; <code>cheerio</code> 抓取分页并分析，从而得到网站所有文章链接，并存储在数据中；</li><li>[X] 遍历所有链接（借助 <code>async</code> 控制并发），在页面渲染完成之后，将其打印成 PDF 并保存。</li></ul><p><img src="https://raw.githubusercontent.com/nicejade/toss-puppeteer/master/screenshot/jeffjade-pdf.png" alt="使用 Puppeteer 抓取指定网站页面并将其打印成 PDF"></p><h2 id="一键初始化-Gitment-评论系统"><a href="#一键初始化-Gitment-评论系统" class="headerlink" title="一键初始化 Gitment 评论系统"></a><strong>一键初始化 <code>Gitment</code> 评论系统</strong></h2><h3 id="背景说明-、"><a href="#背景说明-、" class="headerlink" title="背景说明 、"></a><strong>背景说明</strong> 、</h3><p>早前在 <a href="https://jeffjade.com/About/">About Me</a>有如此感叹道：</p><blockquote><p>嗟夫，真真是：独立的才是自己的。博客从最开始用<strong>多说</strong>，17年6月1日关闭服务后，转战<strong>网易云跟帖</strong>；未曾想它8月1日也跟着关闭了。索性转投靠至国外<strong>Disqus</strong>，奈何这堵墙厉害之极，家里虽也翻了墙，却仍不能很好访问；这才又转战至 <strong>Gitment</strong>；😂言多皆泪，感慨颇多啊——独立的才是自己的，之后得空时候，还是自己搞一套😪，Fighting。</p></blockquote><p>这提及的 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 是基于 GitHub Issues 的评论系统；它本身的一些特征，使得它存在很多优势，对于维护“程序”相关话题博客。所以，个人博客<a href="https://jeffjade.com">晚晴幽草轩</a>就采用此评论系统；但，它也会存在一些问题，譬如需要主动初始化评论,<a href="https://github.com/imsun/gitment#4-initialize-your-comments" target="_blank" rel="noopener">initialize-your-comments</a>，当然也可以运用些工具协助完成✅。对于已经写了 140+ 篇博文的<a href="https://jeffjade.com">晚晴幽草轩</a>，这实在很有必要；所以，这里谈及即，使用 <code>Puppeteer</code> 一键来初始化 <code>Gitment</code> 评论系统（需要注明的是，每个系统结构有所区别，这里只具有些参考性，却不能直接加以使用）。</p><h3 id="运行命令-2"><a href="#运行命令-2" class="headerlink" title="运行命令"></a><strong>运行命令</strong></h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicejade/toss-puppeteer</span><br><span class="line">npm i (更推荐 yarn)</span><br><span class="line">npm run initializeGitment</span><br></pre></td></tr></table></figure><h3 id="步骤详述-2"><a href="#步骤详述-2" class="headerlink" title="步骤详述"></a><strong>步骤详述</strong></h3><ul><li>[X] 打开 <a href="https://jeffjade.com/archives">https://jeffjade.com/archives</a> 页面，从而得到博客文章总分页总数；</li><li>[X] 运用 <code>axios</code> &amp; <code>cheerio</code> 抓取分页并分析，从而得到网站所有文章链接，并存储在数据中；</li><li>[X] 打开 Github 登录地址： <a href="https://github.com/login" target="_blank" rel="noopener">https://github.com/login</a> ，填充用户名、密码，从而完成登录；</li><li>[X] 遍历所存储链接，并在不同窗口打开（借助 <code>async</code> 控制并发）；</li><li>[X] 等待，直到初始化按钮显示后并点击（实际上需要先触发博客页面的 Github login 链接）；</li></ul><p><img src="https://raw.githubusercontent.com/nicejade/toss-puppeteer/master/screenshot/gitment01.png" alt="一键初始化 Gitment 评论系统"></p><p>寄存的博客评论，可在 <a href="https://github.com/nicejade/jadeblog-backups/issues" target="_blank" rel="noopener">jadeblog-backups#issues</a> 查看;(实际上，在使用 <code>Gitment</code> 之时，触发初始化按钮，并未能真正完成初始化，猜测这可能是插件本身的问题，或者别的，需要进一步探究）(Update@17-11-23)。</p><h2 id="用-Puppeteer-Trace-做性能分析"><a href="#用-Puppeteer-Trace-做性能分析" class="headerlink" title="用 Puppeteer Trace 做性能分析"></a><strong>用 <code>Puppeteer Trace</code> 做性能分析</strong></h2><p>可以使用 <code>tracing.start</code> 和 <code>tracing.stop</code> 创建一个可以在 Chrome 开发工具或时间线查看器中打开的跟踪文件(每个浏览器一次只能激活一个跟踪)，具体参见 <a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-tracing" target="_blank" rel="noopener">Puppeteer Trace Api</a>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await page<span class="selector-class">.tracing</span><span class="selector-class">.start</span>(&#123;path: <span class="string">'trace.json'</span>&#125;)</span><br><span class="line">await page.goto(<span class="string">'https://www.google.com'</span>)</span><br><span class="line">await page<span class="selector-class">.tracing</span><span class="selector-class">.stop</span>()</span><br></pre></td></tr></table></figure><h3 id="运行命令-3"><a href="#运行命令-3" class="headerlink" title="运行命令"></a><strong>运行命令</strong></h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicejade/toss-puppeteer</span><br><span class="line">npm i (更推荐 yarn)</span><br><span class="line">npm run performanceAnalysis</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/nicejade/toss-puppeteer/master/screenshot/blog-lovejade-cn-trace.jpg" alt="一键初始化 Gitment 评论系统"></p><p>对于 Chrome Performance／Timeline，如何使用，可以参见 <a href="https://developers.google.com/web/tools/chrome-devtools/?hl=zh-cn" target="_blank" rel="noopener">Chrome 开发者工具</a>，或者移步至 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/chrome-tutorial.md" target="_blank" rel="noopener">Chrome Tutorial</a>，这里有比较详尽的，不断补充修缮的参考资料。</p><hr><p>前面就有提及，使用 Puppeteer，相当于同时具有 Linux 和 Chrome 双端的操作能力，应用场景可谓非常之多；上面这些只是闲余时间写来玩儿的，而真正可以做的，会随着你的想象力扩散而增加；比如高级爬虫，实现前端监控诸此等等；对于前端监控这项，可以一提的是，完全可以借鉴 <a href="https://github.com/fouber/page-monitor" target="_blank" rel="noopener">capture webpage and diff the dom change with phantomjs ♨</a> 类似思想，结合 Puppeteer、MongoDB 等器具，实现一套前端页面前端监控，实现定期检查同时，还能辅助于测试，在这一点上可以比 Sentry 做的更多；个中实现，有待继续摸索实践。</p><p>额外需要补充说明的是，关于此文章的命名；无端由的加了一个“大”字；倒不完全是因为，“前端开发者”在相关行业，承担着越来越多的重要工作；而其本身也要不断学习、充实知识库；入围门槛的难度也在逐步增加；凡此等等，在<a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a>一文中，可见一斑；不幸的是，在同类相轻的鄙视链中，却总有些个别的“合作者”，在工作中只因角色分工的不同，而缺少对人应有尊重；虽然，个人倒不自定为前端开发者，遇到这种恶，总免不了惹起骨子里的侠义；可以言说的是：角色之设定高明与否，相关从业者本身可以自嘲，外人何由来的轻责与漫蔑？王小波先生在他的杂文<a href="https://blog.lovejade.cn/2017/12/17/关于格调.html" target="_blank" rel="noopener">关于格调</a>的最后有写到：“<strong>对于一件愚蠢的事，你只能唱唱反调</strong>”；“大”这一字，如此而已。</p><p>@2017-12-17 于深圳.南山 Last Modify： 2017-12-17</p>]]></content>
    
    <summary type="html">
    
      Puppeteer(中文翻译&quot;木偶&quot;) 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具，它是一个 Node 库，提供了一个高级的 API 来控制 DevTools协议上的无头版 Chrome 。也可以配置为使用完整（非无头）的 Chrome。Chrome 素来在浏览器界稳执牛耳，因此，Chrome Headless 必将成为 web 应用自动化测试的行业标杆。使用 Puppeteer，相当于同时具有 Linux 和 Chrome 双端的操作能力，应用场景可谓非常之多。此仓库的建立，即是尝试各种折腾使用 GoogleChrome Puppeteer；以期在好玩的同时，学到更多有意思的操作。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="https://jeffjade.com/tags/JavaScript/"/>
    
      <category term="Chrome" scheme="https://jeffjade.com/tags/Chrome/"/>
    
      <category term="Puppeteer" scheme="https://jeffjade.com/tags/Puppeteer/"/>
    
      <category term="Google" scheme="https://jeffjade.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>『优质』前端频道汇聚</title>
    <link href="https://jeffjade.com/2017/11/29/133-high-quality-front-end-channel/"/>
    <id>https://jeffjade.com/2017/11/29/133-high-quality-front-end-channel/</id>
    <published>2017-11-29T03:30:00.000Z</published>
    <updated>2017-12-10T15:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>在悠久历史长河中，用以承载对一个人崇敬的词汇有很多；但被尊以“某某下走狗”这般殊荣的，却寥寥无几；据我所知的，知名者有这么两位：一是：明代书画大家<code>徐渭</code> —— 据悉齐白石有一方印章，刻有“青藤门下走狗”，以表达对他(字文长，别号青藤)的崇敬之情；而另一位即是<code>王小波</code>，开始的出处已无从考证，不过这已经衍生为王小波粉丝的总称谓；豆瓣上有个<a href="https://www.douban.com/group/wang2/" target="_blank" rel="noopener">王小波门下走狗</a>小组，成员足有 95K+，对喜爱王小波先生的热情，可见一斑。不错，我也是其中一只。</p><a id="more"></a><h2 id="写在前言"><a href="#写在前言" class="headerlink" title="写在前言"></a><strong>写在前言</strong></h2><p><img src="https://image.nicelinks.site/happy-child-in-the-rainy.jpeg" alt="在尼泊尔的雨季中满身污泥依然很快乐的孩子，来自摄影师Renan Ozturk"></p><p>对<strong>王小波</strong>先生的喜爱，不仅是因为他写得一手好文章，充满智慧、性爱和有趣；也不仅是因为他敲得一手代码，文理兼通，自给自足；也不仅是因为他吟得一手好情话，真诚大胆，动人而不做作；更是因为，他那勇敢而正义的心灵、充满智慧与有趣的思维、以及追求自由的大无畏精神；更难能可贵的是，在他的妙笔之下，将道理融于故事，深刻动人，好如入木三分；却又能<code>灭其所耻</code>，不为听众所反感；真正意义上做到了“铁肩担道义”。每每读起他的小说或杂文，都有相同的感触：<strong>惊为天人</strong>。像他的那篇<a href="https://blog.lovejade.cn/2017/12/03/沉默的大多数.html" target="_blank" rel="noopener">《沉默的大多数》</a>以及<a href="https://blog.lovejade.cn/2017/12/03/思维的乐趣.html" target="_blank" rel="noopener">《思维的乐趣》</a>，就非常值得现在的社会人，多加品味。倘若他还活着，最近那让哭笑不得，“言不由衷”的<span style="background-color: black"><span style="color:red">红</span><span style="color:yellow">黄</span><span style="color:blue">蓝</span></span>事件，必会在他的妙笔之下，讨回一个公道；唉！</p><p>看如今很多人都已经涅槃为<strong>沉默的大多数</strong>，抑或是人云亦云的跟随者；于此，也只能叹一声：唉！但，那些对自己和社会肩负责任大多数人来讲，一个很有趣的问题是，在发表自己声音的时候，总会被淹没，或者被人为的埋没。于此，也是只能叹一声：唉！但，年轻如你我，难道不会对此感觉有些不妥么？如果有，那么从现在开始，是时候开始做点力所能及的工作了。</p><p>前段时间，读王小波先生的一篇杂文 —— <a href="https://blog.lovejade.cn/2017/11/18/域外杂谈-农场.html" target="_blank" rel="noopener">域外杂谈-农场</a>，讲的一个极为简单的故事，却令人大为感触，反复读之，感慨不已（如果你感兴趣，不妨也读一读，感受一下）；感慨之余，就立刻在一直维护的<a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/" target="_blank" rel="noopener">与时俱进版前端资源教程</a>，加了如下一则收录；取名为：<a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/front-end-channel.md" target="_blank" rel="noopener">前端频道</a>。个中所寄予的希望是：为前端开发者们提供些去处，在闲暇的日子，或学习时候，借此以增长见闻、扩充实力；更深层次的渴求是，希望作为同行的我们，能够在不断成长的历程中，也效法他人，不断修炼技术，提升个人价值，打造个人品牌；利己的同时，也帮助同行的其他人，共同进步；而且，当有一天，我们面临不公平待遇，又投诉无门之时，我们可以拥有一个自己的平台，替自己带盐，为自己发声（当然，多么的希望每个人都不会被遇到）。</p><hr><h2 id="前端频道之团队维护、聚合、订阅"><a href="#前端频道之团队维护、聚合、订阅" class="headerlink" title="前端频道之团队维护、聚合、订阅"></a><strong>前端频道之团队维护、聚合、订阅</strong></h2><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><ul><li><a href="http://isux.tencent.com" target="_blank" rel="noopener">腾讯 ISUX</a></li><li><a href="http://www.alloyteam.com/webdevelop/" target="_blank" rel="noopener">腾讯全端 AlloyTeam</a></li><li><a href="http://old.75team.com/weekly/" target="_blank" rel="noopener">奇舞周刊</a></li><li><a href="http://www.aliued.cn" target="_blank" rel="noopener">阿里巴巴 -U 一点</a></li><li><a href="http://taobaofed.org" target="_blank" rel="noopener">淘宝前端团队 (FED)</a></li><li><a href="http://feg.netease.com/" target="_blank" rel="noopener">网易 FEG 前端团队</a></li><li><a href="http://uedc.163.com/" target="_blank" rel="noopener">网易用户体验中心</a></li><li><a href="http://weekly.manong.io" target="_blank" rel="noopener">码农周刊</a></li><li><a href="https://aotu.io/" target="_blank" rel="noopener">凹凸实验室 ( 京东 )</a></li><li><a href="http://www.css88.com" target="_blank" rel="noopener">WEB 前端开发</a></li><li><a href="http://fex.baidu.com" target="_blank" rel="noopener">百度 WEB 前端研发部</a></li><li><a href="http://f2e.souche.com/blog/" target="_blank" rel="noopener">搜车大无线团队博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE" target="_blank" rel="noopener">饿了么大前端</a></li><li><a href="https://tech.meituan.com/" target="_blank" rel="noopener">美团点评技术团队</a></li><li><a href="http://ued.ctrip.com/blog/" target="_blank" rel="noopener">携程设计委员会</a></li><li><a href="https://www.qianduan.net/" target="_blank" rel="noopener">前端观察 ( 腾讯 )</a></li><li><a href="https://qianduan.group/" target="_blank" rel="noopener">前端外刊评论</a></li><li><a href="https://www.awesomes.cn/" target="_blank" rel="noopener">Awesomes-Web 前端开发资源库</a></li><li><a href="https://juejin.im/explore/frontend" target="_blank" rel="noopener">掘进|发现|前端</a></li><li><a href="https://segmentfault.com/news/frontend" target="_blank" rel="noopener">Segmentfault|头条|前端</a></li><li><a href="https://toutiao.io/c/fe" target="_blank" rel="noopener">开发者头条|前端</a></li><li><a href="http://web.jobbole.com/" target="_blank" rel="noopener">伯乐在线| Web 前端</a></li><li><a href="http://f2ex.cn/" target="_blank" rel="noopener">F2EX.cn web前端开发|web前端资源库</a></li></ul><h3 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h3><ul><li><a href="http://www.jstips.co" target="_blank" rel="noopener">A JS tip per day! </a></li><li><a href="https://codepen.io/" target="_blank" rel="noopener">CodePen - Front End Developer Playground</a></li><li><a href="https://medium.com/reloading" target="_blank" rel="noopener">Reloading – Medium</a></li><li><a href="https://medium.com/topic/cybersecurity" target="_blank" rel="noopener">Cybersecurity – Medium</a></li><li><a href="https://hackernoon.com/" target="_blank" rel="noopener">Hacker Noon</a></li><li><a href="https://frontendfoc.us/" target="_blank" rel="noopener">Frontend Focus</a></li><li><a href="http://javascriptweekly.com/" target="_blank" rel="noopener">JavaScript Weekly</a></li><li><a href="http://css-weekly.com/" target="_blank" rel="noopener">Css Weekly</a></li><li><a href="https://web-design-weekly.com/" target="_blank" rel="noopener">Web Design Weekly</a></li><li><a href="https://webtoolsweekly.com/" target="_blank" rel="noopener">Web Tools Weekly</a></li><li><a href="https://cssanimation.rocks/" target="_blank" rel="noopener">Learn CSS Animation</a></li><li><a href="https://hackdesign.org/" target="_blank" rel="noopener">Hack Design</a></li><li><a href="https://codeburst.io/" target="_blank" rel="noopener">Codeburst</a></li><li><a href="https://www.sitepen.com/blog/" target="_blank" rel="noopener">SitePen Blog</a></li><li><a href="http://javascriptweekly.com/issues" target="_blank" rel="noopener">JavaScript Weekly ^subscribe</a></li><li><a href="https://frontendfoc.us/issues" target="_blank" rel="noopener">Frontend Focus ^subscribe</a></li><li><a href="https://webopsweekly.com/issues" target="_blank" rel="noopener">WebOps Weekly ^subscribe</a></li><li><a href="https://nodeweekly.com/issues" target="_blank" rel="noopener">Node Weekly ^subscribe</a></li><li><a href="https://mobilewebweekly.com/issues" target="_blank" rel="noopener">Mobile Dev Weekly ^subscribe</a></li></ul><h2 id="前端频道之个人博客"><a href="#前端频道之个人博客" class="headerlink" title="前端频道之个人博客"></a><strong>前端频道之个人博客</strong></h2><h3 id="国内-1"><a href="#国内-1" class="headerlink" title="国内"></a>国内</h3><ul><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰的网络日志</a></li><li><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">张鑫旭 - 鑫空间 - 鑫生活</a></li><li><a href="https://blog.dandyweng.com/" target="_blank" rel="noopener">翁天信的博客</a></li><li><a href="http://jiongks.name/" target="_blank" rel="noopener">勾三股四 / 赵锦江</a></li><li><a href="https://huangxuan.me/" target="_blank" rel="noopener">Hux Blog( 黄玄 )</a></li><li><a href="http://blog.cssforest.org/" target="_blank" rel="noopener">CSS 森林 (CSS Forest)</a></li><li><a href="http://www.barretlee.com/entry/" target="_blank" rel="noopener">小胡子哥 ( 李靖 )</a></li><li><a href="https://imququ.com/" target="_blank" rel="noopener">JerryQu( 屈光宇 )</a></li><li><a href="https://www.h5jun.com/" target="_blank" rel="noopener">十年踪迹的博客</a></li><li><a href="http://blog.xcatliu.com/" target="_blank" rel="noopener">流浪小猫的博客</a></li><li><a href="http://yanhaijing.com/" target="_blank" rel="noopener">颜海镜的博客</a></li><li><a href="https://lzw.me/" target="_blank" rel="noopener">志文工作室</a></li><li><a href="https://jeffjade.com/">晚晴幽草轩</a></li><li><a href="https://chuckliu.me/" target="_blank" rel="noopener">Chuck Liu 的博客</a></li><li><a href="https://calpa.me/" target="_blank" rel="noopener">Calpa’s Blog</a></li><li><a href="https://www.xuanfengge.com/" target="_blank" rel="noopener">轩枫阁 – 前端开发</a></li><li><a href="http://vanessa.b3log.org/" target="_blank" rel="noopener">HacPai - Vanessa(💃)</a></li><li><a href="http://cherryblog.site/" target="_blank" rel="noopener">Cherry’s Blog(💃)</a></li></ul><h3 id="国外-1"><a href="#国外-1" class="headerlink" title="国外"></a>国外</h3><ul><li><a href="https://bitsofco.de/" target="_blank" rel="noopener">Bitsofcode</a></li><li><a href="https://css-tricks.com/" target="_blank" rel="noopener">Css Tricks</a></li><li><a href="https://advancedweb.hu/" target="_blank" rel="noopener">Blog - Advanced Web Machinery</a></li><li><a href="https://designmodo.com/" target="_blank" rel="noopener">Designmodo: Web Design Blog and Shop</a></li><li><a href="https://www.noupe.com/" target="_blank" rel="noopener">Noupe - THE magazine for webworkers and site owners</a></li><li><a href="https://blog.pragmatists.com/" target="_blank" rel="noopener">Pragmatists blog</a></li><li><a href="https://www.smashingmagazine.com/" target="_blank" rel="noopener">Smashing Magazine</a></li><li><a href="http://webdesignerwall.com/" target="_blank" rel="noopener">Web Designer Wall</a></li><li><a href="https://designm.ag/" target="_blank" rel="noopener">DesignM.ag</a></li><li><a href="http://justcreative.com/blog/" target="_blank" rel="noopener">Just™ Creative Blog</a></li><li><a href="https://line25.com/" target="_blank" rel="noopener">Line25 Web Design Blog</a></li><li><a href="https://blog.liftsecurity.io/" target="_blank" rel="noopener">Find and Fix Node.js Security Flaws</a></li><li><a href="https://johnpapa.net/" target="_blank" rel="noopener">John Papa: John Papa</a></li></ul><blockquote><p><strong>微注：</strong> 显然，如今优质<code>个人博客</code>很多；但此间对其的收录，将秉承以下几点原则：内容以原创为主，多涉及前端范畴；并具有一定参考价值，且三月之内仍有更新；有自己个人品牌，而不依附于其他平台；网站响应迅速，板式布局干净舒爽；若有广告，当不影响阅读体验（另外，当有一定影响力，或者有一些积淀，如原创内容篇数大于 30+）。</p></blockquote><hr><p>对于如上这份收录，初衷就是如此简单，但仍需对其做如下几点补充：</p><ul><li>如今的类似这种网站，非常之多；而这里的收录，只是对访问过的网站，以个人当下评判角度，加以整理；不代表这里就一定写的更好；如有其它值得常去的网站，还望不吝分享；</li><li>我们所处的环境，都比较喜欢排名，个人也是；但这里的顺序无关乎任何排名；只是简单的罗列；</li><li>对于个人维护的品牌，在微注中已有说明；众所周所是，在 <code>Github</code>，<code>博客园</code> 等处，都有很多技术大牛，在耕耘技术文章；但，跟出发点略有相悖，也就不予收录；</li><li>而对于很多网站，如果涉及前端相关，但对于 UI 设计、打开速度等影响访问体验的部分，如果都没有加以优化，则很有理由相信其中内容也乏善可观，不收录也罢；</li><li>现在所收录的些许，也并不会一成不变；年与时驰中，眼界也会越发高些；之后也会专门为此完善脚本，以定期检查收录网站的运行、更新、Google Audits 跑分等情况，定下规则，酌情增删。</li></ul><hr><p>额外想要补充说明的是：很早之前，在<a href="https://jeffjade.com/2016/03/23/2016-03-23-toss-wechat-public_no/">微信公众号：静晴轩</a>一文就有提到：“<strong>即便是再小的个体，也当有自己的品牌</strong>”这一观点；所以一直以来，也在尽力折腾自己的一些品牌，比如个人博客 —— <a href="https://jeffjade.com">晚晴幽草轩</a>。目前在 <a href="http://www.alexa.cn/jeffjade.com" target="_blank" rel="noopener">Alexa</a> 全球排名，Pv: 167104, UV: 140423(2017-12-10)；这离原来设定的目标，相差甚远。当然，17 年闲暇时间，多半用来设计&amp;折腾最新作品：<a href="https://nicelinks.site" target="_blank" rel="noopener">倾城之链</a>了；关于她设计的初衷就是：尽可能云集世间优秀的网站，让人们可以从中，见识和学习更多有趣且有用的事物；这其中很大程度上，就是对优秀个人品牌的收录和传播；而深层次的用意，更是与此文的出发点同出一辙；在这里也算是小小一波推广，有兴趣的朋友不妨试用下，提提建议（当然，目前还在不断完善之中） Update@2017-12-10夜。</p><h2 id="结语，结语"><a href="#结语，结语" class="headerlink" title="结语，结语"></a><strong>结语，结语</strong></h2><p>“1975年二、三月间，一个平平常常的日子，细蒙蒙的雨丝夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天看来就要过去，但那真正温暖的春天还远远地没有到来”，路遥先生在《平凡的世界》这部巨著的开篇如此写道；而对于奋斗在天南海北我们这些 Coder，不也是如此？—— 真正温暖的春天还远远地没有到来。为此，让我们相互携手，砥砺前行，创出属于自己的天，造出属于自己的地，Fighting. Fighting. Fighting。如上几言心事，忝与诸君共勉。</p><p>@2017-10-29 于深圳.南山 Last Modify： 2017-11-30</p><hr><h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li><li><a href="//jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/">晚晴幽草说之-前端札记</a></li><li><a href="https://jeffjade.com/2017/10/14/131-some-filth-such-as-jianshu/">劾『简书』之蛮横无道</a></li><li><a href="https://jeffjade.com/2017/09/29/128-talking-about-movies-or-life/">晚晴幽草说之 — 谈用心</a></li><li><a href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/">疆来有你，从心出发</a></li></ul>]]></content>
    
    <summary type="html">
    
      汇聚全球优质前端博客、前端订阅网站、前端学习资源网站等，希望所有开发者(前端)，能够在不断成长的历程中，也效法他人，不断修炼技术，提升个人价值，打造个人品牌；利己的同时，还能帮助同行的其他人；
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="https://jeffjade.com/tags/JavaScript/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>那一瞬,那一夜,那一年,那一世</title>
    <link href="https://jeffjade.com/2017/10/29/132-feeling-love-and-life/"/>
    <id>https://jeffjade.com/2017/10/29/132-feeling-love-and-life/</id>
    <published>2017-10-28T19:28:00.000Z</published>
    <updated>2017-11-25T12:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>那一夜，我听了一宿梵唱，不为参悟，只为寻你的一丝气息。 那一月，我转过所有经轮，不为超度，只为触摸你的指纹。 那一年，我磕长头拥抱尘埃，不为朝佛，只为贴着了你的温暖。 那一世，我翻遍十万大山，不为修来世，只为路中能与你相遇。 那一瞬，我飞升成仙，不为长生，只为佑你平安喜乐。</p><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="340" height="86" src="//music.163.com/outchain/player?type=2&id=4332303&auto=1&height=66"></iframe><br><img src="https://image.nicelinks.site/loveFlower.jpg" alt="那一瞬,那一夜,那一年,那一世"></p><blockquote><p>那一夜，我听了一宿梵唱，<br>不为参悟，只为寻你的一丝气息。</p><p>那一月，我转过所有经轮，<br>不为超度，只为触摸你的指尖。</p><p>那一年，我磕长头拥抱尘埃，<br>不为朝佛，只为贴着了你的温暖。</p><p>那一世，我翻遍十万大山，<br>不为修来世，只为路中能与你相遇。</p><p>那一瞬，我飞升成仙，<br>不为长生，只为佑你平安喜乐。</p><p>那一天，闭目在经殿香雾中，<br>蓦然听见你颂经中的真言。</p><p>那一月，我摇动所有的转经筒，<br>不为超度，只为触摸你的指尖。</p><p>那一年，磕长头匍匐在山路，<br>不为觐见，只为贴着你的温暖。</p><p>那一世，转山转水转佛塔啊，<br>不为修来生，只为途中与你相见。</p><p>那一刻，我升起风马，<br>不为乞福，只为守候你的到来。</p><p>那一日，垒起玛尼堆，<br>不为修德，只为投下心湖的石子。</p><p>那一月，我摇动所有的经筒，<br>不为超度，只为触摸你的指尖。</p><p>那一年，磕长头在山路，<br>不为觐见，只为贴着你的温暖。</p><p>这一世，转山不为轮回，只为途中与你相见。</p><p>只是，就在那一夜，我忘却了所有，<br>抛却了信仰，舍弃了轮回，<br>只为，那曾在佛前哭泣的玫瑰，<br>早已失去旧日的光泽。</p></blockquote><p>这一首爱的挽歌，静静的走过三百余年的红尘轮回，在时光的流逝中，渐淡、渐远……；一如作者在此诗中，体味着时光之于爱情的感慨。奈何兮，”情深不寿，慧极必伤”。</p><p>此诗作者，即鼎鼎大名<strong>仓央嘉措</strong>，其法名洛桑仁钦仓央嘉措，原籍西藏南部门隅地区。生于康熙二十二年（1683年），十四岁时剃度，入布达拉宫为黄教领袖；其虽有达赖喇嘛之名，却为傀儡，并无实权；生活上遭到禁锢，政治上受人摆布，另仓央嘉措内心抑郁，致使其索性纵情声色；十年后为西藏政教斗争殃及，被清廷废黜，解送北上，道经青海今纳木措湖时中夜循去，不知所终(也传病逝，也说打坐圆寂)；时年 23 岁，一代才子，陨落于英年，令人扼腕。</p><p>那时车马很缓；那时书信很慢；那时天涯咫尺；那时朝阳很灿；那时夕阳很美；那时日出而作；那时日落则息；那时天地多宁静；那时内心愚而定；那时如长夜，书三纸思念，相思以寄；那时若闲适，植一株红豆，待等花开；那时寒窗十载，搏一功成名就，迎娶妙曼新娘；那时一生一世，你不离我不弃，堪得携手到白头。可是啊，传说于诗词中的爱情，得到岂又是那么容易！“自惭多情污梵行，入山又恐误倾城。世间哪得双全法，不负如来不负卿？”，你是尊贵的佛爷，也是世间最美情郎；如此高贵的地位，却也换不来简单的爱情。</p><p>到如今，看世事皆已幻化！我愿化成一座做石桥，经受五百年的风吹，五百年的日晒，五百年的雨打，却不知求谁从桥上走过！即便有，她也可能在这尘世中离不开那繁忙。而这五百年，却也似弹指一挥间；又一夜的欲睡无眠，欲眠时、天已亮；人生哀如斯夜，待欲亮时，是否又身已老？感而自问，为何此时心不亮？理自答曰：此刻亦该去为“正经”忙。时也、事也，皆不我与，便纵有、千种风情，更与何人说？</p><p>你见，或者不见，你知道，或者不知道；你能理解，或者不能理解；有一种情愫盈怀，就在那里，忽来不去，不增不减，亦悲亦喜：<strong>我懒，你如也懒， ﻿﻿后来我的勤奋， 定﻿是为了能让你接着懒</strong>；如今，身陷与它物的深入交流，也只是为了有朝那么一日：<strong>繁华尽处，寻一无人山谷，建一木制小屋，铺一青石小路，与你晨钟暮鼓，安之若素</strong>。然，世事幻化的季节，是否会在某一夜，我亦忘却了那所有，抛却了这信仰，舍弃了苦乐轮回，只为，内心恬淡，远离闹寂，山川为伴……</p><p>@2017-10-28 于深圳.南山 登高日，月半宅，微感。Last Modify： 2017-11-02</p>]]></content>
    
    <summary type="html">
    
      那一夜，我听了一宿梵唱，不为参悟，只为寻你的一丝气息。 那一月，我转过所有经轮，不为超度，只为触摸你的指纹。 那一年，我磕长头拥抱尘埃，不为朝佛，只为贴着了你的温暖。 那一世，我翻遍十万大山，不为修来世，只为路中能与你相遇。 那一瞬，我飞升成仙，不为长生，只为佑你平安喜乐。
    
    </summary>
    
      <category term="Thought" scheme="https://jeffjade.com/categories/Thought/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>劾『简书』之蛮横无道</title>
    <link href="https://jeffjade.com/2017/10/14/131-some-filth-such-as-jianshu/"/>
    <id>https://jeffjade.com/2017/10/14/131-some-filth-such-as-jianshu/</id>
    <published>2017-10-14T12:54:00.000Z</published>
    <updated>2017-11-25T12:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>“从事编程工作的这四年余来，为何没研习些黑客方面技艺，靠~”，在准备给<code>简书</code>方面回复邮件之时，心里有如此悔叹道。10月9日，<a href="http://weibo.com/hanxue" target="_blank" rel="noopener">@韩雪</a>对<code>携程捆绑销售</code>这种无良的行为，发表了维权申明：<a href="http://weibo.com/1197755162/FpCkZfAkn?type=comment#_rnd1507987112781" target="_blank" rel="noopener">携程在手，看清楚再走</a>。大概一年前也是因为类似原因，放弃了携程。只不过人微言轻，即便有心维权，也是石沉大海，无济于事。对于<a href="http://weibo.com/hanxue" target="_blank" rel="noopener">@韩雪</a>这种高尚行动，除了各种倾情点赞转发，也贡献不了更多。此次被<code>简书</code>单方面给予的超无理(+礼)待遇，好像也只有忍气吞声，怨已无力。但，这绝对不是个人想看到的，也绝非故事的终局。</p><a id="more"></a><p><img src="https://image.nicelinks.site/elephant.jpg" alt="劾『简书』之蛮横无道"></p><p>在 10 月 5 日晚 22 点 46 分，收到来自<code>简书</code>一封邮件，大意是说：账号违规，已被冻结。打开其 APP 查验：果真；当时的我，一脸懵圈。要知道：开始用<strong>简书</strong>这款产品，已经是两年多以前的事儿，那时的简书处于发展初期，协助引入一位新注册用户，还能得钱 2 元。两年来，偶尔会写点博文，首发布于博客后，多数也会同步一份到简书(ID: <strong>晚晴幽草</strong>)，陆陆续续收获点赞近 3K，粉丝近 2K，得赏 40 余元（客观的评价，较为纯粹的技术方面分享，得此成绩，已算斐然）同时，在<code>简书</code>文章底部所留的外链，每天也可给个人博客带来一定流量，长期霸占博客流量来源第三(居直接访问，谷歌搜索之后)。陡然间，被收到这么一封信 &amp; 待遇，怎能不令人惊愤。这种情绪延续至第二日一早，有向<strong>简书</strong>方面发起申诉，内容如下：</p><hr><p>尊敬的简书运营人员：</p><p>很久之前，简书还尚在发展初期时候，我就是简书的用户了；在简书写作的同时，并无偿安利给很多人；可以说，对于简书的发展，也算做了微薄的贡献；且在个人博客、以及新作品中，都将简书极力做了宣传。而今，却接受到了下面一封邮件，说冻结了我的账号，我表示很不能理解，同时也很伤心！</p><blockquote><p>由于您违反了简书社区管理规定（包括但不仅限于违反法律法规，不友善行为，发布垃圾信息，恶意行为如简信滋扰），具体可查看《「简书」指导原则和管理细则》 <a href="http://www.jianshu.com/p/8wfB9b" target="_blank" rel="noopener">http://www.jianshu.com/p/8wfB9b</a>   和《简书社区指导规则》 <a href="http://www.jianshu.com/p/" target="_blank" rel="noopener">http://www.jianshu.com/p/</a>  ，现根据情节严重程度，给予您冻结账户的惩罚，冻结期间帐号无法发表和编辑任何内容，您的数据将会为您保留60天，在此期间您可以备份您的文章，钱包里如有余额可及时提现，如您对结果处理有异议，也可联系邮箱 contact@jianshu.com ，60天后将会直接注销您的账号并删除所有数据</p></blockquote><p>在简书留下的 60 余片文章，基本都处于自己之手，鲜有借鉴他人；违反法律规定？不友善行为？发布垃圾信息？恶意行为如简信滋扰，这种事儿，我觉得个人没有参与。如果说哪一篇，不幸违反你们觉得的条例，应该事先给予<code>警告</code>，而不是一上来就冻结封号，<strong>此其一</strong>。即便真是哪篇违反了，冻结该篇就好，全部冻结，都违反了？难以信服！<strong>次其二</strong>。在简书，我觉得留下了次其二不少很实用的文章，在 IT 方面，不少粉丝也是因此才注册的简书，如今无缘由封存冻结，对于我还是他们，不需要给一个说法么？具体可查看 XXX，这种做法未免太过敷衍了事乎？<strong>此其三</strong>。殊不知，水能载舟，亦可覆舟；虽然封存我这账号，对如今的简书无关痛痒，可是如此办事儿章程，岂是利对于简书发展？<strong>此其四</strong>。</p><p>另，如今的简书，发展虽尚好；可是内容的生产上，你们以为何如？如今平台万千，作为一位真正大多是想分享而存在的IT开发人员，对于简书，想必是不可多得的存在；还请弃武断而处其事，实该怀大局以考量。</p><p>最后，希望尊敬的简书运营人员，可抽空尽快给个说法，即便仍要行此伤人之举，也该给出相应说明；万不要硬生简书乃“<strong>过河拆桥</strong>”之不仁不义辈的大误会。</p><p>来自<a href="https://jeffjade.com">晚晴幽草轩轩主</a>的伤诉</p><p>2017-10-06  10:59</p><hr><p>当时，为确保他们的运营人员能够收到，特连发两封，包括这个邮箱：contact@jianshu.com 。至此，一周有余，也未收到他们任何回信。而被冻结在简书账号，欲改无门，欲删不能，申诉无人理，反馈没回应，端的受一股窝囊之气，叫人如何忍气吞声？这便是此篇发声的由头了。</p><p>可以补充的是，这事儿可能不完全责怪<strong>简书</strong>，或其运营工作人员，可是作为双重用户，申诉的邮件，回都不回，如何说的过去？蛮横无道！这兴许是他们运营人员的一贯疏忽：早先就发现<code>简书</code>大Bug，譬如在 Mac Mini 网页平台，无法评论(控制台有报错)；第一时间反馈给它们，也是牛入泥海，一去不回，至今 Bug 犹存。</p><p>话说这<strong>简书</strong>，到现在为止，也认同这是一款蛮好作品，融读写于一体，你可在此创作你的创作；而且网站的布局、视觉风格，也觉挺好。但也有着大的不足：鸡汤文遍野，标题党横行；早在 16 年 8 月份，就有在<a href="https://jeffjade.com/2016/08/08/113-toss-gulp/">Gulp折腾之路(III)</a>一文的最后，有做过阐述，原话如下：</p><blockquote><p>…… 相信吧：<strong>A Problem Is A Chance For You To Your Best.</strong>。既然谈及了些鸡汤，那就不妨再荐一发广告：有在<code>简书</code>，建立专题<a href="http://www.jianshu.com/collection/2f6a49e22121" target="_blank" rel="noopener">《折腾之美》</a>着重搜集汇藏“折腾”之法，以令生活更简洁而丰美为定调。虽然简书已然演化为鸡汤遍野，壮语横行的一席催进地；希冀这《折腾之美》醉中流醒，仍为一抔实用田。</p></blockquote><p>宠幸标题党，大爱鸡汤文，这种做法倒也无可厚非；但是作为一个平台两说，很不体面；更何况对于写作者，也是恶劣引导（上首页中的潜规则）。据悉<strong>携程</strong>早期时候，服务也是很不错的，现而今做大了就沦为这样了。一年多以前，滴滴打车真的带来便利，如今在深圳，出行的我更愿意选择坐出租车了（滴滴车了少也是原因之一）；还有那每次吐槽，都须一谈的某DU，如今都懒得批评了，心累。从历史角度来看，“飞鸟尽，良弓藏”这种事儿更是屡见不鲜。如今，<code>简书</code>有这种做法了，倒也不难理解，虽然感觉它还没强大到这种可以垄断，蛮横无道的地步。</p><p>以上就是针对，遭遇<code>简书</code>的无礼对待，所勾起的些许感慨。如果只是这样写一写，或者就此弃用这款应用，倒真的是在怨天尤人的发牢骚了。我们应该做些什么，使得我们这些小老百姓，当再面对这种问题时候，可以反攻之！很明显，不能真去研习黑（骇）客技术，以报复之；当然，又没有像<a href="http://weibo.com/hanxue" target="_blank" rel="noopener">@韩雪</a>这样的明星，坐拥百千万粉丝，一言一行都备受关注。作为程序员，可以一搞的是，撸一款产品，可以让民众可以更容易、更有效的发声，且让他们的声音使更多人可以听到。这谈何容易，这听起来不是像在跟微博、微信、网易新闻等等争场子么？虽然，梦想还是要有的，但这种做法无疑还是非常之荒谬(如果连一个强悍团队都没有的话)！</p><p>可是，“做人没梦想，跟咸鱼有什么区别？”—By 周星驰先生。既然不能硬拼，不妨学学谷歌之于 Android，以对抗其他手机系统的做法。近来就在挤时间完善一款作品：<a href="https://nicelinks.site/" target="_blank" rel="noopener">倾城之链</a>，英文名曰：<a href="https://nicelinks.site/" target="_blank" rel="noopener">NICE LINKS</a>，她的存在，就是云集各路优秀世间站点，让人们可以见识和学习更多有趣的事物，使之不止于刷刷微博，看看朋友圈，以及被各种须阉割的公众号；这是对于品读方。而处于喜欢生产东西的一方，则鼓励打造出更为优秀的平台(尤其个人品牌)，使得言路可以更加多元而丰富，简单且随心；况且每个现代人都该有属于自己的品牌，不是么？当然，这并不完全是<a href="https://nicelinks.site/" target="_blank" rel="noopener">倾城之链</a>追求的全貌，将在之后的文章中更为详细的阐述，关于她设计的初衷、理念和目标。</p><p>以上就是这篇文章，所要言及的内容了。但写完思虑，总觉得需要些补充；作为读者的你，会不会有些被套路的感觉？初看之下，是吐槽<strong>简书</strong>的蛮横无道；读到最后，这分明是在借辞推广营销嘛。坦白说，有这种心情，我表示太能理解了，因为也经常被各种套路，而且这一套聊下来，我也感觉这很有套路的嫌疑[捂脸]；然而我想说的是，<a href="https://jeffjade.com/About/">晚晴幽草轩轩主</a>既有原则是不会变的 — 即不会主动行标题套路。如果，客观都已经耐心的读到这儿，不妨再听几句絮叨：<a href="https://nicelinks.site/" target="_blank" rel="noopener">倾城之链</a>，目前从设计、到编码(前端、后台、运维)、到测试、推广、运营，都仅有一人在操办；很显然，这难以成事。如今很缺设计师帮着优化视觉风格，需要专业后端开发给予参验服务，(还有算法、深度学习等等)….. 也需要各界朋友给予意见和建议，更需要各路朋友给予支持和鼓励。如有兴趣的朋友，不妨联系我，一起用业余时间，为世界变得更美好，尽自己一份心力，同时收获一份喜悦❤️。</p><p>最后补充一句，如果有朝一日，<a href="https://nicelinks.site/" target="_blank" rel="noopener">倾城之链</a>做大做强，将始终如一，绝不会如『简书』之流，蛮横而无道。</p><hr><p><img src="https://image.nicelinks.site/jianshu-letter.png" alt="劾『简书』之蛮横无道"></p><blockquote><p>Update@17-10-18，额外补充的是，10 月 17 日，<code>简书</code>又莫名将账号解封了，昏昏然知被冻结，懵懵兮见又被解封，是不是挺有意思？毕竟人家的盘，怎的都由它了。“他强任他强,清风拂山岗;他横由他横,明月照大江”，我自一口真气足，做好属于我们的品牌，欧耶😊。</p></blockquote><p>深圳.南山 @17-10-14. last-modify: @17-10-18</p><hr><h2 id="猜你喜欢-对你有用-的文章"><a href="#猜你喜欢-对你有用-的文章" class="headerlink" title="猜你喜欢(/对你有用)的文章"></a><strong>猜你喜欢(/对你有用)的文章</strong></h2><ul><li><a href="https://jeffjade.com/2017/02/05/119-wanqingyoucaoshuo-/">《晚晴幽草说－序》</a></li><li><a href="https://jeffjade.com/2016/04/16/105-talk-about-chuanqidazhanggui/">《传奇大掌柜》微说</a></li><li><a href="https://jeffjade.com/2016/02/22/2016-02-22-beautiful-of-toss/">折腾之美</a></li><li><a href="https://jeffjade.com/2016/02/29/2016-02-25-where-do-you-writing/">一颗笔心何处寄？</a></li><li><a href="https://jeffjade.com/2016/07/24/111-talk-about-work-arena/">写于职业边上</a></li><li><a href="http://www.jeffjade.com/2015/07/05/2015-07-05-thought-of-life/" target="_blank" rel="noopener">写在人生边上之守心</a></li><li><a href="http://www.jeffjade.com/2015/04/02/2015-04-01-thought-do/" target="_blank" rel="noopener">做，还是不做？做！</a></li></ul>]]></content>
    
    <summary type="html">
    
      诉讼『简书』之蛮横无道，不予以任何理由，恶意冻结账号
    
    </summary>
    
      <category term="Thought" scheme="https://jeffjade.com/categories/Thought/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
  </entry>
  
  <entry>
    <title>晚晴幽草说之-前端札记</title>
    <link href="https://jeffjade.com/2017/10/09/130-front-end-notes/"/>
    <id>https://jeffjade.com/2017/10/09/130-front-end-notes/</id>
    <published>2017-10-08T16:30:00.000Z</published>
    <updated>2017-10-12T15:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>坦白来说，写博文这事儿，是一项费力且耗时的工作；如果再加上行文、配图方面的考究润色，就更为不易。但平时，偶有些新的见闻和想法什么的，值得分享讨论；兴致踏来时，则会分享至 <a href="https://hacpai.com/register?r=jeffjade" target="_blank" rel="noopener">HacPai</a>、<a href="https://www.v2ex.com/member/jeffjade" target="_blank" rel="noopener">V2ex</a> 抑或是<a href="http://weibo.com/jeffjade?topnav=1&amp;wvr=5" target="_blank" rel="noopener">微博</a>；而这些分享内容不多，不成整体，难以成篇，故此也很分散；而且受众也飘忽不定，反馈稀薄。这篇文字的存在，即是将平时那些微技随帖，汇集整理，独成一文，分享给关注<a href="https://jeffjade.com">晚晴幽草轩</a>的朋友们，也将不定期更新；鉴于多半与前端相关，就取其名为：<strong>晚晴幽草说之-前端札记</strong>。</p><a id="more"></a><p><img src="https://image.nicelinks.site/stock-photo-sky.jpg" alt="晚晴幽草轩 - 题图来自 500px"></p><h3 id="制作响应电子邮件模板"><a href="#制作响应电子邮件模板" class="headerlink" title="制作响应电子邮件模板"></a><strong>制作响应电子邮件模板</strong></h3><p>近期，为制作一套响应电子邮件模板，倍感疲惫，苦煞心也。当然也收获些许经验，当你需要的是一个非常简单的响应式HTML电子邮件模板时，你可以这样做：可参见 <a href="https://github.com/leemunroe/responsive-html-email-template" target="_blank" rel="noopener">responsive-html-email-template</a>。看起来真的很简单，但实践起来这不是简单且不友好的。当然，你可以使用一些工具，如 <code>gulp</code> ＆ <code>gulp-inline-css</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  inlineCss = <span class="built_in">require</span>(<span class="string">'gulp-inline-css'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'inline-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/**/*.html'</span>)</span><br><span class="line">    .pipe(inlineCss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build/'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'./src/**/*.html'</span>, [<span class="string">'inline-css'</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watch'</span>])</span><br></pre></td></tr></table></figure><p>它可以帮助你制作邮件模板，如写一个网页一样。但是你必须自己支持，哦，糟糕。你可能很无奈，直到你见到她 —— <a href="https://mjml.io/" target="_blank" rel="noopener">mjml</a>，她可能是你的救星，关于如何简单制作一套优质的响应式邮件模板。美中不足的是，她也有一些问题。所以，我提供了这个工具，让你更容易使用她，具体参见 <a href="https://github.com/nicejade/responsive-email-template" target="_blank" rel="noopener">responsive-email-template</a>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/nicejade/responsive-email-template</span></span><br><span class="line">npm <span class="selector-tag">i</span> (yarn)</span><br><span class="line">./node_modules/.bin/mjml --watch src/index<span class="selector-class">.mjml</span> -o build/index.html</span><br><span class="line"></span><br><span class="line">gulp (If you need extra style)</span><br></pre></td></tr></table></figure><blockquote><p>@2017-10-12 于深圳.南山</p></blockquote><h3 id="JavaScript-amp-机器学习"><a href="#JavaScript-amp-机器学习" class="headerlink" title="JavaScript &amp; 机器学习"></a><strong>JavaScript &amp; 机器学习</strong></h3><p>根据 <strong>Atwood</strong> 定律：“任何可以使用 JavaScript 来编写的应用，最终会由 JavaScript 编写。<code>机器学习</code>这方面也不例外。得益于各种套件，今天的机器学习的门槛已经越来越低。Google 新推出了 Teachable Machine 项目，让用户无需编程就可以用手机、平板、计算机等设备的摄像头采集数据进行机器学习。这一项目是 Google 的 A.I. Experiment 的一部分，源代码已经公布在Github上；简单的说，<a href="https://github.com/googlecreativelab/teachable-machine" target="_blank" rel="noopener">Teachable Machine</a> 是一个基于浏览器的机器学习演示实验，用一个叫做 <a href="https://github.com/PAIR-code/deeplearnjs" target="_blank" rel="noopener">Deeplearn.js</a>（A hardware-accelerated deep learning library for the web.）的库构建，网页开发者可以编写一个简单的视觉输入，并设定输出和三个训练分类器，来在浏览器中训练新的神经网络。如有兴趣，不妨一探究竟: <a href="https://deeplearnjs.org/" target="_blank" rel="noopener">https://deeplearnjs.org/</a> 。</p><p>类似使用 JavaScript 对机器学习方面的探究尝试，还有很多，比如 <a href="https://github.com/janhuenermann/neurojs" target="_blank" rel="noopener">neurojs</a>: A javascript deep learning and reinforcement learning library (一个javascript深入学习和强化学习库)。是不是又有新的可以学习 &amp; 折腾的方向了？此处有表情：【捂脸】。</p><p>@2017-10-09 于深圳.南山</p><h3 id="博客评论系统"><a href="#博客评论系统" class="headerlink" title="博客评论系统"></a><strong>博客评论系统</strong></h3><p>嗟夫，真真是：独立的才是自己的。博客从最开始用<strong>多说</strong>，17年6月1日关闭服务后，转战<strong>网易云跟帖</strong>；未曾想它8月1日也跟着关闭了（其实，它的关闭倒也没什么，坦白说差<strong>多说</strong>远也）。索性转投靠至国外<strong>Disqus</strong>(很早之前，辅助博客<a href="https://blog.lovejade.cn/" target="_blank" rel="noopener">天意人间舫</a>就选择用的它)，奈何这堵墙厉害之极，家里虽也翻了墙，却仍不能很好访问；这才又转战至 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>（善用Github Issue 的开源评论插件，同类型的还有 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a>）；😂 言多皆泪，感慨颇多啊——独立的才是自己的，之后得空时候，还是自己搞一套😪，Fighting。</p><p>@2017-09-10 于深圳.南山</p><h3 id="Clustrmaps－最便捷的博客访问统计"><a href="#Clustrmaps－最便捷的博客访问统计" class="headerlink" title="Clustrmaps－最便捷的博客访问统计"></a><strong>Clustrmaps－最便捷的博客访问统计</strong></h3><p>做网站，访问统计是不可或缺的部分（即使只是满足下小小虚荣和好奇）；</p><p><a href="http://jeffjade.com/" title="晚晴幽草轩">晚晴幽草轩</a>自15年4月份运营以来，使用过<code>百度统计</code>，<code>Google Analytics</code>，<code>Firebase</code> 等等；而昨天，又发现一款——<strong><code>clustrmaps</code></strong>，看起来挺有意思，就迫不及待的注入到博客中，点次查看<a href="https://clustrmaps.com/site/19oib?utm_source=widget#l81sg33ua7rk5dfj0jq7u4ssb6" target="_blank" rel="noopener">晚晴幽草轩-访问统计</a>。</p><p>百度统计，Google Analytics，两者都很强大，尤其是后者，但只是运营者自己比较方便查看整个数据表现。</p><p>Firebase，相对来说可配置化更加丰富，也能实时更新，可是从表现来看，跟使用的百度统计数据，有不小的出入，可见确实数据比较严重。</p><p>而 clustrmaps 呢，也能实时更新，配置化程度也高（嗯，更多功能目测是收费的）。它的优势在于（仅限于目前所感）：最方便添加 👏🏻、 最为直观 👐🏻、普通访问用户也能方便查看访问情形 ✋🏻 … … 也许还有更多，等着你去试用 😄。</p><p>@2017-07-14 于深圳.南山</p><h3 id="构建中大型-Vue-项目样板"><a href="#构建中大型-Vue-项目样板" class="headerlink" title="构建中大型 Vue 项目样板"></a><strong>构建中大型 Vue 项目样板</strong></h3><p>对于如何构建 VueJs 项目，自然推荐官方的脚手架 vue-cli ；而对于微小型项目，个人倒挺看好 <a href="https://github.com/egoist/poi" target="_blank" rel="noopener">poi</a> —— (Delightful web development)，它能让你十分便捷的使用当前流行的框架（ Vue React 等）。</p><p>即便如此呢，很多业界朋友，对 Vue 项目的构建，还是不尽如人意；鉴于此，有根据过往的些许经验，设计出一套样板 —— <a href="https://github.com/nicejade/vue-boilerplate-template" target="_blank" rel="noopener">vue-boilerplate-template</a> ，以供参考，当然也期待朋友给予指正。</p><p>其中已经依赖了 vue-router、 vuex、 vue-i18n、 element-ui、 bootstrap 诸多库；也注入了 webpack、 Eslint、 pre-commit 等等便捷开发相关的库。其中对与后台接口调用与使用，vuex 的运用，视图结构的塑造，路由和多语言的配置，公共方法的调度，webpack 打包优化等等，都基于便捷开发的前提下，做了相应的设计，希望有缘人会喜欢；这一番设计缘由，得空会另起一篇文章予以阐明；而这番设计也会，在不断的学习中持续改进。</p><p>之前有写篇关于 vue 的文章－<a href="http://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的 Vue</a>,有些童鞋评论说，多是废话，也无心于之争；开源这份样板，也是将所学运用到代码中，欢请朋友们品评指正😊。</p><p>@2017-06-26 于深圳.南山</p><h3 id="快速开发响应网站的工具"><a href="#快速开发响应网站的工具" class="headerlink" title="快速开发响应网站的工具"></a><strong>快速开发响应网站的工具</strong></h3><p>早上看博客后台数据统计时候，发现有些来源自于这个地址：<a href="http://sizzy.co/" target="_blank" rel="noopener">http://sizzy.co/</a>；</p><p>点进去看了后发现有点意思; 搜索发现，这出自于最近开源的项目 <a href="https://github.com/kitze/sizzy" target="_blank" rel="noopener">sizzy-github</a>:<br><strong>A tool for developing responsive websites crazy-fast</strong> （才几天就有 2.05k+ Star）。</p><p> <img src="https://camo.githubusercontent.com/df19a57ff81800a18d4da21092bb5e724287c11b/687474703a2f2f692e696d6775722e636f6d2f42747971566c652e676966" alt=""></p><p>如果来查看下网站在个平台表现，是不是挺方便快捷的？比如：<a href="http://sizzy.co/?url=http%3A%2F%2Fjeffjade.com" target="_blank" rel="noopener">个人博客表现</a>。</p><p>@2017-04-26 于深圳.南山</p><h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></li><li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a></li><li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的Vue</a></li><li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/">墙裂推荐文章集锦</a></li></ul>]]></content>
    
    <summary type="html">
    
      将平时积累的前端相关见闻和想法，整理成文，予以分享，并不定期更新。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://jeffjade.com/tags/Vue/"/>
    
      <category term="JavaScript" scheme="https://jeffjade.com/tags/JavaScript/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 最新注册码分享</title>
    <link href="https://jeffjade.com/2017/10/08/129-sublime-text-latest-registration-code/"/>
    <id>https://jeffjade.com/2017/10/08/129-sublime-text-latest-registration-code/</id>
    <published>2017-10-08T08:46:00.000Z</published>
    <updated>2017-10-08T10:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>SublimeText，她作为强大而小巧，性感且快捷的编辑器，长时间以来，受众人青睐；对于个人来说，也是最常用代码编辑器，且没有之一（目前同时也会用 VsCode 和 Atom）。她，本身是免费的；但如要享受更多优秀功能，则需购买。对于只需免费功能的盆友，似乎还未养成购买软件的习惯；但对于她不时弹个框提醒你购买，并且顶部有未注册这样破坏美感的存在，也是颇为烦恼。当然，解决这问题也很简单：点开 Help，填入<code>注册码</code>即可。对于这注册码，除了购买所得，也可使用好心人所分享的；而此篇就是记载那些分享出来的可用注册码，并尽可能保持更新。</p><a id="more"></a><p><img src="https://image.nicelinks.site/sublime-text.jpg" alt="Sublime Text"></p><p>当您的版本更新到 —— <a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text 3</a> (Build 3143) ,你会发现 <code>Sublime Text</code>又做了很多更新，为他们点赞 ；同时之前分享的注册码也会受到影响；如果你特别需要的话，可以试试下面这则 <a href="https://fatesinger.com/100121" target="_blank" rel="noopener">NICE 分享</a>，亲测可用。需要阐明的是：<strong>如果可以，请尽可能支持正版软件。</strong> (Upade@17-10-08)。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line">TwitterInc</span><br><span class="line"><span class="number">200</span> User License</span><br><span class="line">EA7E<span class="number">-890007</span></span><br><span class="line"><span class="number">1</span>D77F72E <span class="number">390</span>CDD93 <span class="number">4</span>DCBA022 FAF60790</span><br><span class="line"><span class="number">61</span>AA12C0 A37081C5 D0316412 <span class="number">4584</span>D136</span><br><span class="line"><span class="number">94</span>D7F7D4 <span class="number">95</span>BC8C1C <span class="number">527</span>DA828 <span class="number">560</span>BB037</span><br><span class="line">D1EDDD8C AE7B379F <span class="number">50</span>C9D69D B35179EF</span><br><span class="line"><span class="number">2</span>FE898C4 <span class="number">8E4277</span>A8 <span class="number">555</span>CE714 E1FB0E43</span><br><span class="line">D5D52613 C3D12E98 BC49967F <span class="number">7652</span>EED2</span><br><span class="line"><span class="number">9</span>D2D2E61 <span class="number">67610860</span> <span class="number">6</span>D338B72 <span class="number">5</span>CF95C69</span><br><span class="line">E36B85CC <span class="number">84991</span>F19 <span class="number">7575</span>D828 <span class="number">470</span>A92AB</span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure><hr><p>以下 Sublime Text3 注册码，在 3143 之前版本可用；需要说明的是，这份良心分享来源于这里 <a href="https://fatesinger.com/77763" target="_blank" rel="noopener">Sublime text 3 3103 注册码</a>，在此表示感谢；同时也大力延续其倡导：<strong>Please support authorized software if you can.</strong> 如果可以请支持正版软件。</p><blockquote><p>—– BEGIN LICENSE —–<br>Michael Barnes<br>Single User License<br>EA7E-821385<br>8A353C41 872A0D5C DF9B2950 AFF6F667<br>C458EA6D 8EA3C286 98D1D650 131A97AB<br>AA919AEC EF20E143 B361B1E7 4C8B7F04<br>B085E65E 2F5F5360 8489D422 FB8FC1AA<br>93F6323C FD7F7544 3F39C318 D95E6480<br>FCCC7561 8A4A1741 68FA4223 ADCEDE07<br>200C25BE DBBC4855 C4CFB774 C5EC138C<br>0FEC1CEF D9DCECEC D3A5DAD1 01316C36<br>—— END LICENSE ——</p><p>—– BEGIN LICENSE —–<br>Nicolas Hennion<br>Single User License<br>EA7E-866075<br>8A01AA83 1D668D24 4484AEBC 3B04512C<br>827B0DE5 69E9B07A A39ACCC0 F95F5410<br>729D5639 4C37CECB B2522FB3 8D37FDC1<br>72899363 BBA441AC A5F47F08 6CD3B3FE<br>CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D<br>0CC513E7 52FF2333 9F726D2C CDE53B4A<br>810C0D4F E1F419A3 CDA0832B 8440565A<br>35BF00F6 4CA9F869 ED10E245 469C233E<br>—— END LICENSE ——</p><p>—– BEGIN LICENSE —–<br>Anthony Sansone<br>Single User License<br>EA7E-878563<br>28B9A648 42B99D8A F2E3E9E0 16DE076E<br>E218B3DC F3606379 C33C1526 E8B58964<br>B2CB3F63 BDF901BE D31424D2 082891B5<br>F7058694 55FA46D8 EFC11878 0868F093<br>B17CAFE7 63A78881 86B78E38 0F146238<br>BAE22DBB D4EC71A1 0EC2E701 C7F9C648<br>5CF29CA3 1CB14285 19A46991 E9A98676<br>14FD4777 2D8A0AB6 A444EE0D CA009B54<br>—— END LICENSE ——</p><p>—– BEGIN LICENSE —–<br>Alexey Plutalov<br>Single User License<br>EA7E-860776<br>3DC19CC1 134CDF23 504DC871 2DE5CE55<br>585DC8A6 253BB0D9 637C87A2 D8D0BA85<br>AAE574AD BA7D6DA9 2B9773F2 324C5DEF<br>17830A4E FBCF9D1D 182406E9 F883EA87<br>E585BBA1 2538C270 E2E857C2 194283CA<br>7234FF9E D0392F93 1D16E021 F1914917<br>63909E12 203C0169 3F08FFC8 86D06EA8<br>73DDAEF0 AC559F30 A6A67947 B60104C6<br>—— END LICENSE ——</p></blockquote><hr><blockquote><p><strong>如果可以，请尽可能支持正版软件。</strong><br><strong>如果可以，请尽可能支持正版软件。</strong><br><strong>如果可以，请尽可能支持正版软件。</strong></p></blockquote><hr><p>需要补充是，市面上也不乏很多其他优秀编辑利器，比如<code>Vim</code>，<code>Atom</code>，<code>VsCode</code> 诸此云云，还有些部分领域特用的“神器”，比如 Android Studio，Visual Studio 凡此等等；每一种工具中，都汇集了无数智慧，并充盈着优质工作理念，能够掌握其种精髓，对于效率的提升才更有裨益。同时，也该尝试兼用不同工具，综合其本身特点，扬长而避短，对于效率的提升和思维的改进，又将精进一步，岂不乐哉？<strong>生活，因主动折腾，将会变得更美好</strong>。就个人而言(职业：WEB前端开发者)，平常使 Sublime Text，来写前端代码，用 <strong>Atom</strong> 来写博文，借 <strong>VsCode</strong> 来写后台，各司其职的同时，彼此间配合相得映彰。对于编辑器的使用，有更好方案的朋友，不妨留言分享，感激不尽。</p><h3 id="您可能感兴趣-有用-的文章："><a href="#您可能感兴趣-有用-的文章：" class="headerlink" title="您可能感兴趣(/有用)的文章："></a><strong>您可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/">如何优雅地使用Sublime Text</a></li><li><a href="http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/" target="_blank" rel="noopener">新编码神器Atom使用纪要</a></li><li><a href="http://www.cnblogs.com/jadeboy/p/4165449.html" target="_blank" rel="noopener">sublime text 下的Markdown写作</a></li><li><a href="http://www.jeffjade.com/2015/08/28/2015-08-28-Write-Morkdown/" target="_blank" rel="noopener">SublimeText下写作利器之MarkdownEditing</a></li><li><a href="http://www.jeffjade.com/2016/03/17/2016-03-17-jade-tools/" target="_blank" rel="noopener">那些所倚靠的利器记载</a></li><li><a href="http://www.jeffjade.com/2016/03/11/2016-03-11-autohotkey/#" target="_blank" rel="noopener">Win下最爱效率神器:AutoHotKey</a></li><li><a href="http://www.jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="noopener">Win下必备神器之Cmder</a></li><li><a href="https://jeffjade.com/2017/05/01/122-how-to-better-use-google_chrome/">如何更好地运用 Chrome (Google)</a></li><li><a href="http://www.jeffjade.com/2017/01/23/118-chrome_awesome_plug-in/?me" target="_blank" rel="noopener">Awesome Chrome 插件集锦</a></li></ul>]]></content>
    
    <summary type="html">
    
      SublimeText，她作为强大而小巧，性感且快捷的编辑器，长时间以来，受众人青睐；对于个人来说，也是最常用代码编辑器，且没有之一（目前同时也会用 VsCode 和 Atom）。她，本身是免费的；但如要享受更多优秀功能，则需购买。对于只需免费功能的盆友，似乎还未养成购买软件的习惯；但对于她不时弹个框提醒你购买，并且顶部有未注册这样破坏美感的存在，也是颇为烦恼。当然，解决这问题也很简单：点开 Help，填入注册码即可。除了购买所得，也可使用好心人分享的注册码；而此篇就是记载那些分享出来的可用注册码。
    
    </summary>
    
      <category term="Share" scheme="https://jeffjade.com/categories/Share/"/>
    
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
      <category term="Tools" scheme="https://jeffjade.com/tags/Tools/"/>
    
      <category term="SublimeText" scheme="https://jeffjade.com/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>晚晴幽草说之 — 谈用心</title>
    <link href="https://jeffjade.com/2017/09/29/128-talking-about-movies-or-life/"/>
    <id>https://jeffjade.com/2017/09/29/128-talking-about-movies-or-life/</id>
    <published>2017-09-29T15:21:00.000Z</published>
    <updated>2017-10-07T15:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我靠，这本是两月以前就该敲打出来的文字；何致拖延至今？扪心拷问，非事物繁忙而懈怠，也未因考虑不周以搁浅。向来心心念念，于己而言，唯想法文字与美女好梦不可辜负；倘若不是下定决心，想趁着国庆 8 天长假，搞些许事情；加之今晚又来的失眠，想必这些点想法，跟每年 360 多个梦一般，即便醒来仍能想起，一两日后便踪迹全无。如此，什么原因？实是【认真】度不足罢了。而这也是正欲探讨的话题，虽然原本想法并非如此。</p><a id="more"></a><p><img src="https://image.nicelinks.site/distant-mountain.png" alt="晚晴幽草说之——谈用心"></p><p>近两个多月以来，我国陆续上演了诸多很有趣也热闹的事，缘起一部电影，你肯定知道，这里要说的就是它 —— 7月28上映，由吴京执导的军事题材电影《战狼2》。上影近 70 天以来，以不到 40 元票价，斩获近 57 亿元票房。8 月中上旬，睡前醒后，茶余饭后，必看其实时票房；偶在微博、朋友圈分享下它的战绩，也会引来一片品评 &amp; 点赞。直至超越美人鱼后，才稍解其毒；那一时间的大街小巷，争相讨论；诸多影迷，二刷三刷，风头可谓一时无两。火爆如此，堪称奇迹；在整个中国影史，要说逾其王者，想必也只有 1980 年李连杰先生那部《少林寺》了。可以从如下数据，稍稍回顾下它创造的奇迹：</p><blockquote><p>4小时破亿；3天破6亿；85小时破10亿；8天破20亿；10天超26亿；11天超30亿；12天超周星驰《美人鱼》33.9亿票房，荣登中国国影史票房冠军；16天超40亿；单日票房连续12天超过2亿，华语影史从未有过的成绩；单日最高票房4.1亿，创下的华语电影单日票房纪录 …… 直到此刻(2017-10-03)，仍在上映。</p></blockquote><p>这期间，网上涌现了成千上万，关于分析《战狼2》成功的缘由。可以肯定的是，吴京以及团队的用心，居功至伟。有对比才有好坏，优胜而劣汰，总体来讲群众的眼睛还是雪亮的。谁愿意天天看些播放豪华 PPT 式电影呢？谁又能对小人总得志那么心甘呢？谁又能对水军的侵扰保持情愿呢？嘿，这样的逆来顺受、不争不怒的闲士，其实挺多，毕竟国人众多，喜好各异；寻几个“大牌”明星，往哪里一扎堆，聊几句天，撕撕名牌，观众也能如云；何况剪辑处理成为“电影”呢？但<code>洛阳纸贵</code>，想必很多人都知道这个成语及背后的典故；原说西晋都城洛阳之纸，因大家争相传抄左思的作品《三都赋》，以至一时供不应求，货缺而贵。后喻作品为世所重，风行一时，流传甚广。其实，这样的对美赞赏的情怀，千年万年也不会变。《大圣归来》、《战狼1》等作品而引发“<strong>自来水</strong>”这个名词的出现，就是活生生的例证。</p><p>近期，流行一部网剧《白夜追凶》，很多朋友将其尊奉为年度十佳之首。对视频和游戏，笔者从来都是不屑一顾，今也特意买了某家视频网站 VIP 会员 以追之。并且和很多朋友一样，真心觉得很好，逢人就安利。对待真正觉得好的作品，就是如此，由衷希望能被更多人欣赏。从取利角度看，这也是为了自己：如果用心编制的剧本、加上认真演绎，所制作出的上好作品，都被劣质品所埋没，制作方不能取其利，编剧不能获其名，当真正用心的作品不被认可，当真正做事的人不被重视，乱象丛生时，哪去寻觅上好的国产剧？</p><p>电影、文学等文化产业，实是现实社会一大缩影。诚言，改革开放后的三十余年，祖国经济实力发展突飞猛进，日新而月异，这也正造就了吴京《战狼2》的底气。但，我们应清楚认识到，复兴之路尚还遥远，仍须加倍努力。且不说，科技行业，产生世界级影响，民众所知唯华为，大疆，阿里巴巴等些许企业；在这地球，五而有一就是为我华人；但就说文化输出，倒不是长他人志气，就目前来看，差欧美也还远也，即便日韩，许仍有力有不逮。个中缘由，当做和说？</p><p>就影视圈而言，多轻剧本而重演员，对于演员又多是轻演技而重流量，乱象已久，所以也算是有间接引发《战狼2》奇迹的嫌疑。类似本末倒置的怪象（实则是为取巧），行行业业，总体而言，鲜有例外。比如这对世人影响颇深的教育：<a href="https://blog.lovejade.cn/2016/02/26/speech-from-liangqichao-in-tsinghua.html" target="_blank" rel="noopener">梁启超在清华大学的演讲</a>一文中讲到：人类心理有知、情、意三部分。所以教育应分为<strong>智育、情育、意育三方面，智育要教到人不惑，情育要教到人不忧，意育要教到人不惧</strong>。但看如今教育，似乎是多半侧重了这<strong>智育</strong>，而行教时，轻能力而重分数，又内置了墨守成规，腐化不新；鲜有的进步，也是与时代之速变严重脱节。为了不使孩子输在起跑线上，各地衍生出的<code>补课</code>生意，更如雨后春笋，对于家长和孩子，真真是一种“横征暴敛”。三十年前，寒窗十年则可有一番所为；如今，至少须苦读二十有年；年与时驰间，科技越发进步，这个时长又当如何？为教者，常念“授人以鱼不如授人以渔”，却未行其实；自明“兴趣是最好的老师”，却不加倡导；积弊施教，事倍功半；于此，不得不问：有多少学生，毕业之后，不知自己理想之所在？有多少人，找工作时能不忧不惧？有多少人，工作之余，仍不知如何学习? ……</p><p><code>《韩非子·说难》</code>一文中讲到：<strong>凡说之务，在知饰所说之所矜而灭其所耻</strong>。大意是讲：游说的要诀，在于懂得粉饰对方自夸的事，而掩饰他觉得羞耻的事！即民间所说的“只拣好的说，不说坏的！”。毕竟良药苦口利于病，要做到“饰所说之所矜而灭其所耻”，真的很难；这就是说，在使得药效不失的同时，还得契合患者口味；即为“又想马儿好，又想马儿不吃草”；有人说换宝马不就行了？哈哈，宝马也得喝油耗电不是？</p><p>举个例子来说，你若想劝谏如今从教者，即大家常喊的“老师”，能行教有所道，施教能得法。这事儿就异常艰难。“天下熙熙,皆为利来；天下攘攘,皆为利往” ，面此大争之世，更是如此。而从事“老师”这行业，辛苦且利薄，但凡人才，如有更好选择，多不愿往。而如马云、俞敏洪，终也是选择在商业道路上越走越远。对于选择从事这份职业的人呢，已然实属不易，再劝解其要先不断完善自己，多少有些苛刻；况且呢，对一个长得帅的人，调侃其丑，多半逗人一乐；但对于相貌本就平平的人，就另当别论了；那人如果自信还罢了，如本就自卑，无异于予人一伤。再说说这因人施教，就更显得另人为难，生多师少，即便废寝忘食，精耕细作，那学校也是不会同意的；毕竟内在文化宗旨是：墨守成规般考试中分数的角逐。再谈谈师德，你想让跟多从业者的身份，轮作是“代教”么？坏人！你看，这事儿没法儿说，也不可说。</p><p>如上所言，所以很多时候，善意的劝诫，弄不好就是吃力不讨好的多言，这其中也是蛮有意思。于此情结，现而今流行一种对策，以对此症；将道理稍作处理，融于故事，娓娓道来，叙于众听；这样的技法是不是很熟悉？从外在情形看，引得一片手动点赞倒是有的，至于实际之效，未经考证，不做评判，也无心效仿。谈及这讲道理，还是<code>王小波</code>先生烹制的好，每每作读，深受启发。惜哉，…. 但这肩负道义的事儿，当得效法传承。</p><p>如果说，教师之工作在于，如何让学生成绩提高以进高校；如果说，学生的角色是，完成今日布置作业任务；如果说，导演的目标在于，如何快速制作出产品使票房能够大卖；如果说，演员的义务是，完成导演的要求以敷衍了事；如果说，员工的责任在于，加班加点完成当日之需求 …… 那么诸君以为如何？这些看似辛苦而费心的事，如果不带有深层次的用心思考，实际上不过是简单的机械劳动；过分沉溺于只做那些有形的东西，实际上是在逃避一些你没有意识到的问题。</p><p>笔者作为一位常与代码打交道的人，遇到过不少同行业者；其中不乏很多努力之人，其勤奋令人发指：早起晚归，废寝忘食，甚至于加班熬夜；但是呢，多半都是出于对工作的兢兢业业、勤勤恳恳。可是呢，一年三载，多是如此；工作年限与经验的年限，多半未成同比例增长。可是，当今之世，不管之于技术行业，还是别的，如这般心态，是为大谬；错误的心态，就算再努力也无法掩盖。有言常道：“<strong>天下武功，唯快不破</strong>”；唯有坚持用去心学习，使技能随时逝而增，面对工作需求可快速而破，早点下班堪有时以研习 …… 如此可打造优质循环，方可立于不败之地。如若不然呢？当明白：出来混早晚是须还的；不用心以学习，就须用力去加班。未用心而求学求知，就得费时耗力来寻觅工作。</p><p>有言说：“<strong>你必须非常努力, 才能看起来毫不费力! ,你必须暗自努力, 才能在人前显得轻松如意!</strong>”。觉得这前半句，须当稍作修改为：“<strong>你必须非常用心, 才能看起来毫不费心!</strong>”。请：不要用战术的勤奋，来掩盖战略上的懒惰。心若懒了，做什么会有进步？献此碎念，与君共勉。</p><p>以上：于深圳 17-09-29（~10-04）.</p><h3 id="您可能感兴趣-有用-的文章："><a href="#您可能感兴趣-有用-的文章：" class="headerlink" title="您可能感兴趣(/有用)的文章："></a><strong>您可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/">疆来有你，从心出发</a></li><li><a href="https://jeffjade.com/2015/07/05/2015-07-05-thought-of-life/">写在人生边上之守心</a></li><li><a href="https://jeffjade.com/2016/07/24/111-talk-about-work-arena/">写于职业边上</a></li><li><a href="https://jeffjade.com/2015/04/12/2015-04-12-thought-choose-effort/">努力，思考，选择</a></li><li><a href="https://jeffjade.com/2015/02/02/2015-02-02-thoughtof-overtime-work/">关于加班这件事儿的随想</a></li><li><a href="https://jeffjade.com/2016/04/16/105-talk-about-chuanqidazhanggui/">《传奇大掌柜》微说</a></li><li><a href="https://jeffjade.com/2017/04/30/121-sigh-life/">胜天半子，其又奈何？</a></li><li><a href="https://jeffjade.com/2015/01/10/2015-01-10-why-indulge/">为什么很多人沉迷于电脑(虚幻)</a></li><li><a href="https://jeffjade.com/2014/12/27/2014-12-27-readbook-thoughts/">阅《黄金时代》另类感</a></li></ul>]]></content>
    
    <summary type="html">
    
      有言说：“你必须非常努力, 才能看起来毫不费力! ,你必须暗自努力, 才能在人前显得轻松如意!”。觉得这前半句，须当稍作修改为：“你必须非常用心, 才能看起来毫不费心!”。请：不要用战术的勤奋，来掩盖战略上的懒惰。
    
    </summary>
    
      <category term="Movie" scheme="https://jeffjade.com/categories/Movie/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Movie" scheme="https://jeffjade.com/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>与时俱进版前端资源教程</title>
    <link href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/"/>
    <id>https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/</id>
    <published>2017-09-28T13:10:00.000Z</published>
    <updated>2018-01-30T13:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，前端发展如火如荼，日新月异，而且很长一段时间内都将如此。这份由<a href="https://jeffjade.com">晚晴幽草轩轩主</a>正在维护的教程列表；旨在为<code>前端学习</code>、 <code>技能提升</code>、 <code>视野扩展</code>、 <code>资料查找</code>等行个方便。将会在日常工作探索、学习中，持续保持更新，增新优之章，除旧失之文；尽可能使得这份列表保持简练，以避免信息过重且冗杂；望其能在浩如烟海的讯息中，堪有所用。</p><a id="more"></a><p><img src="https://image.nicelinks.site/frontend-ability.jpg" alt="frontend-ability"></p><h3 id="目标与哲学"><a href="#目标与哲学" class="headerlink" title="目标与哲学"></a><strong>目标与哲学</strong></h3><p><a href="https://www.jeffjade.com/2016/03/30/104-front-end-tutorial/" target="_blank" rel="noopener">『引』最全前端资源汇集</a>，这是一年多以前，偶遇的一份号称最全的资源教程(前端涉及的所有知识体系)；当时也是被“叹为观止”，就顺手 <code>Fork</code> 了来，并悉心做“二次维护”；至今已有条目近 80 项，直接链接达千余；这还是在不断删减情况之下，所存留之数。</p><p>你知道，这是一个属于信息的大时代。然而面对浩如烟海信息，如见群星之于天际，铺满和毫无之间，没什么差别；所以对于各色信息，需要人为刻意去甄别 &amp; 整理；由此就延伸出各种 awesome list，譬如 <a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a> ；随着时间的推移，你会发现这些 list 将不断膨胀；当 list 过了一定界限，就又会变成负重信息；由此，也就不得不将衍生出 awesome awesome… awesome list。</p><p>当然，我也赞成采取一些方法，比如更好地使用 Google，去合理搜索以得到想要的结果，以规避如上所言及的痛点。然而，真实的情况并不乐观。且不说，并不是所有人都能地运用它(或便捷地运用)；即便能很好使用，对优质信息内容，并不能保证有可靠 SEO 保证；而且，但对于很多用户，以英文搜索，跟习惯和喜好都不怎么对口；而它对于中文的收录也尚需加强。如果，使用其他某些引擎，我不信你没被烦恼过；比如上古的网页、陈旧的内容、过期的信息、横飞的广告、恶意的聚合、糟糕的排版 …..</p><p>所以，信息的整理仍需去做，比如对这<strong>技术资源教程</strong>得收集与甄别；于人于己，这都大有裨益。<code>掘金</code>、<code>开发者头条</code>、<code>推酷</code>等的诞生，就是鲜明例证；只不过它们是开发出平台，然后依托于众人的拾柴。这是很值得肯定的存在，平台、分享者、阅读者三方完美实现共赢。但，这可以集聚不断新生的文章，并根据众人主观意愿，能给予一定性甄别(通过<code>赞</code>这种方式)；但，存在的信息也还是那么繁多也杂，痛点并没完全被解除；所以仍需对此苦下功夫，予以探究。以下这份所维护的关于<strong>前端资源</strong>列表，就是对其一种尝试。</p><h3 id="分类目录"><a href="#分类目录" class="headerlink" title="分类目录"></a><strong>分类目录</strong></h3><h4 id="🐉-The-Future"><a href="#🐉-The-Future" class="headerlink" title="🐉 The Future"></a>🐉 The Future</h4><ul><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/ai-ml-dl-tutorial.md" target="_blank" rel="noopener"><strong>AI-ML-DL</strong></a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/pwa-tutorial.md" target="_blank" rel="noopener"><strong>Pwa</strong></a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/webAssembly.md" target="_blank" rel="noopener">WebAssembly</a></li></ul><h4 id="🎨-Front-End-Tutorial"><a href="#🎨-Front-End-Tutorial" class="headerlink" title="🎨 Front-End Tutorial"></a>🎨 Front-End Tutorial</h4><ul><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/front-end-tutorial.md" target="_blank" rel="noopener">大前端综合</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/ecmascript-tutorial.md" target="_blank" rel="noopener">EcmaScript</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/html-tutorial.md" target="_blank" rel="noopener">Html(5)</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/css3-tutorial.md" target="_blank" rel="noopener">Css(3)</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/framework-news.md" target="_blank" rel="noopener">Framework News</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/vue-tutorial.md" target="_blank" rel="noopener">Vue</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/react-tutorial.md" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/angular-tutorial.md" target="_blank" rel="noopener">Angular</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/webpack-tutorial.md" target="_blank" rel="noopener">Webpack</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/gulp-tutorial.md" target="_blank" rel="noopener">Gulp</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/ui-tutorial.md" target="_blank" rel="noopener">UI</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/optimization-tutorial.md" target="_blank" rel="noopener">Optimization</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/testing-tutorial.md" target="_blank" rel="noopener">Testing</a></li></ul><h4 id="👽-Back-End-Tutorial"><a href="#👽-Back-End-Tutorial" class="headerlink" title="👽 Back-End Tutorial"></a>👽 Back-End Tutorial</h4><ul><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/nodejs-tutorial.md" target="_blank" rel="noopener">Nodejs</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/nginx-tutorial.md" target="_blank" rel="noopener">Nginx</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/mongodb-tutorial.md" target="_blank" rel="noopener">Mongodb</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/redis-tutorial.md" target="_blank" rel="noopener">Redis</a></li></ul><h4 id="🎣-Front-Back-End-Tutorial"><a href="#🎣-Front-Back-End-Tutorial" class="headerlink" title="🎣 Front-Back-End Tutorial"></a>🎣 Front-Back-End Tutorial</h4><ul><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/tools-tutorial.md" target="_blank" rel="noopener">Tools</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/chrome-tutorial.md" target="_blank" rel="noopener">Chrome</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/git-tutorial.md" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/docker-tutorial.md" target="_blank" rel="noopener">Docker</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/graphql-tutorial.md" target="_blank" rel="noopener">GraphQL</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/web-security-tutorial.md" target="_blank" rel="noopener">Web Security</a></li></ul><h4 id="🌷-Other-Wizards-List"><a href="#🌷-Other-Wizards-List" class="headerlink" title="🌷 Other Wizards List"></a>🌷 Other Wizards List</h4><ul><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/front-end-channel.md" target="_blank" rel="noopener">Front-end Channel</a></li><li><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/interesting-tutorial.md" target="_blank" rel="noopener">Interesting</a></li></ul><p>在本文首段就有说明，这份 <a href="https://github.com/nicejade/nice-front-end-tutorial" target="_blank" rel="noopener">nice-front-end-tutorial</a> 的初衷：旨在为<code>前端学习</code>、 <code>技能提升</code>、 <code>视野扩展</code>、 <code>资料查找</code>等行个方便。将会在日常工作探索、学习中，持续保持更新，增新优之章，除旧失之文；尽可能使得这份列表保持简练，以避免信息过重且冗杂；望其能在浩如烟海的讯息中，堪有所用。需要补充的是，这份列表的<strong>添加</strong>时机是<code>遇</code>，而不是<code>觅</code>；将会完善脚本去验证链接的有效性；遇到更好的相关内容，将人为择优而录；两者协同以<strong>删减更新</strong>。还有就是，自身也需要不断学习新的技术，从而更好去解决问题。所以，这份 List 也是将秉承如此态度 —— 与时俱进。</p><p>以上，就是平时所做的“善事”一种思想上略の加阐述(你可以看到，Github上 对于此仓库的更新，也算勤劳)。但，这并非此篇全部。还有需要补充的是，分享一枚新作：中文名<code>倾城之链</code>，英文则是：<strong>NICE LINKS</strong>，地址为： <a href="https://nicelinks.site" target="_blank" rel="noopener">https://nicelinks.site</a>  。这也是对之前所言及的痛点，另一种更用心在尝试的解决方案；具体设计理念，将后续阐明，敬请期待😊。</p><p>以上：于深圳 17-09-28.</p><p><a class="fancybox nicejade-gg" href="http://click.dji.com/AI0P4L08QwIeyaK1Pi7C?pm=ad_image" target="_blank"><img src="https://u.djicdn.com/uploads/ad_image_file/file/499/728x90_copy.jpg"></a></p><hr><h3 id="您可能感兴趣-有用-的文章："><a href="#您可能感兴趣-有用-的文章：" class="headerlink" title="您可能感兴趣(/有用)的文章："></a><strong>您可能感兴趣(/有用)的文章：</strong></h3><ul><li><a href="//jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a></li><li><a href="http://www.jeffjade.com/2016/03/17/2016-03-17-jade-tools/" target="_blank" rel="noopener">那些所倚靠的利器记载</a></li><li><a href="https://jeffjade.com/2017/05/01/122-how-to-better-use-google_chrome/">如何更好地运用 Chrome (Google)</a></li><li><a href="http://www.jeffjade.com/2017/01/23/118-chrome_awesome_plug-in/?me" target="_blank" rel="noopener">Awesome Chrome 插件集锦</a></li><li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></li><li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/">如何写一手漂亮的Vue</a></li><li><a href="//jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a></li></ul>]]></content>
    
    <summary type="html">
    
      持续更新的优质 Web 前端教程
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://jeffjade.com/tags/Vue/"/>
    
      <category term="Gulp" scheme="https://jeffjade.com/tags/Gulp/"/>
    
      <category term="Webpack" scheme="https://jeffjade.com/tags/Webpack/"/>
    
      <category term="Tools" scheme="https://jeffjade.com/tags/Tools/"/>
    
      <category term="Chrome" scheme="https://jeffjade.com/tags/Chrome/"/>
    
      <category term="React" scheme="https://jeffjade.com/tags/React/"/>
    
      <category term="Angular" scheme="https://jeffjade.com/tags/Angular/"/>
    
      <category term="Pwa" scheme="https://jeffjade.com/tags/Pwa/"/>
    
      <category term="Git" scheme="https://jeffjade.com/tags/Git/"/>
    
      <category term="Markdown" scheme="https://jeffjade.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>疆来有你，从心出发</title>
    <link href="https://jeffjade.com/2017/08/26/126-start-from-the-heart/"/>
    <id>https://jeffjade.com/2017/08/26/126-start-from-the-heart/</id>
    <published>2017-08-26T04:00:00.000Z</published>
    <updated>2018-05-28T16:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>“过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾…… 但是，人生最后悔的事情就是：我本可以”。过去的一两年间，总以此句为座右铭，激励自己白昼奋斗至黑夜、强驹折腾成老马；如今想来，这句话是存在问题的：过一个平凡无趣的人生，这事儿真的很容易么？年与时驰，意与岁去间，在不断被成长，想必你也会越发明白：现代人的字典里可能鲜有“容易”二字。</p><a id="more"></a><p><img src="https://image.nicelinks.site/nice-ocean.jpeg" alt="大西洋泛舟(来源：天空之城)"></p><p>纵观历史，早已从局部的分分合合，烈演成全球的乱乱平平；人性的好奇与贪婪，从未停止；而科技却好似没有尽头，且飞速发展；人类的寿命和健康，都可以在科技的变迁中，日趋向好；如果大胆去预测，有朝那么一日，实现永生也绝非不可能。在越加长寿的奥义里，越发反哺科技的飞跃；百千年后，生灵间的博弈，岂会仅局限于“天下人间”？那取而代之的将是【宇宙苍穹】…… 自然人，机器人，外星人，以及不知道什么人，在宇宙暗黑森林中遏制、掠夺、厮杀，变态级的技术，难以想象的物理或非物理攻击，银河为之颤抖，黑洞因之不存 ….. 直至如刘慈欣《三体》中描绘的一样：宇宙重启；然后又是一度循环，继而横出类似“盘X开天”。当然，这只是能作为茶余饭后的谈资段子，毕竟千万年后的事儿，与我们何干，也干系不了不是？但，三年五年之后的世界，必须开始有所考量！</p><p>2016 年 3 月，谷歌公司的围棋程序 <code>AlphaGo</code> 战胜了世界冠军李世石；2017 年 5 月，<code>AlphaGo2</code> 完虐世界第一<strong>柯洁</strong>。从中你应该也意识到：世界正处在一个前所未有的大变局：<strong>机器人、大数据、自动化、人工智能正在变得比人类更强大。在可预见的将来，技术最终将淘汰人类（大部分）。</strong> 技术变革已经导致了人类社会的重构，且还在继续。绝大部分的人，没机会参与这个浪潮，只能是去接受那被安排的命运。如何才能成为一个可以把握自己命运的幸存者，以屹立于这个瞬息万变的年代，是你我都该深思的话题。<code>阮一峰</code>对此有很多自己思考，具体在他的<a href="https://survivor.ruanyifeng.com/index.html" target="_blank" rel="noopener">《未来世界的幸存者》</a>系列文章中有所体现，值得一读。</p><p>将未来的世界，那时科技将越发先进，虽然人类都能享受它带来的便利，却不能改变贫富差距愈发拉大的事实。那是属于资源或技术拥有者的领地，即便是现在已然显露无疑。如果说现在只能依靠从事一些偏体力型工作，以挣扎在社会的“中下层”；那么将来的某天，处境将更是步履维艰。除非，从这一刻开始，更早看清现实；工作之余，挤出精力，投资明天，更多的去学习非精确性事物(只有如此，才能尽可能免被机器所替代)；并合理的控制深度与广度，避免轻易被同人类所替代。</p><p>欲要栖身、屹立在将来的天地，最好莫过于：<strong>从心出发</strong>。要知道，这是一个充满不服、变革、颠覆的大时代；银行你不改变，那就改变银行(马云)。面对被(稍显)落后的教育制度，被(略显)噬人的医疗医道，被(微显)迟缓的政策法令….. 兴许还背负着娶妻(嫁人)、生子、养老、房贷、孩子教育等重重压力….. “Don’t let the noise of others’ opinions drown out your own inner voice.” ——Steve Jobs. 我们该从心底里知道自己的想要，秉承一颗上进心，保持自己的好奇心，跟随自己的偏爱之心，勇敢向前，披荆斩棘；在万千跟随的血海中，杀出属于自己的路。赢了，收获可见的自信与资源；输了，也能赢得技艺和经验；都能作为很好的资本，使得可以再次冲锋向前。从心出发，成功永在：至少我们按照自己所想，过活着大半个人生。</p><p>在仅有一次的人生里，是庸庸碌碌以求个安安稳稳，还是在迎风逆浪中选择决不妥协，相信你心中自有答案，遵从内心，做真正的自己，现在，机会在这里：<strong>大疆创新</strong> 2018 校园招聘盛大开启，具远见者，方识天下，不忘初心，梦想必达，你准备好迎接挑战了么，是时候该你登场了。关注<strong>大疆招聘</strong>、<code>DJI大疆创新</code>微信公众号，获取最新资讯；或者注册并登录<a href="https://we.dji.com?from=jeffjade.com" target="_blank" rel="noopener">大疆招聘官网</a>，填写完整简历内容，开始你的坨疆历程；当然，也可以发送简历至<a href="mailto:yunjeff@163.com" target="_blank" rel="noopener">yunjeff@163.com</a>，有一种招聘渠道叫“内部推荐”。</p><p><img src="https://image.nicelinks.site/dji-recruit.jpeg" alt="疆来有你，从心出发"></p><p>深圳市大疆创新科技有限公司( 简称“大疆” ) ，总部坐落于深圳市南山区科技园，在美国、德国、日本和香港设立了分支机构； 以“The Future of Possible（未来无所不能）”为主旨理念，致力于成为全球飞行影像系统先驱。全球增速最快的科技公司之一；是全球市场占有率第一的航拍无人机研发和制造商，详细信息，请参加<a href="https://www.dji.com/?from=jeffjade.com" target="_blank" rel="noopener">大疆官网</a>或者如下简介：</p><blockquote><p>2006 年创立至今，公司目前全球员工人数超过 12000 人，除中国大陆地区外，在美国、德国、荷兰、日本及香港设有分支机构，客户遍布全球百余个国家和地区。技术创新是大疆的发展命脉。以梦想为源动力，凭借精湛的技术力量和高端人才储备，大疆从商用自主飞行控制系统起步，填补国内外多项技术空白，之后又陆续推出了飞行控制系统、云台系统、多旋翼飞行器、小型多旋翼一体机等产品系列，目前占据全球70% 的市场份额，在全球同行业中独占鳌头，重新定义“中国制造”的内涵。来自大疆的一体化小型多旋翼飞行器系列产品已成功走向市场，“到手即飞”的简易操作使每个人都能轻松享受前所未有的航拍体验。大疆业已成为全球顶尖的飞行影像系统研发和生产商，通过完美的空中影像方案，释放人类的双眼，帮助人们从全新的角度审视世界。</p><p>大疆极其注重文化的锤炼、塑造和输出，推崇“激极尽志、求真品诚”的价值观，力图以梦想为动力，开辟创新、拼搏、极致的创作净土，吸引和影响更多志同道合的人。人才是大疆发展过程中的中枢力量。大疆正在通过创新手段，推动形成适应科技创新的全新人才生态圈。大疆试图最大程度整合珠三角（含港澳）地区的产业集群优势和学术资源优势，吸引全球最优秀的科技人才汇聚此地。大疆正全力打造一项全球最具观赏性的大学生机器人比赛：<a href="https://www.robomaster.com/?from=jeffjade.com" target="_blank" rel="noopener">RoboMasters</a>，旨在挖掘、培养工程技术精英，掀起全民科技热潮，助力深圳打造“中国硅谷”。</p></blockquote><p>每一段旅程，都是新的开始；漫短的人生中，只有更多的去经历，去探索，去体验，才能欣赏更多风景，感受更多美妙，以全人生之丰富多彩。<a href="https://we.dji.com/?from=jeffjade.com" target="_blank" rel="noopener">未来无所不能</a>，是时候<a href="https://www.skypixel.com/?from=jeffjade.com" target="_blank" rel="noopener">换个角度看这个世界</a>。这里(大疆)不仅青睐校招，对社招同样兴趣浓厚；不仅局限于技术，还有产品、设计、运营、市场销售等等等等，具体详情也可参见<a href="https://www.lagou.com/gongsi/21775.html" target="_blank" rel="noopener">DJI大疆创新-拉勾</a>；还等什么？如感兴趣，尽快、尽情砸出你的简历，和 DJI 一起，激极尽志，追逐梦想；挥洒智慧，不负韶华。<strong>疆(将)来有你，从心出发</strong>。</p><hr><blockquote><p>你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己内心的声音。最重要的是，勇敢的去追随自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其他一切都是次要。你是否已经厌倦了为别人而活?不要犹豫，这是你的生活，你拥有绝对的自主权来决定如何生活，不要被其他人的所作所为所束缚。给自己一个培养自己创造力的机会，不要害怕，不要担心。过自己选择的生活，做自己的老板! ——史蒂夫·乔布斯</p></blockquote><p>于 2017-08-26 @深圳.南山</p>]]></content>
    
    <summary type="html">
    
      在仅有一次的人生里，是庸庸碌碌以求个安安稳稳，还是在迎风逆浪中选择决不妥协，相信你心中自有答案，遵从内心，做真正的自己，现在，机会在这里：大疆创新 2018 校园招聘盛大开启，具远见者，方识天下，不忘初心，梦想必达，你准备好迎接挑战了么，是时候该你登场了
    
    </summary>
    
      <category term="Thought" scheme="https://jeffjade.com/categories/Thought/"/>
    
    
      <category term="Thought" scheme="https://jeffjade.com/tags/Thought/"/>
    
      <category term="Share" scheme="https://jeffjade.com/tags/Share/"/>
    
      <category term="Toss" scheme="https://jeffjade.com/tags/Toss/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 打包优化之速度篇</title>
    <link href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/"/>
    <id>https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/</id>
    <published>2017-08-12T10:00:00.000Z</published>
    <updated>2018-05-10T16:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前文 <a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a>中，对如何减小 <code>Webpack</code> 打包体积，做了些探讨；当然，那些法子对于打包速度的提升，也是大有裨益。然而，打包速度之于<strong>开发体验</strong>和<strong>及时构建</strong>，相当重要；所以有必要对其做更为深入的研究，以便完善工作流，这就是本文存在的缘由。</p><a id="more"></a><p><img src="https://image.nicelinks.site/webpack.png" alt="Webpack Package optimization"></p><hr><p>随着时间的推移，<code>Webpack</code> 也在不断的优化迭代；截至目前，已经更新至 <code>v4.8.*</code>；在 <code>Webpack4</code> 这个版本，她在原有基础上，做了很多优化，也引入了颇多的新特性。在新的版本中，将获得更多模块类型及 对 <code>.mjs</code> 的支持，<strong>更好的默认值</strong>、更为简洁的<strong>模式设置</strong>、更加<strong>智能</strong>的来分割 <code>Chunk</code>，还新增的 <code>splitChunks</code> 来自定义分割代码块，诸此等等。在升级至新版 <code>Webpack</code> 的项目中，在包的<code>构建速度</code>、<code>代码块体积 &amp; 数量</code>、以及<code>运行效率</code>，都会有一个质的飞跃；关于对 <code>Webpack</code> 最新咨询与教程资源，推荐关注 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/webpack-tutorial.md" target="_blank" rel="noopener">Webpack Tutorial</a>。经过诸多次尝试和探究后，已将其各种配置、优化经验，融入 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.prod.conf.js" target="_blank" rel="noopener">Vue Boilerplate Template</a> 中，并且附有注解说明，希望可以帮助到正准备升级优化 <code>Webpack</code> 的朋友们，当然也欢迎提出你宝贵的意见和建议(<strong>Update@2018-05-10</strong>) 。</p><hr><h2 id="减小文件搜索范围"><a href="#减小文件搜索范围" class="headerlink" title="减小文件搜索范围"></a><strong>减小文件搜索范围</strong></h2><p>在使用实际项目开发中，为了提升开发效率，很明显你会使用很多成熟第三方库；即便自己写的代码，模块间相互引用，为了方便也会使用相对路劲，或者别名(<code>alias</code>)；这中间如果能使得 <code>Webpack</code> 更快寻找到目标，将对打包速度产生很是积极的影响。于此，我们需要做的即：减小文件搜索范围，从而提升速度；实现这一点，可以有如下两法：</p><h3 id="配置-resolve-modules"><a href="#配置-resolve-modules" class="headerlink" title="配置 resolve.modules"></a><strong>配置 resolve.modules</strong></h3><p>Webpack的<code>resolve.modules</code>配置模块库（即 <em>node_modules</em>）所在的位置，在 js 里出现 <code>import &#39;vue&#39;</code> 这样不是相对、也不是绝对路径的写法时，会去 <em>node_modules</em> 目录下找。但是默认的配置，会采用向上递归搜索的方式去寻找，但通常项目目录里只有一个 <em>node_modules</em>，且是在项目根目录，为了减少搜索范围，可以直接写明 <code>node_modules</code> 的全路径；同样，对于别名(<code>alias</code>)的配置，亦当如此：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> <span class="params">(dir)</span> &#123;</span></span><br><span class="line">  <span class="keyword">return</span> path.<span class="keyword">join</span>(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="built_in">resolve</span>: &#123;</span><br><span class="line">    extension<span class="variable">s:</span> [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    module<span class="variable">s:</span> [</span><br><span class="line">      <span class="built_in">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">      <span class="built_in">resolve</span>(<span class="string">'node_modules'</span>)</span><br><span class="line">    ],</span><br><span class="line">    alia<span class="variable">s:</span> &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.common.js'</span>,</span><br><span class="line">      <span class="string">'src'</span>: <span class="built_in">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'assets'</span>: <span class="built_in">resolve</span>(<span class="string">'src/assets'</span>),</span><br><span class="line">      <span class="string">'components'</span>: <span class="built_in">resolve</span>(<span class="string">'src/components'</span>),</span><br><span class="line">      // ...</span><br><span class="line">      <span class="string">'store'</span>: <span class="built_in">resolve</span>(<span class="string">'src/store'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要额外补充一点的是，这是 Webpack2.* 以上的写法。在 1.* 版本中，使用的是 <code>resolve.root</code>，如今已经被弃用为 <code>resolve.modules</code>；同时被弃用的还有<code>resolve.fallback</code>、<code>resolve.modulesDirectories</code>。</p><h3 id="设置-test-amp-include-amp-exclude"><a href="#设置-test-amp-include-amp-exclude" class="headerlink" title="设置 test &amp; include &amp; exclude"></a><strong>设置 test &amp; include &amp; exclude</strong></h3><p><code>Webpack</code> 的装载机(loaders)，允许每个子项都可以有以下属性：</p><blockquote><p><strong>test：</strong>必须满足的条件（正则表达式，不要加引号，匹配要处理的文件）<br><strong>exclude：</strong>不能满足的条件（排除不处理的目录）<br><strong>include：</strong>导入的文件将由加载程序转换的路径或文件数组（把要处理的目录包括进来）<br><strong>loader：</strong>一串“！”分隔的装载机（2.0版本以上，”-loader”不可以省略）<br><strong>loaders：</strong>作为字符串的装载器阵列</p></blockquote><p>对于<code>include</code>，更精确指定要处理的目录，这可以减少不必要的遍历，从而减少性能损失。同样，对于已经明确知道的，不需要处理的目录，则应该予以排除，从而进一步提升性能。假设你有一个第三方组件的引用，它肯定位于<em>node_modules</em>，通常它将有一个 src 和一个 dist 目录。如果配置 <code>Webpack</code> 来排除 <em>node_modules</em>，那么它将从 dist 已经编译的目录中获取文件。否则会再次编译它们。故而，合理的设置 include &amp; exclude，将会极大地提升 <code>Webpack</code> 打包优化速度，比如像这样：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  preLoaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'eslint'</span>,</span><br><span class="line">      <span class="keyword">include</span>: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">      <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">      loader: <span class="string">'svgo?'</span> + JSON.stringify(svgoConfig)，</span><br><span class="line">      <span class="keyword">include</span>: [resolve(<span class="string">'src/assets/icons'</span>)],</span><br><span class="line">      <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">      <span class="keyword">include</span>: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">      <span class="keyword">exclude</span>: <span class="regexp">/node_modules\/(?!(autotrack|dom-utils))|vendor\.dll\.js/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">      loader: <span class="string">'url'</span>,</span><br><span class="line">      <span class="keyword">exclude</span>: <span class="regexp">/assets\/icons/</span>,</span><br><span class="line">      query: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增强代码代码压缩工具"><a href="#增强代码代码压缩工具" class="headerlink" title="增强代码代码压缩工具"></a><strong>增强代码代码压缩工具</strong></h2><p><code>Webpack</code> 默认提供的 <code>UglifyJS</code> 插件，由于采用单线程压缩，速度颇慢 ；推荐采用 <a href="https://www.npmjs.com/package/webpack-parallel-uglify-plugin" target="_blank" rel="noopener">webpack-parallel-uglify-plugin</a> 插件，她可以并行运行 UglifyJS 插件，更加充分而合理的使用 <code>CPU</code> 资源，这可以大大减少的构建时间；当然，该插件应用于生产环境而非开发环境，其做法如下，<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">new</span> <span class="string">webpack.optimize.UglifyJsPlugin(&#123;</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    warnings:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  sourceMap:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>替换如上自带的 <code>UglifyJsPlugin</code> 写法为如下配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">ParallelUglifyPlugin</span> <span class="string">=</span> <span class="string">require('webpack-parallel-uglify-plugin');</span></span><br><span class="line"><span class="string">new</span> <span class="string">ParallelUglifyPlugin(&#123;</span></span><br><span class="line"><span class="attr">  cacheDir:</span> <span class="string">'.cache/'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  uglifyJS:</span><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    output:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      comments:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    compress:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      warnings:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>当然也有其他同类型的插件，比如：<a href="https://www.npmjs.com/package/webpack-uglify-parallel" target="_blank" rel="noopener">webpack-uglify-parallel</a>，但根据自己实践效果来看，并没有 <code>webpack-parallel-uglify-plugin</code> 表现的那么卓越，有兴趣的朋友，可以更全面的做下对比，择优选用。需要额外说明的是，<code>webpack-parallel-uglify-plugin</code> 插件的运用，会相对 <code>UglifyJsPlugin</code> 打出的包，看起来略大那么一丢丢(其实可以忽略不计)；如果在你使用时也是如此，那么在打包速度跟包体积之间，你应该有自己的抉择。</p><h2 id="用-Happypack-来加速代码构建"><a href="#用-Happypack-来加速代码构建" class="headerlink" title="用 Happypack 来加速代码构建"></a><strong>用 Happypack 来加速代码构建</strong></h2><p>你知道，<code>Webpack</code> 中为了方便各种资源和类型的加载，设计了以 <code>loader</code> 加载器的形式读取资源，但是受限于 <code>nodejs</code> 的编程模型影响，所有的 <code>loader</code> 虽然以 <code>async</code> 的形式来并发调用，但是还是运行在单个 node 的进程，以及在同一个事件循环中，这就直接导致了些问题：当同时读取多个loader文件资源时，比如｀babel-loader`需要 transform 各种jsx，es6的资源文件。在这种同步计算同时需要大量耗费 cpu 运算的过程中，node的单进程模型就无优势了，而 <a href="https://github.com/amireh/happypack" target="_blank" rel="noopener">Happypack</a> 就是针对解决此类问题而生的存在。</p><p><img src="https://image.nicelinks.site/happypack-principle.png" alt="Webpack-Happypack"></p><p><code>Happypack</code> 的处理思路是：将原有的 <code>webpack</code> 对 <code>loader</code> 的执行过程，从单一进程的形式扩展多进程模式，从而加速代码构建；原本的流程保持不变，这样可以在不修改原有配置的基础上，来完成对编译过程的优化，具体配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">HappyPack</span> <span class="string">=</span> <span class="string">require('happypack');</span></span><br><span class="line"><span class="string">var</span> <span class="string">happyThreadPool</span> <span class="string">=</span> <span class="string">HappyPack.ThreadPool(&#123;</span> <span class="attr">size:</span> <span class="string">os.cpus().length</span> <span class="string">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  loaders:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">/\.js[x]?$/,</span></span><br><span class="line"><span class="attr">      include:</span> <span class="string">[resolve('src')],</span></span><br><span class="line"><span class="attr">      exclude:</span> <span class="string">/node_modules/,</span></span><br><span class="line"><span class="attr">      loader:</span> <span class="string">'happypack/loader?id=happybabel'</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">]</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">[</span></span><br><span class="line">  <span class="string">new</span> <span class="string">HappyPack(&#123;</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">'happybabel'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    loaders:</span> <span class="string">['babel-loader'],</span></span><br><span class="line"><span class="attr">    threadPool:</span> <span class="string">happyThreadPool,</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    verbose:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&#125;)</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><p>可以研究看到，通过在 <code>loader</code> 中配置直接指向 <code>happypack</code> 提供的 loader，对于文件实际匹配的处理 loader，则是通过配置在 <code>plugin</code> 属性来传递说明，这里 happypack 提供的 loader 与 plugin 的衔接匹配，则是通过id=happybabel来完成。配置完成后，laoder的工作模式就转变成了如下所示：</p><p><img src="https://image.nicelinks.site/webpack-happypack.png" alt="Webpack-Happypack"></p><p><code>Happypack</code> 在编译过程中，除了利用多进程的模式加速编译，还同时开启了 <code>cache</code> 计算，能充分利用缓存读取构建文件，对构建的速度提升也是非常明显的；更多关于 <code>happyoack</code> 个中原理，可参见 @淘宝前端团队(FED) 的这篇：<a href="https://taobaofed.org/blog/2016/12/08/happypack-source-code-analysis/" target="_blank" rel="noopener">happypack 原理解析</a>。如果你使用的 <code>Vue.js</code> 框架来开发，也可参考 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.base.conf.js" target="_blank" rel="noopener">vue-webpack-happypack</a> 相关配置。</p><h2 id="设置-babel-的-cacheDirectory-为true"><a href="#设置-babel-的-cacheDirectory-为true" class="headerlink" title="设置 babel 的 cacheDirectory 为true"></a><strong>设置 babel 的 cacheDirectory 为true</strong></h2><p><a href="https://github.com/babel/babel-loader" target="_blank" rel="noopener">babel-loader</a> is slow! 所以不仅要使用<code>exclude</code>、<code>include</code>，尽可能准确的指定要转化内容的范畴，而且要充分利用缓存，进一步提升性能。<code>babel-loader</code> 提供了 <code>cacheDirectory</code>特定选项（默认 <code>false</code>）：设置时，给定的目录将用于缓存加载器的结果。</p><p>未来的 <code>Webpack</code> 构建将尝试从缓存中读取，以避免在每次运行时运行潜在昂贵的 <code>Babel</code> 重新编译过程。如果值为空（loader: ‘babel-loader?cacheDirectory’）或<code>true</code>（loader: babel-loader?cacheDirectory=true），<strong><em>node_modules/.cache/babel-loader</em></strong> 则 <em>node_modules</em> 在任何根目录中找不到任何文件夹时，加载程序将使用默认缓存目录或回退到默认的OS临时文件目录。实际使用中，效果显著；配置示例如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    loader: <span class="string">'babel-loader?cacheDirectory=true'</span>,</span><br><span class="line">    <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="keyword">include</span>: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  ... ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="设置-noParse"><a href="#设置-noParse" class="headerlink" title="设置 noParse"></a><strong>设置 <a href="https://webpack.github.io/docs/configuration.html#module-noparse" target="_blank" rel="noopener">noParse</a></strong></h2><p>如果你确定一个模块中，没有其它新的依赖，就可以配置这项， <code>Webpack</code> 将不再扫描这个文件中的依赖，这对于比较大型类库，将能促进性能表现，具体可以参见以下配置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">noParse</span>: /node_modules\/(element-ui\.js)/,</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拷贝静态文件"><a href="#拷贝静态文件" class="headerlink" title="拷贝静态文件"></a><strong>拷贝静态文件</strong></h2><p>在前文 <a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a>中提到，引入 <code>DllPlugin</code> 和 <code>DllReferencePlugin</code> 来提前构建一些第三方库，来优化 <code>Webpack</code> 打包。而在生产环境时，就需要将提前构建好的包，同步到 <code>dist</code> 中；这里拷贝静态文件，你可以使用 <code>copy-webpack-plugin</code> 插件：把指定文件夹下的文件复制到指定的目录；其配置如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> CopyWebpackPlugin = <span class="keyword">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins: <span class="meta">[</span></span><br><span class="line">  <span class="params">...</span></span><br><span class="line">  <span class="comment">// copy custom static assets</span></span><br><span class="line">  <span class="literal">new</span> CopyWebpackPlugin(<span class="meta">[</span></span><br><span class="line">    &#123;</span><br><span class="line">      from: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">      <span class="keyword">to</span>: config.build.assetsSubDirectory,</span><br><span class="line">      ignore: <span class="meta">[</span><span class="string">'.*'</span><span class="meta">]</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>当然，这种工作，实现的法子很多，比如可以借助 <code>shelljs</code>，可以参见这里的实现 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/build.js#L17-L22" target="_blank" rel="noopener">vue-boilerplate-template</a>。</p><p>于深圳.南山 @17-08-10 Last Modify: @17-08-13</p><blockquote><p>如若转载，请保留原文链接: <a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a></p></blockquote><hr><h2 id="猜你喜欢-对你有用-的文章"><a href="#猜你喜欢-对你有用-的文章" class="headerlink" title="猜你喜欢(/对你有用)的文章"></a><strong>猜你喜欢(/对你有用)的文章</strong></h2><p><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a><br><a href="//jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a><br><a href="//jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a><br><a href="//jeffjade.com/2016/05/08/106-vue-es6-jade-scss-webpack-gulp/">Vue ES6 Jade Scss Webpack Gulp</a><br><a href="//jeffjade.com/2016/07/06/110-vue-webpack-component-develop/">Vue Webpack 组件化开发实践</a></p>]]></content>
    
    <summary type="html">
    
      Webpack 打包优化，运用科学方法，不断探索、改进、更新，尽可能改善打包性能，加快打包速度，优化开发体验，减少构建实践，提升产品质量。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Webpack" scheme="https://jeffjade.com/tags/Webpack/"/>
    
      <category term="Efficiency" scheme="https://jeffjade.com/tags/Efficiency/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 打包优化之体积篇</title>
    <link href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/"/>
    <id>https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/</id>
    <published>2017-08-06T15:10:00.000Z</published>
    <updated>2018-05-10T16:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈及如今欣欣向荣的前端圈，不仅有各类框架百花齐放，如<code>Vue</code>， <code>React</code>， <code>Angular</code>等等，就打包工具而言，发展也是如火如荼，百家争鸣；从早期的王者<code>Browserify</code>, <code>Grunt</code>，到后来赢得宝座的 <code>Gulp</code>， 以及独树一帜的 <code>fis3</code>, 以及下一代打包神器 <code>Rollup</code> ；在 <a href="https://npmcompare.com/compare/browserify,grunt,gulp,rollup,webpack" target="_blank" rel="noopener">browserify,grunt,gulp,rollup,webpack</a> 可以一窥其中部分对比。在本文要探究的是，当前打包工具绝对霸者 <code>Webpack</code>。</p><a id="more"></a><p><img src="//image.nicelinks.site/webpack.png" alt="Webpack Package optimization"></p><p><code>Webpack</code>，当前各大主流框架默认配备的打包方案，对其如何使用，已有较完备中英文文档；并且，各主流框架也有对应 <code>CLI</code> 予以基础配置，故不作为探讨范畴。从产品层来讲，如何使得构建的包体积小、运行快，这有必要不断摸索实践，提炼升级，使之臻于最佳。本文将从以下些许方面，对 <code>Webpack</code> 打包体积方面，做下优化探讨(<strong>备注</strong>： <code>Webpack</code>实践版本： <code>3.3.0</code>)：</p><hr><p>随着时间的推移，<code>Webpack</code> 也在不断的优化迭代；截至目前，已经更新至 <code>v4.8.*</code>；在 <code>Webpack4</code> 这个版本，她在原有基础上，做了很多优化，也引入了颇多的新特性。在新的版本中，将获得更多模块类型及 对 <code>.mjs</code> 的支持，<strong>更好的默认值</strong>、更为简洁的<strong>模式设置</strong>、更加<strong>智能</strong>的来分割 <code>Chunk</code>，还新增的 <code>splitChunks</code> 来自定义分割代码块，诸此等等。在升级至新版 <code>Webpack</code> 的项目中，在包的<code>构建速度</code>、<code>代码块体积 &amp; 数量</code>、以及<code>运行效率</code>，都会有一个质的飞跃；关于对 <code>Webpack</code> 最新咨询与教程资源，推荐关注 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/webpack-tutorial.md" target="_blank" rel="noopener">Webpack Tutorial</a>。经过诸多次尝试和探究后，已将其各种配置、优化经验，融入 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.prod.conf.js" target="_blank" rel="noopener">Vue Boilerplate Template</a> 中，并且附有注解说明，希望可以帮助到正准备升级优化 <code>Webpack</code> 的朋友们，当然也欢迎提出你宝贵的意见和建议(<strong>Update@2018-05-10</strong>) 。</p><hr><h2 id="定位-webpack-大的原因"><a href="#定位-webpack-大的原因" class="headerlink" title="定位 webpack 大的原因"></a><strong>定位 webpack 大的原因</strong></h2><p>这里推荐使用 <a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer</a> —— Webpack 插件和 CLI 实用程序，她可以将内容束展示为方便交互的直观树状图，让你明白你所构建包中真正引入的内容；我们可以借助她，发现它大体有哪些模块组成，找到不合时宜的存在，然后优化它。我们可以在 项目的 package.json 文件中注入如下命令，以方便运行她(<code>npm run analyz</code>)，默认会打开 <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a> 作为展示。</p><blockquote><p>“analyz”: “NODE_ENV=production npm_config_report=true npm run build”</p></blockquote><p><img src="https://cloud.githubusercontent.com/assets/302213/20628702/93f72404-b338-11e6-92d4-9a365550a701.gif" alt="webpack-bundle-analyzer"></p><p>当然，同类型的还有 <a href="http://alexkuz.github.io/webpack-chart/" target="_blank" rel="noopener">webpack-chart</a> 以及 <a href="http://webpack.github.io/analyse/" target="_blank" rel="noopener">webpack-analyse</a>，这两个站点也是以可视方式呈现构造的组件，可以让你清楚的看到模块的组成部分；不过稍显麻烦的是，你需要运行以下命令，生成工具分析所需要的 json 文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webpack --profile --json &gt; stats.json</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果，运行指定的 weboack 文件，可用此命令</span></span><br><span class="line">webpack --config build/webpack<span class="selector-class">.prod</span><span class="selector-class">.conf</span><span class="selector-class">.js</span>  --profile --json &gt; stats.json</span><br></pre></td></tr></table></figure><h2 id="引入-DllPlugin-和-DllReferencePlugin"><a href="#引入-DllPlugin-和-DllReferencePlugin" class="headerlink" title="引入 DllPlugin  和 DllReferencePlugin"></a><strong>引入 DllPlugin  和 DllReferencePlugin</strong></h2><p> DllPlugin  和 DllReferencePlugin 提供了以大幅度提高构建时间性能的方式拆分软件包的方法。其中原理是，将特定的第三方NPM包模块提前构建👌，然后通过页面引入。这不仅能够使得 vendor 文件可以大幅度减小，同时，也极大的提高了构件速度。鉴于篇幅，具体用法可参见：<a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.dll.conf.js" target="_blank" rel="noopener">webpack.dll.conf.js</a>。</p><h2 id="外部引入模块-CDN"><a href="#外部引入模块-CDN" class="headerlink" title="外部引入模块(CDN)"></a><strong>外部引入模块(CDN)</strong></h2><p>如今前端开发，自然是使用<code>ES6</code>甚至更高版本，撸将起来才更嗨。但由于浏览器兼容问题，仍得使用 babel 转换。而这 <code>babel-polyfill</code> 也得引入以确保兼容；还比如项目开发中常用到的 <code>moment</code>, <code>lodash</code>等，都是挺大的存在，如果必须引入的话，即考虑外部引入之，再借助 <code>externals</code> 予以指定， webpack可以处理使之不参与打包，而依旧可以在代码中通过CMD、AMD或者window/global全局的方式访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 中予以指定</span></span><br><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 'vue': 'Vue',</span></span><br><span class="line">  <span class="comment">// 'lodash': '_',</span></span><br><span class="line">  <span class="string">'babel-polyfill'</span>: <span class="string">'window'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&lt;script src=<span class="string">"//cdn.bootcss.com/autotrack/2.4.1/autotrack.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"//cdn.bootcss.com/babel-polyfill/7.0.0-alpha.15/polyfill.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>需要补充的是 <code>externals</code> 中：key 是 require 的包名，value 是全局的变量。</p><h2 id="让每个第三包“引有所值”"><a href="#让每个第三包“引有所值”" class="headerlink" title="让每个第三包“引有所值”"></a><strong>让每个第三包“引有所值”</strong></h2><h3 id="确定引入的必要性"><a href="#确定引入的必要性" class="headerlink" title="确定引入的必要性"></a><strong>确定引入的必要性</strong></h3><p>前端发展到如今时期，倘若项目采用了 <code>MVVM</code>模式框架，数据双向绑定，那么像 <code>jQuery</code> 这般类库，不能说没有丝毫引入的必要，至少可以说确实没有引入的必要。对此，如果还有些顾虑，完全可以参考下 <a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">YOU MIGHT NOT NEED JQUERY</a>；用原生写几行代码就可以解决的事儿，实在不易引入这么个庞然大物，平添烦恼。</p><h3 id="避免类库引而不用"><a href="#避免类库引而不用" class="headerlink" title="避免类库引而不用"></a><strong>避免类库引而不用</strong></h3><p>倘若这类情况发生，对整个打包体积，不仅大而且亏。项目一旦大了，很难人为保证每个引入的类库，都被有用到，尤其是二次开发。所以工具的利用十分必要，强烈推荐类如 <code>Eslint</code> 这般工具，并且注入对应规则，对声明却未使用的代码，给予强制提醒；这不仅可以有效的规避类似情形发生(也适用于普通变量的检测)，而且还能使得团队代码风格，尽可能地保持相似；要知道代码足够遵守规则，也可让压缩工具更有效压缩代码，一举多得，何乐不为？</p><h3 id="尽量使用模块化引入"><a href="#尽量使用模块化引入" class="headerlink" title="尽量使用模块化引入"></a><strong>尽量使用模块化引入</strong></h3><p>如果说 <code>jQuery</code> 确实没有引入必要，很多人会同意；但对于 <code>lodash</code> 这类依赖的工具，并不是所有人都会去造一发轮子的。然而全包引入 400kb 的体量，可否有让你心肝一颤？幸好的是，<code>lodash</code> 提供了模块化的引入方式；可按需引入，快哉快哉：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成如下写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">'lodash/debounce'</span></span><br><span class="line"><span class="keyword">import</span> throttle <span class="keyword">from</span> <span class="string">'lodash/throttle'</span></span><br></pre></td></tr></table></figure><p>擅懒如你的优秀程序员，是否也发现这样写颇为麻烦？那么恭喜你，这个问题已经被解决；<a href="https://github.com/lodash/lodash-webpack-plugin" target="_blank" rel="noopener">lodash-webpack-plugin</a> 和 <a href="https://www.npmjs.com/package/babel-plugin-lodash" target="_blank" rel="noopener">babel-plugin-lodash</a> 的存在（组合使用），即是解决这问题的。它可将全路径引用的 <code>lodash</code>， 自动转变为模块化按使用引入（如下例示）；并且所需配置也十分简单，就不在此赘述(温馨提示：当涉及些特殊方法时，尚需些留意)。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入组件，自动转换</span></span><br><span class="line"><span class="keyword">import</span> <span class="literal">_</span> from <span class="string">'lodash'</span></span><br><span class="line"><span class="literal">_</span>.debounce()</span><br><span class="line"><span class="literal">_</span>.throttle()</span><br></pre></td></tr></table></figure><p>额外补充的是，即便采用如上写法，还是不够快捷，每个用到的文件，都写一遍 import，实在多有不便。更可取的是，将项目所需的方法，统一引入，按需添加，组建出本地 lodash 类库，然后 export 给框架层（比如 <code>Vue.prototype</code>），以便全局使用；详情可参见：<a href="https://github.com/nicejade/vue-boilerplate-template" target="_blank" rel="noopener">vue-modular-import-lodash</a>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper 文件夹下 lodash，统一引入你需要的方法</span></span><br><span class="line">import _ from <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  cloneDeep: _<span class="selector-class">.cloneDeep</span>,</span><br><span class="line">  debounce: _<span class="selector-class">.debounce</span>,</span><br><span class="line">  throttle: _<span class="selector-class">.throttle</span>,</span><br><span class="line">  size: _<span class="selector-class">.size</span>,</span><br><span class="line">  pick: _<span class="selector-class">.pick</span>,</span><br><span class="line">  isEmpty: _.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入到全局</span></span><br><span class="line">import _ from <span class="string">'@helper/lodash.js'</span></span><br><span class="line">Vue<span class="selector-class">.prototype</span>.$_ = _</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue 组件内运用</span></span><br><span class="line">this.$_.debounce()</span><br></pre></td></tr></table></figure><h3 id="尽可能引入更合适的包"><a href="#尽可能引入更合适的包" class="headerlink" title="尽可能引入更合适的包"></a><strong>尽可能引入更合适的包</strong></h3><p>作为前端开发的你，想必知道有 <a href="https://github.com/moment/moment" target="_blank" rel="noopener">momentjs</a> 的存在（Parse, validate, manipulate, and display dates in javascript.）；更多的是，你想必知道它很好用，然而它的体态却十分丰满(丰盈)，没念及此，是否有重新造轮子的冲动？<a href="https://github.com/smallwins/spacetime" target="_blank" rel="noopener">SpaceTime</a>: A lightweight way to manipulate, traverse, compare, and format dates and times across planet Earth。 具有与 <code>monent</code> 相似 api 的新类库，其体积又相对小很多（当然，据观察其灵活度略逊一筹）；<a href="https://github.com/date-fns/date-fns" target="_blank" rel="noopener">date-fns</a>：现代JavaScript日期实用程序库（ Modern JavaScript date utility library ），如 <code>lodash</code> 一样，可支持模块化；以及最近出来的 <a href="https://github.com/xx45/dayjs" target="_blank" rel="noopener">DAY.JS</a>: Fast <strong>2kB</strong> alternative to Moment.js with the same modern API。知道这些或者更多的你，会如何选择呢？</p><hr><p>(Update @2018-05-10) <a href="https://github.com/GoogleChromeLabs" target="_blank" rel="noopener">GoogleChromeLabs</a> 团队在 Github 上有建设仓库：<a href="https://github.com/GoogleChromeLabs/webpack-libs-optimizations" target="_blank" rel="noopener">Optimize your libraries with webpack</a>，对于如何更好的使用 <code>Webpack</code>，在写代码层面上，给出了很多不错的建议，值得一读，这有助于更进一步的所构建包的体积。</p><hr><h2 id="按需异步加载模块"><a href="#按需异步加载模块" class="headerlink" title="按需异步加载模块"></a><strong>按需异步加载模块</strong></h2><p>关于前端开发优化，重要的一条是，尽可能合并请求及资源，如常用的请求数据合并，压缩合并 js，构造雪碧图诸此等等（当然得适当，注意体积，过大不宜）；但，同时也当因需制宜，根据需要去异步加载，避免无端就引入早成的浪费。webpack 也是内置对这方面的支持； 假如，你使用的是 <code>Vue</code>，将一个组件（以及其所有依赖）改为异步加载，所需要的只是把：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">'./Foo.vue'</span></span><br></pre></td></tr></table></figure><p>改为如下写法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br></pre></td></tr></table></figure><p>如此分割之时，该组件所依赖的其他组件或其他模块，都会自动被分割进对应的 chunk 里，实现异步加载，当然也支持把组件按组分块，将同组中组件，打包在同个异步 chunk 中。如此能够非常有效的抑制 Javascript 包过大，同时也使得资源的利用更加合理化。</p><h2 id="生产环境，压缩混淆并移除console"><a href="#生产环境，压缩混淆并移除console" class="headerlink" title="生产环境，压缩混淆并移除console"></a><strong>生产环境，压缩混淆并移除console</strong></h2><p>现代化中等规模以上的开发中，区分<code>开发环境</code>、<code>测试环境</code>和<code>生产环境</code>，并根据需要予以区别对待，已然成为行业共识；可能的话，还会有<code>预发布环境</code>。对待生产环境，压缩混淆可以很有效的减小包的体积；同时，如果能够移除使用比较频繁的 <code>console</code>，而不是简单的替换为空方法，也是精彩的一笔小优化。如果使用 <code>UglifyJsPlugin</code> 插件来压缩代码，加入如下配置，即可移除掉代码中的 <code>console</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">new</span> <span class="string">webpack.optimize.UglifyJsPlugin(&#123;</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    warnings:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    drop_console:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    pure_funcs:</span> <span class="string">['console.log']</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  sourceMap:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="Webpack3-新功能-Scope-Hoisting"><a href="#Webpack3-新功能-Scope-Hoisting" class="headerlink" title="Webpack3 新功能: Scope Hoisting"></a><strong>Webpack3 新功能: Scope Hoisting</strong></h2><p>截止目前(17-08-06), Webpack 最新版本是 <strong>3.4.1</strong>；Webpack在 3.0 版本，提供了一个新的功能：<code>Scope Hoisting</code>，又译作“作用域提升”。只需在配置文件中添加一个新的插件，就可以让 Webpack 打包出来的代码文件更小、运行的更快：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack<span class="selector-class">.optimize</span><span class="selector-class">.ModuleConcatenationPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>据悉这个 <code>Scope Hoisting</code> 与 <code>Tree Shaking</code>，最初都是由 Rollup 实现的。在个人中实践中，这个功能的注入，对打包体积虽有影响，却不甚明显，有兴趣的盆友可以试下；更对关于此功能讯息，可参见 <a href="https://zhuanlan.zhihu.com/p/27980441" target="_blank" rel="noopener">Webpack 3 的新功能：Scope Hoisting</a>。</p><p>本文自本月（08）四号开始陆陆续续写，原本的内容意图是，涉及 <code>Webpack</code> 打包优化的体积和速度两个方面；岂料，临近写完的时候（06号晚），已记不得多久没关机的 Mac，竟然被重启了下；屋漏多半会偏逢连夜雨，那一向会自动同步保存(30min)的<strong>作业部落</strong>，竟然没给同步，WTF！整个周末的敲敲打打，皆付之东流，泪崩泪目😂。无奈之下，只得重新写过，直到夜深，才补齐关于体积优化那部分；毕竟涉及内容较多，干脆，就分成两部分来完成😪。也在此提醒广大笔友，及时备份数据并确认，这很重要😂。在此也预告下一篇 《<a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a>》，当然，此文也扔在完善中。</p><p>深圳.南山 @17-08-04. Last Modify 17-08-07</p><p>原文链接: <a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></p><hr><h2 id="猜你喜欢-对你有用-的文章"><a href="#猜你喜欢-对你有用-的文章" class="headerlink" title="猜你喜欢(/对你有用)的文章"></a><strong>猜你喜欢(/对你有用)的文章</strong></h2><p><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">Webpack 打包优化之速度篇</a><br><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/">『引』最全前端资源汇集</a><br><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/">所历前端“姿势”更替记(其一)</a><br><a href="https://jeffjade.com/2016/05/08/106-vue-es6-jade-scss-webpack-gulp/">Vue ES6 Jade Scss Webpack Gulp</a><br><a href="https://jeffjade.com/2016/07/06/110-vue-webpack-component-develop/">Vue Webpack 组件化开发实践</a></p>]]></content>
    
    <summary type="html">
    
      Webpack 打包优化，运用科学方法，不断探索、改进、更新，尽可能减小打包体积，提升产品质量。
    
    </summary>
    
      <category term="Front-End" scheme="https://jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Webpack" scheme="https://jeffjade.com/tags/Webpack/"/>
    
      <category term="Efficiency" scheme="https://jeffjade.com/tags/Efficiency/"/>
    
  </entry>
  
</feed>
