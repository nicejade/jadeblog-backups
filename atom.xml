<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晚晴幽草轩</title>
  <subtitle>It&#39;s only too late if you decide it is. Get busy living. or get busy dying!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jeffjade.com/"/>
  <updated>2019-12-12T15:44:13.383Z</updated>
  <id>https://www.jeffjade.com/</id>
  
  <author>
    <name>晚晴幽草轩轩主</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端利器之 npx 使用纪要</title>
    <link href="https://www.jeffjade.com/2019/12/11/160-how-to-use-npm-npx-tutorial/"/>
    <id>https://www.jeffjade.com/2019/12/11/160-how-to-use-npm-npx-tutorial/</id>
    <published>2019-12-11T05:14:15.000Z</published>
    <updated>2019-12-12T15:44:13.383Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/nodejs-tutorial.md" target="_blank" rel="external">Node.js</a>，如今已经是<a href="https://github.com/nicejade/nice-front-end-tutorial" target="_blank" rel="external">前端开发</a>不可或缺的组成部分；<code>npm</code> 则是 Node.js 默认的、以 JavaScript 编写的软件包管理系统； 而 <code>npx</code> <strong>是 npm 软件包运行器</strong>，使用它，能够无需显式安装即可帮助执行 npm 软件包。它有很多用处，本就从其主要使用场景角度，来介绍下该命令。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/node-npm-npx.jpg" alt="前端利器之 npx 使用纪要"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>更新 npm 至 <em>&gt;= @5.2.0</em>，就会自动安装 <a href="https://www.npmjs.com/package/npx" target="_blank" rel="external">npx</a>；可以通过 <code>which npx</code> 来查看其绝对路径 ；如果由于某种原因它不可用，请按照以下说明安装或更新它即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npx</div></pre></td></tr></table></figure>
<h2 id="存在价值"><a href="#存在价值" class="headerlink" title="存在价值"></a>存在价值</h2><p>多年来，npm 生态系统越来越倾向于将工具安装为项目本地 <code>devDependencies</code>，而不是要求用户在全局范围内安装它们。这意味着像 <a href="https://npm.im/mocha" target="_blank" rel="external">mocha</a>，<a href="https://www.jeffjade.com/tags/Gulp/">gulp</a> 和 <a href="https://npm.im/bower" target="_blank" rel="external">bower</a> 这样曾经主要全局安装在系统上的工具现在可以在每个项目的基础上管理它们的版本。这也意味着，要使基于 npm 的项目启动并运行，你需要做的就是确保在系统上有 <code>node+npm</code>，克隆 <code>Git repo</code>，然后执行 <code>npm install</code> 和 <code>npm run xx</code> 来安装依赖以及运行命令。由于<code>npm run-script</code> 将本地二进制文件添加到路径，这样就可以了！</p>
<p>缺点是，这使你无法以交互方式快速、方便地调用本地二进制文件。有几种方法可以做到这一点，他们都对他们有一些烦恼：你可以将这些工具添加到你的 <code>scripts</code>，但是你需要记住通过使用 <code>--</code> 来传递参数，你可以做使用 shell 脚本技巧 <code>alias npmx=PATH=$(npm bin):$PATH</code>，或者你可以使用 <code>./node_modules/.bin/rollup</code> 手动路径到它们。这些都有效，但没有一个是理想的，参见如下使用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm i -D rollup</div><div class="line">./node_modules/.bin/rollup -v</div><div class="line"></div><div class="line"><span class="comment">#or</span></div><div class="line">npm i -D rollup</div><div class="line">`npm bin`/rollup -v</div></pre></td></tr></table></figure>
<p>npx 为你提供了更好的解决方案：<code>npx rollup</code> 是你使用本地安装所需的全部工作；如果你采取额外的步骤并配置 <a href="https://www.npmjs.com/package/npx#shell-auto-fallback" target="_blank" rel="external">shell 自动回退</a>。</p>
<blockquote>
<p>好处是，如果调用已经安装的二进制文件，npx 基本上没有开销（Npx Official Description: Executes \&lt;command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for \&lt;command> to run.） – 它足够聪明，可以将工具的代码，直接加载到当前运行的<code>node</code> 进程中！这与此类事情的速度差不多，并使其成为完全可以接受的脚本编写工具。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="运行项目安装的模块"><a href="#运行项目安装的模块" class="headerlink" title="运行项目安装的模块"></a>运行项目安装的模块</h3><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了打包工具 <code>rollup</code>。调用 rollup ，可在项目脚本和 package.json 的 <a href="https://www.jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/#%E5%BC%BA%E5%A4%A7%E5%A6%82%E6%96%AF%EF%BC%8Cnpm-%E8%84%9A%E6%9C%AC">scripts</a> 字段里面；如果想在命令行下调用，像下面 👇 这样使用，会更加方便。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npx rollup -v</div></pre></td></tr></table></figure>
<p>npx 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。由于 npx 会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npx ls <span class="comment"># 等价于 npx ls</span></div><div class="line">npx <span class="built_in">which</span> npm <span class="comment"># 等价于 which npm</span></div></pre></td></tr></table></figure>
<h3 id="一次性调用，无需本地安装"><a href="#一次性调用，无需本地安装" class="headerlink" title="一次性调用，无需本地安装"></a>一次性调用，无需本地安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开启一个本地静态服务器</span></div><div class="line">npx arya s</div><div class="line"><span class="comment"># or</span></div><div class="line">npx http-server</div></pre></td></tr></table></figure>
<h3 id="执行-GitHub-上面的模块源码"><a href="#执行-GitHub-上面的模块源码" class="headerlink" title="执行 GitHub 上面的模块源码"></a>执行 GitHub 上面的模块源码</h3><p><strong>注意</strong>，远程代码必须是一个模块，即必须包含 <code>package.json</code> 和入口脚本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从 gist 服务上调用命令</span></div><div class="line">npx https://gist.github.com/nicejade/406f154e882a836de1b2e12d02b84aab</div><div class="line"></div><div class="line"><span class="comment"># 从 github 仓库中调用命令</span></div><div class="line">npx github:piuccio/cowsay hello</div></pre></td></tr></table></figure>
<p>值得一提的是，上述 <a href="https://gist.github.com/nicejade/406f154e882a836de1b2e12d02b84aab" target="_blank" rel="external">gist 代码片段</a>，是为写此篇文章，特意写来测试用（使用 npx 命令来快速生成一个标准的 <code>README.md</code>）；有了 <code>npx</code> 这个功能，即可为朋友们分享一些脚本，提供更加便捷 &amp; 快捷的方式（相比之下，npm 仓库的脚本，发布和使用，都显得更加繁琐些；当然，你需要注意 ⚠️ 安全，请务必仔细阅读 gists 代码，如同运行<code>.sh</code> 脚本时一样！）。</p>
<h3 id="指定不同版本的-node-运行-npm-脚本"><a href="#指定不同版本的-node-运行-npm-脚本" class="headerlink" title="指定不同版本的 node 运行 npm 脚本"></a>指定不同版本的 node 运行 npm 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npx node@12.9.1 npm -v</div><div class="line">npx -p node@12.9.1 npm -v</div><div class="line">npx -p node@12.9.1 npm run build</div><div class="line">npx -p node@12.9.1 yarn build</div></pre></td></tr></table></figure>
<p>上面命令会使用 <code>12.9.1</code> 版本的 Node 执行脚本；原理是从 npm 下载这个版本的 node，使用后再删掉；在一些特殊场景，用来此法来切换 Node 版本（如测试该版本是否支持某特性等），要比一些版本管理器（如 <code>nvm</code>）来的方便一些。</p>
<h4 id="p-参数"><a href="#p-参数" class="headerlink" title="-p 参数"></a><code>-p</code> 参数</h4><p><code>-p</code>参数用于指定 npx 所要安装的模块，这对于需要安装多个模块的场景很有用，比如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npx -p cowsay -p arya-jarvis  [<span class="built_in">command</span>]</div></pre></td></tr></table></figure>
<h4 id="c-参数"><a href="#c-参数" class="headerlink" title="-c 参数"></a><code>-c</code> 参数</h4><p>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。所以如下命令会报错：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将会报错</span></div><div class="line">npx -p cowsay -p arya-<span class="keyword">jarvis </span> <span class="string">"arya ip | cowsay"</span></div></pre></td></tr></table></figure>
<ol>
<li>npx <code>-c</code>参数，可以将所有命令都用 npx 来解释。于是，下面代码就可以正常工作：</li>
</ol>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># npx -p cowsay -c "cowsay hey, bro"</span></div><div class="line">npx -p cowsay -p arya-jarvis -c <span class="string">"arya ip | cowsay"</span></div><div class="line">...</div><div class="line"> ______________</div><div class="line"><span class="variable">&lt; 172.13.14.21 &gt;</span></div><div class="line"> --------------</div><div class="line">        \   ^__^</div><div class="line">         \  (oo)\_______</div><div class="line">            (__)\       )\/\</div><div class="line">                ||<span class="string">----w </span>|</div><div class="line">                ||<span class="string">     </span>||</div></pre></td></tr></table></figure>
<ol start="2">
<li><code>-c</code> 参数的另一个作用是，可以把这些 npm 的环境变量带入 npx 命令，如下代码：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npx -c <span class="string">'echo "$npm_package_name"'</span></div><div class="line">npx -c <span class="string">'echo "$npm_package_version"'</span></div></pre></td></tr></table></figure>
<h3 id="使用-inspect-运行节点二进制文件"><a href="#使用-inspect-运行节点二进制文件" class="headerlink" title="使用 --inspect 运行节点二进制文件"></a>使用 <code>--inspect</code> 运行节点二进制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npx --node-arg=--inspect cowsay</div><div class="line">Debugger listening on ws://127.0.0.1:9229/....</div></pre></td></tr></table></figure>
<p>此外，npx 还有 shell 自动回退（shell auto-fallback）功能，可以使用与 <code>bash</code>、<code>zsh</code>、<code>fish</code> 等；倘若把 npx 配置在 <code>.zshrc</code> 文件中，当在本地找不见伴随 <code>@</code> 命令时，可以在不引用 npx 的情况下，用其作为后备命令执行，配置也很简单，如果你是用的是 <code>zsh</code>，执行如下命令即可（如果是 <code>bash</code> Or <code>fish</code>，可以参见 <a href="https://www.npmjs.com/package/npx" target="_blank" rel="external">npx - shell auto-fallback</a>）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> &lt;(npx --shell-auto-fallback zsh)</div></pre></td></tr></table></figure>
<p>具体使用效果如下示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ember-cli@latest --version</div><div class="line">找不到 ember-cli@latest，请尝试使用 npx...</div><div class="line">ember-cli: 3.14.0</div><div class="line">node: 12.13.0</div><div class="line">os: darwin x64</div></pre></td></tr></table></figure>
<blockquote>
<p>原文首发出处: <a href="https://quickapp.lovejade.cn/" target="_blank" rel="external">静轩之别苑</a><br>原文首发链接：<a href="https://quickapp.lovejade.cn/how-to-use-npm-npx-tutorial/" target="_blank" rel="external">前端利器之 npx 使用纪要</a></p>
</blockquote>
<p>于 2019.12.10 于深圳.福田 last modify: 2019.12.11.</p>
<h3 id="参考文献链接"><a href="#参考文献链接" class="headerlink" title="参考文献链接"></a>参考文献链接</h3><ul>
<li><a href="https://www.npmjs.com/package/npx" target="_blank" rel="external">npx(1)– execute npm package binaries</a></li>
<li><a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b" target="_blank" rel="external">Introducing npx: an npm package runner</a></li>
<li><a href="https://hackernoon.com/npx-npm-package-runner-7f6683e4304a" target="_blank" rel="external">npx: npm package runner</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="external">npx 使用教程 | 阮一峰</a></li>
</ul>
<h3 id="您可能感兴趣的文章"><a href="#您可能感兴趣的文章" class="headerlink" title="您可能感兴趣的文章"></a>您可能感兴趣的文章</h3><ul>
<li><a href="https://www.jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/">Npm vs Yarn 之备忘详单</a></li>
<li><a href="https://quickapp.lovejade.cn/git-common-problems-and-solutions/" target="_blank" rel="external">Git 常见问题及解决办法</a></li>
<li><a href="https://www.jeffjade.com/2019/08/25/156-arya-jarvis-born-for-efficiency/">为高效而生：Arya Jarvis</a></li>
<li><a href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/">Arya - 在线 Markdown 编辑器</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/">基于 Puppeteer 构建简易机器人</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      Node.js，如今已经是前端开发不可或缺的组成部分；npm 则是 Node.js 默认的、以 JavaScript 编写的软件包管理系统； 而 npx 是 npm 软件包运行器，使用它，能够无需显式安装即可帮助执行 npm 软件包。它有很多用处，本就从其主要使用场景角度，来介绍下该命令。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Webpack" scheme="https://www.jeffjade.com/tags/Webpack/"/>
    
      <category term="NodeJs" scheme="https://www.jeffjade.com/tags/NodeJs/"/>
    
      <category term="npm" scheme="https://www.jeffjade.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 之 import export Vs require module.exports</title>
    <link href="https://www.jeffjade.com/2019/08/28/159-js-import-export-vs-require-module-exports/"/>
    <id>https://www.jeffjade.com/2019/08/28/159-js-import-export-vs-require-module-exports/</id>
    <published>2019-08-28T05:14:15.000Z</published>
    <updated>2019-09-03T15:08:41.672Z</updated>
    
    <content type="html"><![CDATA[<p>自从有了 Es6 模块系统后，在各种场景，可以愉悦借助 import/export，来充作模块加载方案。同时，你可能也会看到 import 与 export default，或基于 CommonJS 规范的 <code>require</code> 与 <code>module.exports</code> 等诸多用法；本篇文章，旨在探讨 JavaScript 模块化体系中：ES6 模块与 CommonJS 模块的差异，以及各自用法注意事项等。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/js-import-export-vs-require-module-exports.jpg" alt="import export Vs require module.exports"></p>
<blockquote>
<p><strong>微注</strong>：有两点需要声明，其一：文章的发布，不代表写完，只为督促加快进度；将会在陆续的学习及反馈中，继续完善；其二：总有些聚合网站，会窃取别人成果；因此，会在文章中无足轻重的代码示例中，内置些专属标记，以阐明文章出处；在此篇中用的是个人独立维护的作品：<a href="https://nicelinks.site?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链</a>。</p>
</blockquote>
<p>一直以来，JavaScript 没有模块（module）体系，无法将大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。这使得针对开发大型的、复杂的项目形成了巨大障碍。在 ES6 之前，社区制定了一些模块加载方案，最常用的有 CommonJS 和 AMD 两种。前者用于服务器（Node），后者用于浏览器。ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>
<p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。但，截止目前，各类引擎还未完全实现 Es6，现在之所以能够使用，是借助 babel 工具，将 Es6 转换 Es5 再执行，<code>import</code> 语法会被转码为 <code>require</code>，这就导致 import 与 module.exports，require 与 export 出现了可以混用的理论基础。那么下面来看下，都有哪些组合使用方式呢。</p>
<h2 id="import-方式"><a href="#import-方式" class="headerlink" title="import 方式"></a><code>import</code> 方式</h2><h3 id="import-与-export-const"><a href="#import-与-export-const" class="headerlink" title="import 与 export(const)"></a>import 与 export(const)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> exportsObj = &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> &#123; exportsObj &#125; <span class="keyword">from</span> <span class="string">"./export"</span>;</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site); <span class="comment">// 倾城之链 https://nicelinks.site</span></div><div class="line"></div><div class="line"><span class="comment">// 上面也可以用 * 来整体加载</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> custom <span class="keyword">from</span> <span class="string">"./export"</span>;</div><div class="line"><span class="built_in">console</span>.log(custom.exportsObj.site);</div></pre></td></tr></table></figure>
<h3 id="import-与-export-default"><a href="#import-与-export-default" class="headerlink" title="import 与 export default"></a>import 与 export default</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> exportsObj <span class="keyword">from</span> <span class="string">"./export"</span>;</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site);</div></pre></td></tr></table></figure>
<h3 id="import-与-module-exports"><a href="#import-与-module-exports" class="headerlink" title="import 与 module.exports"></a>import 与 module.exports</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> exportsObj <span class="keyword">from</span> <span class="string">"./export"</span>;</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site);</div></pre></td></tr></table></figure>
<h2 id="requre-方式"><a href="#requre-方式" class="headerlink" title="requre 方式"></a><code>requre</code> 方式</h2><h3 id="require-与-module-exports"><a href="#require-与-module-exports" class="headerlink" title="require 与 module.exports"></a>require 与 module.exports</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">const</span> exportsObj = <span class="built_in">require</span>(<span class="string">"./export"</span>);</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site); <span class="comment">// 倾城之链 https://nicelinks.site</span></div></pre></td></tr></table></figure>
<h3 id="require-与-export-const-var"><a href="#require-与-export-const-var" class="headerlink" title="require 与 export(const/var)"></a>require 与 export(const/var)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> exportsObj = &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">const</span> &#123; exportsObj &#125; = <span class="built_in">require</span>(<span class="string">"./export"</span>);</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site); <span class="comment">// 倾城之链 https://nicelinks.site</span></div></pre></td></tr></table></figure>
<h3 id="require-与-export-default"><a href="#require-与-export-default" class="headerlink" title="require 与 export default"></a>require 与 export default</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">site</span>: <span class="string">"倾城之链 https://nicelinks.site"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">const</span> exportsObj = <span class="built_in">require</span>(<span class="string">"./export"</span>).default;</div><div class="line"><span class="built_in">console</span>.log(exportsObj.site); <span class="comment">// 倾城之链 https://nicelinks.site</span></div></pre></td></tr></table></figure>
<h2 id="module-exports-VS-exports"><a href="#module-exports-VS-exports" class="headerlink" title="module.exports VS exports"></a>module.exports VS exports</h2><p>为了方便，Node 为每个模块提供一个 exports 变量，指向 module.exports（注意，这在浏览器端，是不存的，请勿用）。通过下面的打印，你会发现两者是全等的；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>这其实等同在每个模块头部，有一行这样的代码：var exports = module.exports；在使用之时也有些注意事项，更推荐的方式是使用 <code>module.exports</code> 而不用 <code>exports</code>。以下是不可取用法的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 切断了 exports 与 module.exports 的联系</span></div><div class="line">exports = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123; <span class="built_in">console</span>.logparamx) &#125;</div><div class="line"></div><div class="line"><span class="comment">// 因为 module.exports 被重新赋值，sayHello 无法对外输出</span></div><div class="line">exports.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'hello'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello world'</span></div></pre></td></tr></table></figure>
<h2 id="Es6-与-CommonJS-的差异"><a href="#Es6-与-CommonJS-的差异" class="headerlink" title="Es6 与 CommonJS 的差异"></a>Es6 与 CommonJS 的差异</h2><ol>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口；</li>
</ol>
<blockquote>
<p>CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。因为 <code>require</code> 是运行时加载模块，import 命令无法取代 <code>require</code> 的动态加载功能。如下代码可以看二者区别：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Okay</span></div><div class="line"><span class="keyword">const</span> currentModule = <span class="built_in">require</span>(process.cwd() + moduleName);</div><div class="line"></div><div class="line"><span class="comment">// SyntaxError</span></div><div class="line"><span class="keyword">const</span> currentModule = <span class="keyword">import</span>(process.cwd() + moduleName);</div></pre></td></tr></table></figure>
<p>简单的总结，其二者区别在于，<code>require</code> 是异步加载，<code>import</code> 是同步加载。因为这一点，蛮早之前有<a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="external">一个提案</a>，建议引入 <code>import()</code> 函数（携带 specifier 参数，指定所要加载的模块的位置），以完成动态加载。可以通过其主页的示例可以窥其一二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">"main"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">"nav &gt; a"</span>)) &#123;</div><div class="line">  link.addEventListener(<span class="string">"click"</span>, e =&gt; &#123;</div><div class="line">    e.preventDefault();</div><div class="line"></div><div class="line">    <span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;link.dataset.entryModule&#125;</span>.js`</span>)</div><div class="line">      .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">module</span>.loadPageInto(main);</div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        main.textContent = err.message;</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事实上，动态 import 已于 2017 年 11 月发布于 ES2020 版本；Chrome 67+ 可用，现在想使用仍是要借助 Babel 做下转换；具体可以参见 <a href="https://v8.dev/features/dynamic-import" target="_blank" rel="external">Dynamic import() - v8.dev</a>。</p>
<p>如果你使用 Vue Or React 开发，你会发现用 Webpack import 可以按需引入，使得可以资源懒加载得以实现（早前使用 <code>require.ensure</code>）；但需要注意的是，无法使用完全动态的 import 语句，例如 import(foo)，因为 foo 可能是系统或项目中任何文件的任何路径，从而导致将很多无用的资源注入。因此，在使用 webpack import，应该<strong>尽可能静态化表达包所处的路径，最小化变量控制的区域</strong>；来看下官网给出的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> language = detectVisitorLanguage();</div><div class="line"><span class="keyword">import</span>(<span class="string">`./locale/<span class="subst">$&#123;language&#125;</span>.json`</span>).then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something with the translations</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>关于 Webpack import，还有一些其他功能设计，比如 <code>Magic Comments</code>，它允许以注释的方式传参，进而更好的生成 Chunk，更多详情可以参见 <a href="https://webpack.js.org/api/module-methods/#import" target="_blank" rel="external">Webpack Import</a>。相比于 Es6 中的 import，上述的两种动态 <code>import()</code> 都是方法，返回结果都是 <code>Promise</code>。在某些场景下，合理的运用，可以更好地对代码进行分割，从而使得构建出的产品更优。</p>
<ol start="2">
<li>CommonJS 模块输出的是一个<strong>值的拷贝</strong>，ES6 模块输出的是<strong>值的引用</strong>；</li>
</ol>
<blockquote>
<p>CommonJS 模块输出的是值的拷贝，即一旦输出一个值，而模块内部的变化就影响不到这个值。而 ES6 模块的运行机制与 CommonJS 不一样：JS 引擎对脚本静态分析的时候，遇到模块加载命令 <code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。举例说明：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">276</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> makeCounterIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  counter++;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// index.js (用 require 方式)</span></div><div class="line"><span class="keyword">let</span> &#123; counter, makeCounterIncrease &#125; = <span class="built_in">require</span>(<span class="string">"./export"</span>);</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 276</span></div><div class="line">makeCounterIncrease();</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 277</span></div><div class="line">counter += <span class="number">1</span>; <span class="comment">// 不会报错；</span></div><div class="line"></div><div class="line"><span class="comment">// index.js (用 import 方式)</span></div><div class="line"><span class="keyword">import</span> &#123; counter, makeCounterIncrease &#125; <span class="keyword">from</span> <span class="string">"./export"</span>;</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 276</span></div><div class="line">makeCounterIncrease();</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 277</span></div><div class="line">counter += <span class="number">1</span>; <span class="comment">//  报错：Error: "counter" is read-only.</span></div></pre></td></tr></table></figure>
<p>正如上面所提及，各类引擎还未完全实现 Es6 语法，可以通过 babel 转换为 Es6 来运行；如果想通过 Node 来验证如上代码，需要通过些工具来实现。</p>
<h2 id="用哪种方式更可取呢？"><a href="#用哪种方式更可取呢？" class="headerlink" title="用哪种方式更可取呢？"></a>用哪种方式更可取呢？</h2><p>经过以上一番探究，可以知道，可以有不同使用方式（前提是：假设项目已经是引入了 babel 转换工具）；那么，哪种更为可取呢？通常的答案是，看个人（团队）喜好，用 import / require 都可以，当然最好是别混用；但，如果是针对浏览器端项目，使用了类如 <code>rollup</code> 或 <code>webpack</code> 这样的构建工具，因其提供了 <a href="https://webpack.docschina.org/guides/tree-shaking/" target="_blank" rel="external">tree shaking</a> （通常用于描述移除 JavaScript 上下文中的未引用代码）功能，这个时候就需要做一番考量了。拿前端常用工具库 <code>lodash</code> 来说，如果正常引入，则会将其全量载入，注入很多不必要的代码，造成构建出包的尺寸变大：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>;</div><div class="line">_.flattenDepth();</div></pre></td></tr></table></figure>
<p>幸好的是，如 <code>lodash</code> 等工具，陆续都做了模块化支持，因此可以用如下这样方式注入（备注：这在早期 <a href="https://www.jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/#尽量使用模块化引入">Webpack 打包优化之体积篇</a>一文中，有过详述）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">"lodash"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 改成如下写法</span></div><div class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">"lodash/debounce"</span>;</div></pre></td></tr></table></figure>
<p>但，这样带来的问题是，每次使用都手动 import，会增加开发成本（也显得更为麻烦，至少个人写起代码来，不愿为此而浪费时间）；因此先前设计 <a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/src/helper/lodash.js" target="_blank" rel="external">Vue 项目脚手架</a>时候，有借助一层中间模块来平衡，使得在高效开发时候，也可以让 tree-shaking 得以工作，见如下示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// helper/lodash.js (local)</span></div><div class="line"><span class="keyword">import</span> flattenDepth <span class="keyword">from</span> <span class="string">"lodash/flattenDepth"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  flattenDepth</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">"helper/lodash.js"</span>;</div><div class="line">Vue.prototype.$_ = lodash;</div></pre></td></tr></table></figure>
<h2 id="Node-运行-ES6-语法"><a href="#Node-运行-ES6-语法" class="headerlink" title="Node 运行 ES6 语法"></a>Node 运行 ES6 语法</h2><p>使用 <code>babel-node</code> 命令，来运行含有 import/export 语法的代码（需要注意的是 babel-node 不能用于生产环境，它的存在会加载更多资源和模块）。</p>
<h3 id="安装-babel-node"><a href="#安装-babel-node" class="headerlink" title="安装 babel-node"></a>安装 babel-node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i @babel/core @babel/node --save-dev</div></pre></td></tr></table></figure>
<p>因为 babel-node 对 import 语法默认是关未开启，所以需要安装指定的 preset 并配置 <code>.babelrc</code>来开启语法支持。</p>
<h3 id="安装-presets-并配置-babelrc-文件"><a href="#安装-presets-并配置-babelrc-文件" class="headerlink" title="安装 presets 并配置 .babelrc 文件"></a>安装 presets 并配置 .babelrc 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i @babel/preset-env --save-dev</div></pre></td></tr></table></figure>
<p>在项目根目录下，新建 <code>.babelrc</code> 文件，并填入以下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [ <span class="string">"@babel/preset-env"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-babel-node-执行-import-export-语法"><a href="#通过-babel-node-执行-import-export-语法" class="headerlink" title="通过 babel-node 执行 import/export 语法"></a>通过 babel-node 执行 import/export 语法</h3><p>经过如上配置，即可通过 babel-node 执行 import/export 语法；因为采 babel-node 基于局部安装，因此可以通过 <code>npx</code> 来运行；当然，完全可以将命令配置在 package.json 的 scripts 内部，以提升便捷度。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npx babel-node index.js</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="external">import() proposal for JavaScript</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="external">ES6 Module 的语法</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/module-loader#" target="_blank" rel="external">ES6 Module 的加载实现</a></li>
</ul>
<p>@2019-08-25 于东莞.长安 Last Modify：2019-08-28</p>
<hr>
<h3 id="您可能会感兴趣的文章"><a href="#您可能会感兴趣的文章" class="headerlink" title="您可能会感兴趣的文章"></a>您可能会感兴趣的文章</h3><ul>
<li><a href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/">Arya - 在线 Markdown 编辑器</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/">基于 Puppeteer 构建简易机器人</a></li>
<li><a href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/">基于 Vue-Cli3 构建的脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      自从有了 Es6 模块系统后，在各种场景，可以愉悦借助 import/export，来充作模块加载方案。同时，你可能也会看到 import 与 export default，或基于 CommonJS 规范的 require 与 module.exports 等诸多用法；本篇文章，旨在探讨 JavaScript 模块化体系中：ES6 模块与 CommonJS 模块的差异，以及各自用法注意事项等。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Webpack" scheme="https://www.jeffjade.com/tags/Webpack/"/>
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="https://www.jeffjade.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>为高效而生：Arya Jarvis</title>
    <link href="https://www.jeffjade.com/2019/08/25/156-arya-jarvis-born-for-efficiency/"/>
    <id>https://www.jeffjade.com/2019/08/25/156-arya-jarvis-born-for-efficiency/</id>
    <published>2019-08-25T15:26:29.000Z</published>
    <updated>2019-09-16T14:53:23.168Z</updated>
    
    <content type="html"><![CDATA[<p>荀子在《劝学》曰：<strong>君子生非异也，善假于物也</strong>。对于重复而精确性的事物，理想的目标是：有贴心工具加以协助，使得可以用更便捷的方式处理；Github 创建仓库：<a href="https://github.com/nicejade/arya-jarvis" target="_blank" rel="external">ARYA JARVIS</a>，即是为此而做的尝试 ── 她<strong>旨在为开发人员节省更多时间、精力以及体力</strong>。而此篇文章的存在，介绍 <a href="https://github.com/nicejade/arya-jarvis" target="_blank" rel="external">ARYA JARVIS</a> 的同时，也分享下关于对<strong>善假于物</strong>的理解。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/arya-jarvis.jpg" alt="为高效而生：Arya Jarvis"></p>
<p><strong>温馨说明</strong>：鉴于会在后续业余时光中，为 <a href="https://github.com/nicejade/arya-jarvis" target="_blank" rel="external">Arya Jarvis</a> 集成更多功能，以提升使用体验，而现在利用博文这种形式的介绍，未免有些欠佳；因此有采用 <a href="https://nicelinks.site/post/5d4fec8c4c0a2404cc79f97a" target="_blank" rel="external">docsify</a> 塑造一文档 ── <a href="https://arya.lovejade.cn/#/zh-cn?utm_source=jeffjade.com" target="_blank" rel="external">ARYA JARVIS DOC</a>，用以承载 <code>arya jarvis</code> 的使用说明，从而能更好服务用户；如您有任何建议或意见，欢迎留言反馈（与此同时，还维护有<a href="https://www.lovejade.cn/zh/works/" target="_blank" rel="external">更多工具作品</a>，如感兴趣，请移步试用）。</p>
<h2 id="故事起源"><a href="#故事起源" class="headerlink" title="故事起源"></a>故事起源</h2><p>就目前工作而言，比较多涉及的是 Web 前端这块。为更快能启动一个前端项目，抑或是做其他处理如：测试、构建、发布等，通常做法是在 <code>package.json</code> 中配置 <code>scripts</code> 脚本命令；然而，在接触一个复杂或者新项目时，如过对 scripts 脚本命令不够了然，则会限制在终端操作的速度。通常的做法是用熟悉的编辑器，打开该文件看下，或者借助 <code>cat</code> 命令输出至终端加以查看。所以，很早之前就希望能有一种操作，可以一键以浏览之。久未遇到，也自然就产生了自己写一个的想法，这边是编写 <code>Arya Jarvis</code> 的初衷。</p>
<p>截止目前，Arya Jarvis 可以帮着做的事儿，已逐渐多了起来， 是时候可以将其先分享出来，希望有更多人可以一起使用 &amp; 完善她。就如在 <a href="https://github.com/nicejade/arya-jarvis" target="_blank" rel="external">Arya Jarvis README</a> 中写到的，我个人是此工具的最忠实的用户；现在编写 Arya Jarvis 之时，也是用她本身来格式美化项目代码，感谢我自己在业余时间自己创造了她，我是如此的喜欢。</p>
<h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>（&gt; = 8. *），Npm 版本 5+（更推荐使用 <a href="https://www.jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/">Yarn</a>。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i arya-jarvis -g</div><div class="line"><span class="comment"># Or</span></div><div class="line">yarn add global arya-jarvis</div></pre></td></tr></table></figure>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>如下两个代码美化相关功能，可以支持多种文件，譬如: <code>.js</code>, <code>.vue</code>, <code>.ux</code>, <code>.less</code>, <code>.scss</code>, <code>.css</code>, <code>.json</code>, <code>.md</code>, <code>.html</code>, <code>.qxml</code>, <code>.wxml</code>。</p>
<h5 id="💄-美化指定路径下的代码"><a href="#💄-美化指定路径下的代码" class="headerlink" title="💄 美化指定路径下的代码"></a>💄 美化指定路径下的代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arya prettier index.js</div><div class="line"><span class="comment"># 👏 Or Use Alias</span></div><div class="line">arya p ./src/**/**/*.js</div><div class="line"><span class="comment"># 👍🙌 Or Use Alias &amp; Wildcard</span></div><div class="line">arya p .</div></pre></td></tr></table></figure>
<h5 id="🔬-监听并美化指定路径下的代码"><a href="#🔬-监听并美化指定路径下的代码" class="headerlink" title="🔬 监听并美化指定路径下的代码"></a>🔬 监听并美化指定路径下的代码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arya watcher index.js</div><div class="line"><span class="comment"># 👏 Or Use Alias</span></div><div class="line">arya w ./src/**/**/*.js</div><div class="line"><span class="comment"># 👍🙌 Or Use Alias &amp; Wildcard</span></div><div class="line">arya w .</div></pre></td></tr></table></figure>
<p>值得一提的是，本项目代码在开发时，格式美化就使用 <code>arya w .</code> 命令。感谢我自己业余时间自己开发此了 <code>arya jarvis</code> ，我超级喜欢。</p>
<p><strong>温馨说明</strong>：<a href="https://nicelinks.site/post/5c16083e819ae45de1453caa" target="_blank" rel="external">Prettier</a> 是一个有见识的代码格式化工具；使用它来美化，实在是再好不过，具体可以参见 <a href="https://www.lovejade.cn/zh/article/beautify-vue-by-eslint-and-prettier.html" target="_blank" rel="external">使用 ESLint ＆ Prettier 美化 Vue 代码</a>；曾多次为很多前端开发者安利 <code>Prettier</code>，却因各种原因，不被接纳😇； 考虑到其配置可能略对某些人显复杂，也就诞生了一个想法：做一个工具，是开发者开箱即用，领略其中舒爽，可还有拒绝的理由？而如上两个命令即可对此想法的实践。针对微型或临时项目，此工具还是非常实用（对于中大型项目，建议自行在项目中配置）。</p>
<h5 id="🌍-用于快速构建本地-Web-服务器"><a href="#🌍-用于快速构建本地-Web-服务器" class="headerlink" title="🌍 用于快速构建本地 Web 服务器"></a>🌍 用于快速构建本地 Web 服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arya server</div><div class="line"><span class="comment"># 👏 Or Use Alias</span></div><div class="line">arya s</div></pre></td></tr></table></figure>
<p><strong>温馨说明</strong>：<code>arya s</code>，用于快速构建本地 Web 服务器，这是非常有用的功能；比如说，你想快速下载您电脑上资源至手机，那么即可在该资源目录下，运行 <code>arya s</code> 命令，就会以当前目录作为静态网站托管，建立一个 Server，并依据本地 IP（/电脑名）生成地址，只要手机端跟电脑在同一个网段下，即可访问下载；这里更贴心的是，会将对应地址生成<strong>二维码</strong>，并在控制台打印，用手机扫码即可访问。</p>
<p>实际上，这个功能有借助 <a href="https://github.com/lwsjs/lws" target="_blank" rel="external">lws</a> 来实现；它的功能当然是不止于上面表达的那一点，这对于开发人员来讲，尤为实用，这将会在后面不断迭代中，继续完善；也有打算出一个文档，以给出充分说明，敬请期待。</p>
<h5 id="⚡️-找到您本地-IP-地址并打印出来"><a href="#⚡️-找到您本地-IP-地址并打印出来" class="headerlink" title="⚡️ 找到您本地 IP 地址并打印出来"></a>⚡️ 找到您本地 IP 地址并打印出来</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arya ip</div></pre></td></tr></table></figure>
<p><strong>温馨说明</strong>：对于获取本地 IP 这一诉求，无论是使用 Mac、Linux 还是 Windows 用户，如果没有特殊配置，也是颇为麻烦的；即便在控制台使用 <code>ipconfig</code> or <code>ifconfig</code>，得到的结果也是需要一番筛选；而使用 <code>arya ip</code> 则可以轻松获取。</p>
<h5 id="👀-查看占用指定端口的程序"><a href="#👀-查看占用指定端口的程序" class="headerlink" title="👀 查看占用指定端口的程序"></a>👀 查看占用指定端口的程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arya port 8080</div><div class="line"><span class="comment"># Or</span></div><div class="line">arya port 8081</div></pre></td></tr></table></figure>
<p><strong>温馨说明</strong>：同样，在几个不同的平台上，想知晓某个端口（如：8080）被哪个程序所占用，也是需要一番周章的；在 Windows 系统，可以使用 <code>netstat</code> 命令，而在其他两个平台，大多数可能会选择 <code>lsof</code>；但记忆与操作起来毕竟麻烦，而使用 <code>arya</code> 相对就方面很多，可以通过以下命令做下对比：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 适用于 Windows 系统</span></div><div class="line">netstat -ano | findstr 8080</div><div class="line"></div><div class="line"><span class="comment"># 适用于 Mac Linux 系统</span></div><div class="line">lsof -i tcp:8080</div><div class="line"></div><div class="line"><span class="comment"># 适用于 Mac Linux Windows 系统</span></div><div class="line">arya port 8080</div></pre></td></tr></table></figure>
<h5 id="📷-为指定文本生成二维码"><a href="#📷-为指定文本生成二维码" class="headerlink" title="📷 为指定文本生成二维码"></a>📷 为指定文本生成二维码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arya qrcode <span class="string">"https://www.jeffjade.com/"</span></div><div class="line">arya qrcode <span class="string">"晚晴幽草轩轩主"</span></div></pre></td></tr></table></figure>
<p><strong>温馨说明</strong>：此项目集成了<a href="https://github.com/soldair/node-qrcod" target="_blank" rel="external">二维码生成器</a>，可以很便捷在控制台，就根据命令，为指定文本生成二维码，并提供保存于本地的功能；这相比于要在网上搜索在线服务，要方便许多，从节省更多时间角度考量，用 <code>arya qrcode</code> 是更好的抉择。</p>
<h5 id="🚝-列出-package-json-中的脚本命令"><a href="#🚝-列出-package-json-中的脚本命令" class="headerlink" title="🚝 列出 package.json 中的脚本命令"></a>🚝 列出 package.json 中的脚本命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arya ls</div><div class="line"><span class="comment"># 👏 Or Use Alias</span></div><div class="line">arya l</div></pre></td></tr></table></figure>
<p><strong>温馨说明</strong>：正如前文在<strong>故事起源</strong>中所提及的那般，<code>arya ls</code> 这个命令是这个项目的初衷：只为方便知晓前端项目 package.json 中都存在哪些脚本，以方便更快运行。只是在迭代中，越发多的集成了更多普遍可以用到的功能，此功能的存在显得就不是那么闪耀；但，作为引发燎原之势的那一缕星光🌟，将持久铭记，且常用之。</p>
<h2 id="写于文章结尾"><a href="#写于文章结尾" class="headerlink" title="写于文章结尾"></a>写于文章结尾</h2><p>即便已入中年，仍然坚信，只要<strong>主动折腾</strong>，<strong>勤于折腾</strong>，<strong>善于折腾</strong>，相信总能将生活与人生，折腾成自己越发欢喜的模样，对于这近乎无休止的工作，亦是如此。<a href="https://github.com/nicejade/arya-jarvis" target="_blank" rel="external">arya jarvis</a> 仍在考虑植入更多有用的功能，如果您有任何需求，您可以告诉我，或在此基础上进行扩展。如果您在使用过程中遇到任何问题，您可以随时向我的反馈。祝：生活幸福，工作快乐。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external"><strong>倾城之链</strong></a></li>
<li><a href="https://about.me/nicejade?utm_source=github.com" target="_blank" rel="external">About Me</a></li>
<li><a href="https://jeffjade.com/nicelinks?utm_source=github.com" target="_blank" rel="external">个人博客</a></li>
<li><a href="https://quickapp.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">静轩之别苑</a></li>
<li><a href="https://nice.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">静晴轩别苑</a></li>
<li><a href="https://docz.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">吾意静晴轩</a></li>
<li><a href="https://blog.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">天意人间舫</a></li>
<li><a href="https://weibo.com/jeffjade?utm_source=github.com" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">知乎主页</a></li>
<li><a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">简书主页</a></li>
<li><a href="https://segmentfault.com/u/jeffjade" target="_blank" rel="external">SegmentFault</a></li>
<li><a href="https://twitter.com/nicejadeyang" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://www.facebook.com/nice.jade.yang" target="_blank" rel="external">Facebook</a></li>
</ul>
<p>@2019-08-25 于东莞.长安 Last Modify：2019-09-07</p>
<hr>
<h3 id="您可能会感兴趣的文章"><a href="#您可能会感兴趣的文章" class="headerlink" title="您可能会感兴趣的文章"></a>您可能会感兴趣的文章</h3><ul>
<li><a href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/">Arya - 在线 Markdown 编辑器</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/">基于 Puppeteer 构建简易机器人</a></li>
<li><a href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/">基于 Vue-Cli3 构建的脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      荀子在《劝学》曰：君子生非异也，善假于物也。对于重复而精确性的事物，理想的目标是：有贴心工具加以协助，使得可以用更便捷的方式处理；Github 创建仓库：ARYA JARVIS，即是为此而做的尝试 ── 她旨在为开发人员节省更多时间、精力以及体力。而此篇文章的存在，介绍 ARYA JARVIS 的同时，也分享下关于对善假于物的理解。
    
    </summary>
    
      <category term="Toss" scheme="https://www.jeffjade.com/categories/Toss/"/>
    
    
      <category term="Tools" scheme="https://www.jeffjade.com/tags/Tools/"/>
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="Node" scheme="https://www.jeffjade.com/tags/Node/"/>
    
      <category term="Arya" scheme="https://www.jeffjade.com/tags/Arya/"/>
    
  </entry>
  
  <entry>
    <title>如何选定搭建个人独立博客工具</title>
    <link href="https://www.jeffjade.com/2019/07/29/156-vuepress-hexo-jekyll-ghost-gitbook-hugo-solo_compare-personal-website-generator/"/>
    <id>https://www.jeffjade.com/2019/07/29/156-vuepress-hexo-jekyll-ghost-gitbook-hugo-solo_compare-personal-website-generator/</id>
    <published>2019-07-29T12:20:20.000Z</published>
    <updated>2019-08-28T05:24:46.711Z</updated>
    
    <content type="html"><![CDATA[<p>身处当前数字化社会，打造<strong>个人品牌</strong>，越发显得重要（自我推销）。对于从事技相关的人群，欲要树立并长时间保持自己的<code>个人品牌</code>，最便捷的方法无疑是：坚持长时间高质量输出原创文章。就择取合适的博文平台，也是项技术活儿；本文主旨，就针对这承载文字的各类平台，结合其功能特点，探讨下其优劣所在，以便可为更多朋友，就如何选择博文平台诉求，提供些参考。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/vuepress-hexo-jekyll-ghost-gitbook-hugo-solo.jpg" alt="如何选定搭建个人独立博客工具"></p>
<p>早前在知乎上，有<a href="https://www.zhihu.com/question/327677612/answer/704842622" target="_blank" rel="external">如何在语雀，Gitbook，看云和 Hexo 个人博客取舍?</a>一问，受邀回答，兴之所至，趁着午休，就将过往的些经验，稍作整理，回帖分享。后来陆续有见类似提问，既如此，何不在博客中，专写一篇以作阐述？如此，再遇到类似问题，贴个链接则可，岂不快哉？于是，在拖延数日后，才有了这篇文章。</p>
<hr>
<p>就产出文字这事儿，如果写给自己看，无所谓在哪个平台；但，如果是对外，则一定要树立<strong>个人品牌</strong>；就个人品牌的塑造，个人更倾向的形态于是：<strong>个人博客</strong>；毕竟独立的才是自己的，而且，相比于公众号或者其他平台，都能更好的控制；同时也利于 <code>SEO</code>，能给更多的人提供帮助。在谈个人博客之前，先聊下时下还流行平台型博客：</p>
<blockquote>
<p><strong>微注</strong>：以下列出的诸多在线平台，皆不建议作为个人主要经营区域，不利于塑造大范围内的个人品牌（关于国内几个技术社区流量，可以参考<a href="https://hacpai.com/article/1559269869917" target="_blank" rel="external">国内技术社区流量一览</a>这篇帖子）。</p>
</blockquote>
<h2 id="在线承载文字平台"><a href="#在线承载文字平台" class="headerlink" title="在线承载文字平台"></a>在线承载文字平台</h2><h3 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a><a href="https://nicelinks.site/post/5b40437e615bf842b6091043" target="_blank" rel="external">语雀</a></h3><blockquote>
<p>优雅高效的在线文档编辑与协同工具，让每个企业轻松拥有文档中心，阿里巴巴集团内部使用多年，众多中小企业首选。主流 Office 文件全兼容，多人协同，轻松拥有团队知识库。企业文档中心化管理，各类文档井然有序，独立域名，随时随地安全获取。语雀致力于帮助每一个个体与企业，都拥有珍贵的知识财富。写文档，就用语雀！</p>
</blockquote>
<p>「<a href="https://nicelinks.site/post/5b40437e615bf842b6091043" target="_blank" rel="external">语雀</a>」是一个「知识创作工具」，孵化自 蚂蚁金服 ，是体验科技理念下的一款创新产品，已是 5万+ 阿里员工进行文档编写、知识沉淀的标配。一开始，他们只是希望给工程师提供一个写技术文档的 Web 工具，达成「文由汝心生、笔墨语雀来」这个小目标。在打磨产品过程中，发现身边的每个人、每个团队、每个组织都有很多知识，但一直以来缺少一个好用的工具让这些知识不只是留在每个人的大脑或者电脑里，还可以被记录、分享和交流。带着这颗初心，他们觉得语雀不应止步于服务工程师，应该致力于为每个想表达所思所想的人提供一款顺手的工具，让知识能得以记录和传播，让人们可以在「语雀」中平等快乐地创作和交流知识。</p>
<p><strong>个人品评</strong>：语雀，是相对较新的平台；支持富文本及 <code>Markdown</code>，且对后者做了优化，使得可以书写、预览一体化进行，进一步提升了写作体验。并且额外有注入<strong>查找替换</strong>、<strong>翻译</strong>、<strong>大纲</strong>等功能，极大提升了功能丰富性。如用来撰写文档，这将是一个非常棒的平台。</p>
<h3 id="简书"><a href="#简书" class="headerlink" title="简书"></a><a href="https://nicelinks.site/post/59ba831a3df6765c75b77917" target="_blank" rel="external">简书</a></h3><blockquote>
<p>简书是一个优质的创作社区，在这里，你可以任性地创作，一篇短文、一张照片、一首诗、一幅画……我们相信，每个人都是生活中的艺术家，有着无穷的创造力。</p>
</blockquote>
<p><strong>个人品评</strong>：早在 15 年就开始使用简书了，账号 ID：<a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">晚晴幽草</a>；彼时，简书才起步，文青范儿中透漏着些许创新，也因此有推荐给很多朋友；在随后的几年中，其写作体验，一成不变未见提升；而在运营中，则越发不尽如人意，这一点在些博文中有提及，此不赘述；而今，简书早已沦为一隅“鸡汤文遍野，标题党横行”之所，鲜有好文，环境若此，不用也罢。</p>
<h3 id="博客园"><a href="#博客园" class="headerlink" title="博客园"></a><a href="https://nicelinks.site/post/59c8ecc88f066a5dda100f51" target="_blank" rel="external">博客园</a></h3><blockquote>
<p>博客园是一个面向开发者的知识分享社区。自创建以来，博客园一直致力并专注于为开发者打造一个纯净的技术交流社区，推动并帮助开发者通过互联网分享知识，从而让更多开发者从中受益。博客园的使命是帮助开发者用代码改变世界。</p>
</blockquote>
<p><strong>个人品评</strong>：在开始工作的那一年，才知道博客园并注册，那是个人第一个博客：<a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="external">云轩奕鹤</a>；也是由此开启了写博之旅，那时：2013 年 8 月。至此，时光已然过去 6 年，博客园的模样依旧，虽然也是支持 <code>Markdown</code>，但使用体验仍止步不前，多少有些不思上进的味道；不过，索性运营仍是不改初心，至今，仍会有很多不错的文章，可惜，其知名度已不复当年。作为技术开发者，倘若写了好文，可同步一份至该平台，分享 &amp; 引流。</p>
<h3 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a><a href="https://nicelinks.site/post/5adf54a6cbf8b27043e5e9d7" target="_blank" rel="external">掘金</a></h3><blockquote>
<p>掘金是一个帮助开发者成长的社区，是给开发者用的 Hacker News，给设计师用的 Designer News，和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技术大牛和极客共同编辑为你筛选出最优质的干货，其中包括：Android、iOS、前端、后端等方面的内容。用户每天都可以在这里找到技术世界的头条内容。与此同时，掘金内还有沸点、掘金翻译计划、线下活动、专栏文章等内容。即使你是 GitHub、StackOverflow、开源中国的用户，我们相信你也可以在这里有所收获。</p>
</blockquote>
<p><strong>个人品评</strong>：依稀记得，掘金初出来时候，是有所耳闻的；但不知是在何时，就突然间壮大了，因此也有注册账号：<a href="https://juejin.im/user/56db42501532bc005092fea1" target="_blank" rel="external">杨琼璞</a>，在写了觉得不错文章后，会在该平台分享下链接，也是有给个人博客带来了流量。客观残酷的现实（事实）是，平台一旦大了，涌入的更多人群，必将拉低社区的质量，微博、知乎、Github 无不如此；<code>掘金</code>同样不能摆脱这样的命运，如今文章质量参差不齐，且日渐走低。鉴于掘金已将其 <code>SEO</code> 优化已至化境，已不建议同步文章至该平台，以防稀释自己主平台搜索点击量。</p>
<h3 id="SegmentFault"><a href="#SegmentFault" class="headerlink" title="SegmentFault"></a><a href="https://nicelinks.site/post/59c8e9208f066a5dda100f4b" target="_blank" rel="external">SegmentFault</a></h3><blockquote>
<p>SegmentFault ( <a href="http://www.sf.gg" target="_blank" rel="external">www.sf.gg</a> ) 是中国领先的开发者技术社区。 我们希望为编程爱好者提供一个纯粹、高质的技术交流的平台， 与开发者一起学习、交流与成长，创造属于开发者的时代！</p>
</blockquote>
<blockquote>
<p><strong>个人品评</strong>：回顾下个人在 <a href="https://nicelinks.site/post/59c8e9208f066a5dda100f4b" target="_blank" rel="external">SegmentFault</a> 的动态，在 2015 年初，有开始注册并使用，账号 ID: <a href="https://segmentfault.com/u/jeffjade/" target="_blank" rel="external">jeffjade</a>；早期在闲暇时间，会偶尔回答些自己有把握的问题；现在偶有些时间，写写文章，会在这上面同步下链接（称之为“发头条”）。在国内的开发者技术社区中，这个最像 <code>Stack Overflow</code>。它集<code>提问题</code>、<code>发头条</code>、<code>写文章</code>、<code>记笔记</code>等功能为一体，另外还设有“圈子”、“专栏”、“课程”、“酷工作”等模块，是当下比较不错的中文开发者社区；也非常推荐各种开发者加以利用 &amp; 贡献。在这个平台写文章，有很不错的用户体验；但，更推荐在自己的平台写，可以同步一份链接发到头条，一来分享给更多人，同时也可以给自己平台导流量，也不用担心会引起 <code>SEO</code> 副作用。</p>
</blockquote>
<h3 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a><a href="https://nicelinks.site/post/59ba82953df6765c75b77915" target="_blank" rel="external">知乎</a></h3><blockquote>
<p>中文互联网最大的知识平台，帮助人们便捷地分享彼此的知识、经验和见解。</p>
</blockquote>
<blockquote>
<p><strong>个人品评</strong>：也是在开始工作的那一年，才知道知乎并注册，账号 ID：<a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">杨琼璞</a>；那时知乎，感觉是“高大上”的存在，多是看 &amp; 收藏，鲜有回答或者写文章；一年以前，有开了专栏，偶尔同步几篇文章，也未精心经营，反响一般，就更不在怎么管；如今的知乎，与掘金如出一辙；偶尔刷下，多遇广告，幸而还能看到些觉得好的回帖，也就仍在使用，兴致踏来，也会回下帖。话说，它也是支持 <code>Markdown</code> 语法的；但那种书写、预览一体化，总给人一种像是 Bug 的“错觉”，而不是体验的改善；这一点，可以向<a href="https://nicelinks.site/post/5b40437e615bf842b6091043" target="_blank" rel="external">语雀</a>学习。</p>
</blockquote>
<h2 id="静态独立博客工具"><a href="#静态独立博客工具" class="headerlink" title="静态独立博客工具"></a>静态独立博客工具</h2><p>诚然，对于博文，更重要的部分在于写内容；但毕竟：“<strong>工欲善其事，必先利其器</strong>”；“更好的刀，能助你更快的砍柴”，因此，在工具上的几番折腾是有必要的；况且，不同工具间差异化的设计理念，也会令人从中学到很多。如果您感兴趣，可以参见 <a href="https://nicelinks.site/tags/%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8" target="_blank" rel="external">网站生成器</a> 抑或这份<a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/tools-tutorial.md#%E5%BB%BA%E7%AB%99%E5%B7%A5%E5%85%B7" target="_blank" rel="external">建站工具列表</a>，根据自己最看重的点，对比筛选，从而选取最适合自己的工具。下面就个人所熟悉的几个做下阐述、品评。</p>
<h3 id="Gitbook"><a href="#Gitbook" class="headerlink" title="Gitbook"></a><a href="https://nicelinks.site/post/5c7d27dace377707f7f675f3" target="_blank" rel="external">Gitbook</a></h3><blockquote>
<p>GitBook makes it easy for your team to write and maintain high-quality documentation. Share knowledge, boost your team’s productivity and make your users happy.</p>
</blockquote>
<p>Gitbook，基于 GitHub/Git 和 Markdown（或 AsciiDoc）编写和维护高质量的文档，分享知识，提高团队的工作效率；自带还可以用的站内搜索功能；如果您有搭建技术文档、编写电子书的诉求，那么 <a href="https://www.gitbook.com/?utm_source=nicelinks.site" target="_blank" rel="external">GitBook</a> 将是一个不错的选择。<a href="https://bbs.quickapp.cn/" target="_blank" rel="external">Gitbook 示例站点</a>。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://nicelinks.site/post/5c4c56d5a5957e07a40b3116" target="_blank" rel="external">Hexo</a></h3><blockquote>
<p>Hexo is a fast, simple &amp; powerful blog framework powered by Node.js.</p>
</blockquote>
<p><a href="https://hexo.io/?utm_source=nicelinks.site" target="_blank" rel="external">Hexo</a> 是一个由 <code>Node.js</code> 提供支持的快速，简单且功能强大的博客框架。<strong>超快速度:</strong> Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。<strong>一键部署</strong>：支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<strong>支持 Markdown</strong>: 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。<strong>丰富的插件</strong>: <a href="https://hexo.io/?utm_source=nicelinks.site" target="_blank" rel="external">Hexo</a> 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<p><strong>个人品评</strong>：Hexo, 产品成熟，使用简单，功能强大，有丰富的各种插件资源；但，像发布后台、站内搜索，评论系统类似诉求，虽然有对应的工具，但也需要自己折腾下；Hexo 示例博客： <a href="https://www.jeffjade.com/?utm_source=jeffjade.com">晚晴幽草轩</a>。</p>
<h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a><a href="https://nicelinks.site/post/5c4c59c1a5957e07a40b3118" target="_blank" rel="external">Jekyll</a></h3><blockquote>
<p>将纯文本转换为静态博客网站。</p>
</blockquote>
<p><a href="https://jekyllcn.com/?utm_source=nicelinks.site" target="_blank" rel="external">Jekyll</a> 是一个由 Ruby 提供支持的简单、可识别博客的静态站点生成器，非常适合个人，项目或组织站点。 可以把它想象成一个基于文件的 CMS，没有复杂性。 <a href="https://jekyllcn.com/?utm_source=nicelinks.site" target="_blank" rel="external">Jekyll</a> 获取您的内容，呈现 <a href="https://nicelinks.site/tags/Markdown?utm_source=nicelinks.site" target="_blank" rel="external">Markdown</a> 和 Liquid 模板，并呈现一个完整的静态网站。 她是 GitHub Pages 背后的引擎，您可以使用它来直接从 <a href="https://nicelinks.site/post/59ba80d93df6765c75b77911" target="_blank" rel="external">GitHub</a> 存储库托管站点。</p>
<p><strong>个人品评</strong>：从几年前开始，就有尝试基于这款工具搭建博客；它也是 Github 针对静态站点的标配工具；如今，中文文档也已齐全，各种 UI 设计也是多不可数；它跟 <code>Hexo</code> 很相似，非常适合个人组织站点；只不过这是基于 Ruby  所开发，使用手法，略有不同；虽有学习成本，不过依着文档操作，也可快速搭建完成；Jekyll 示例博客：<a href="https://blog.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">天意人间舫</a>。</p>
<h3 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a><a href="https://nicelinks.site/post/5b2298f5d1c6ca419a9f7e00" target="_blank" rel="external">Vuepress</a></h3><blockquote>
<p>Vue-powered Static Site Generator.</p>
</blockquote>
<p><a href="https://vuepress.vuejs.org/" target="_blank" rel="external">VuePress</a>，由 <code>Vue</code> 驱动的静态网站生成器；它追求<strong>简洁至上</strong>，以最少的配置帮助你专注于写作；使用它可享受 <code>Vue</code> + <code>Webpack</code> 的开发体验，可以在 <code>Markdown</code> 中使用 <code>Vue</code> 组件，又可以使用 <code>Vue</code> 来开发自定义主题；VuePress 会为每个页面预渲染生成静态的 HTML，同时，每个页面被加载的时候，将作为 <strong>SPA</strong> 运行，使得页面具有非常好的加载性能和搜索引擎优化（SEO）；另外还内置了诸多优质特性，比如 Markdown 拓展，自动生成 Service Worker、Google Analytics 集成、多语言支持、以及功能丰富的默认主题等等…… 如果您有搭建技术文档、个人博客的需求，那么 <a href="https://vuepress.vuejs.org/?utm_source=jeffjade.com" target="_blank" rel="external">VuePress</a> 将是超棒的选择。</p>
<p><strong>个人品评</strong>：Vuepress  是由 <a href="https://nicelinks.site/post/5b1a221c0526c920d6dfaada" target="_blank" rel="external">Vue</a> 驱动的静态网站生成器，所以，这针对前端开发者，这个是非常棒的选择；另外，它追求简洁至上，以最少的配置，帮助你专注于写作，更对 <code>Markdown</code> 增加了额外的功能，很大程度上提升了阅读体验。只不过，目前发展不久，各种相关性插件还不足，但这也正是前端爱好者发光发热的契机。Vuepress 示例站点：<a href="https://nice.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">静晴轩别苑</a>、<a href="https://www.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">幽居空谷轩</a>。</p>
<h3 id="Docz"><a href="#Docz" class="headerlink" title="Docz"></a><a href="https://nicelinks.site/post/5b225adfd1c6ca419a9f7dfe" target="_blank" rel="external">Docz</a></h3><blockquote>
<p>It has never been so easy to document your things.</p>
</blockquote>
<p><a href="https://www.docz.site/" target="_blank" rel="external">Docz</a>，为极简创造文档而生。它有如下特征：<strong>零配置</strong>，无需担心复杂的配置步骤，且使用十分简单；采用 <code>Wepack 4</code> 构建，完全热重新加载支持和自动代码分割；基于 <code>MDX</code>( <em>Markdown + JSX</em> )，极大降低组件编写复杂度；易于创建自定义主题；<strong>可插拔</strong>，支持定制灵活的解决方案；支持 <code>Typescript</code>，允许您的类型定义。另外，<a href="https://www.docz.site/" target="_blank" rel="external">Docz</a> 内置了些许组件，通过在组件构建过程中结合 <code>AST</code> 解析，有可能带来很多出类拔萃的想法，而 <strong>Docz</strong> 则是更好的选择。甚至，您可以轻松构建和部署您的文档，从而建立您的网站。</p>
<p><strong>个人品评</strong>：它同 VuePress 一样，用到了大量前端领域新的技术，因此，对前端开发者也同样具有诱惑力；相比于其他产品，它提供了 <code>Playground</code> 组件，您可以在 <code>Playground</code> 中渲染组件并查看使用的代码，那么它可以用过各种 <code>UI</code> 框架的展示文档；缺陷也雷同，目前发展不久，各种相关性插件还不足；另一个缺陷是，它构建出来的是 SPA，而 GitHub Pages 本身不支持单页面应用程序（SPA），所以要部署在 Github，则要额外解决这个问题。Docz 示例站点：<a href="https://docz.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">吾意静晴轩</a>。</p>
<h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a><a href="https://nicelinks.site/post/5c36d7b2589b2a35f579f377" target="_blank" rel="external">Hugo</a></h3><blockquote>
<p>The world’s fastest framework for building websites</p>
</blockquote>
<p><a href="https://gohugo.io/?utm_source=nicelinks.site" target="_blank" rel="external">Hugo</a>（The world’s fastest framework for building websites） 是最受欢迎的开源静态站点生成器之一。凭借其惊人的速度和灵活性，可在几秒钟内安装，以毫秒为单位构建；<a href="https://gohugo.io/?utm_source=nicelinks.site" target="_blank" rel="external">Hugo</a>使建筑网站再次变得有趣。<a href="https://gohugo.io/?utm_source=nicelinks.site" target="_blank" rel="external">Hugo</a> 提供了一个强大的<a href="http://themes.gohugo.io/?utm_source=nicelinks.site" target="_blank" rel="external">主题系统</a>，易于实现，但即使是最复杂的网站也能生成；并能在任何服务器或您喜欢的 <code>CDN</code> 上托管。</p>
<p><strong>个人品评</strong>：就如 <code>Hugo</code> 所宣称的那样：世界上最快的网站构建框架；它的的构建速度真是<strong>快</strong>，Hugo是一个用 <a href="https://golang.org/" target="_blank" rel="external">Go</a> 编写的静态 HTML 和 CSS 网站生成器。它针对速度，易用性和可配置性进行了优化。Hugo 获取包含内容和模板的目录，并将它们呈现为完整的 HTML 网站。<code>Hugo</code> 旨在适用于任何类型的网站，包括博客，翻滚和文档。之前项目中有涉及 200 余个 <code>.md</code> 文件，采用 <code>Gitbook</code> 构建，在本地运行许会卡死，而采用 Hugo 在 10s 左右就可完成；而且它使用简单、主题丰富、有强大的模板等优点，也是部署博客、文档的不错选择。Hugo 示例站点：<a href="https://aboutme.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">晚晴幽草轩轩主</a>。</p>
<h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a><a href="https://nicelinks.site/post/5d4fec8c4c0a2404cc79f97a" target="_blank" rel="external">Docsify</a></h3><blockquote>
<p>🃏 A magical documentation generator.</p>
</blockquote>
<p><a href="https://docsify.js.org/?utm_source=nicelinks.site" target="_blank" rel="external">Docsify</a>：一个神奇的文档站点生成器。它简单轻巧，能即时生成您的文档网站，且拥有智能全文搜索插件。与 <a href="https://nicelinks.site/post/5c7d27dace377707f7f675f3" target="_blank" rel="external">GitBook</a> 不同，它不会生成静态 <code>html</code> 文件（但支持服务器端渲染，见<a href="https://github.com/docsifyjs/docsify-ssr-demo" target="_blank" rel="external">示例</a>）。相反，它可以智能地加载和解析您的 Markdown 文件并将其显示为网站。要开始使用它，您需要做的就是<a href="https://docsify.js.org/#/deploy" target="_blank" rel="external">在 GitHub 页面上</a>创建 <code>index.html</code> 并<a href="https://docsify.js.org/#/deploy" target="_blank" rel="external">部署</a>。如果您有静态文档需要挂载，那么 <a href="https://docsify.js.org/?utm_source=nicelinks.site" target="_blank" rel="external">Docsify</a> 是非常值得选择的工具利器。</p>
<h3 id="GitHub-personal-website-generator"><a href="#GitHub-personal-website-generator" class="headerlink" title="GitHub personal website generator"></a><a href="https://nicelinks.site/post/5c72376b77e63e07f2994445" target="_blank" rel="external">GitHub personal website generator</a></h3><blockquote>
<p>Build a personal website that shows off your contributions, interests, and development experience. It’s your own fully-customizable GitHub profile powered by our API, GitHub Pages, and Jekyll—ready for anyone interested in your work—as soon as you’re ready to share it.</p>
</blockquote>
<p>这由 <a href="https://nicelinks.site/post/59ba80d93df6765c75b77911" target="_blank" rel="external">Github</a> 官方出品的<a href="https://github.dev/?utm_source=jeffjade.com" target="_blank" rel="external">个人网站生成器</a>工具；它可以快速帮你建立一个展示您的贡献、兴趣和开发经验的个人网站。 它是您自己的完全可自定义的GitHub配置文件，由 GitHub API，GitHub Pages 和 Jekyll 提供支持，适用于对您的工作感兴趣的任何人 - 只要您准备好分享它。</p>
<p><strong>个人品评</strong>：该工具开箱即用，与 <a href="https://nicelinks.site/post/59ba80d93df6765c75b77911" target="_blank" rel="external">Github</a> 保持同步，支持添加自定义域名，使您可以专注于重要的事情。有借助它在极短时间内，构建了展示<a href="https://github.lovejade.cn/?utm_source=nicelinks.site" target="_blank" rel="external">个人 Github 相关的网站</a>，其出色的设计，令人使用体验感觉良好；当然，您完全可以在其基础上，根据您的想法做任何扩展。同类型的还有：<a href="https://github.com/imfunniee/gitfolio" target="_blank" rel="external">gitfolio</a>：personal website + blog for every github user。只不过该工具所具备功能过于简单，暂时也没有相关性插件予以弥补，可用以作为个人 <code>Github</code> 展示工具。Github Generator 示例站点：<a href="https://github.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Github | 杨琼璞</a>。</p>
<hr>
<p>诸如此类的优良工具，还有很多，比如基于 PHP 语言所开发老牌博客平台 <a href="https://wordpress.org/" target="_blank" rel="external">WordPress</a>、由 React 所构建的渐进式静态站点生成器 <a href="https://github.com/react-static/react-static/" target="_blank" rel="external">react-static</a>，以及不少读者所反馈的 <a href="http://typecho.org/" target="_blank" rel="external">Typecho</a> 等等 ，鉴于篇幅,就不在此逐一列举，感兴趣的朋友可以参见 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/tools-tutorial.md#建站工具" target="_blank" rel="external">建站工具列表</a>。</p>
<p><strong>温馨提醒</strong>：以上这些工具，站内搜索、部署以及评论，都是需要自行搞定的，但折腾起来也比较轻松；站内搜索，可以使用 <a href="https://nicelinks.site/post/5b141444ca049846c6ee6f91" target="_blank" rel="external">Algolia</a>：提供搜索即服务，帮助你打造实时的网站及应用内搜索服务。至于部署和评论，都可以基于 <a href="https://nicelinks.site/post/59ba80d93df6765c75b77911" target="_blank" rel="external">Github</a> 就好；分别是 <code>Github pages</code> 服务和 <code>Github Issues</code>。</p>
<h2 id="支持后台的博客系统"><a href="#支持后台的博客系统" class="headerlink" title="支持后台的博客系统"></a>支持后台的博客系统</h2><p>除了上述很多静态博客工具，也有很多集成了后台发布等功能的博客系统；基于这些工具所打造的平台，进一步方便了博文的发布与修改；如果你有自己的服务器，推荐积极尝试下。下面就两款有所实践的工具，做下介绍。</p>
<h3 id="Ghost"><a href="#Ghost" class="headerlink" title="Ghost"></a><a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a></h3><blockquote>
<p><a href="https://ghost.org/?utm_source=nicelinks.site" target="_blank" rel="external">Ghost</a> 一个简洁、纯粹的内容创作与发布平台，目由非盈利性组织 Ghost Foundation 和一群优秀的独立贡献者共同维护。她是基于 Node.js 构建，具有易用的书写界面和体验；官方提供 Docker 镜像，部署颇为简单；博客内容默认采用 <a href="https://nicelinks.site/tags/Markdown" target="_blank" rel="external">Markdown</a> 语法书写，其目标是取代臃肿的 Wordpress。另外，她具有一个非常强劲好用的后台，丰富的编辑功能，让你触手可及；允许注入代码，结构化数据，自定义 Facebook 和 Twitter 的社交媒体共享卡，使您能够为社交媒体添加自定义图像，标题和说明，十分利于 <strong>SEO</strong>；并且集成大量外部服务，允许您创建和自定义各种连接的应用程序；并且支持自定义主题，允许多人协作等等等等，更多功能可以参见<a href="https://quickapp.lovejade.cn/ghost-open-source-blog-platform/?utm_source=nicelinks.site" target="_blank" rel="external">强大如斯，Ghost 开源博客平台</a>；另附 <a href="https://docs.ghost.org/?utm_source=nicelinks.site" target="_blank" rel="external">Ghost 文档地址</a>。</p>
</blockquote>
<p><img src="https://image.nicelinks.site/ghost-blog-admin.png" alt="Ghost 博客系统后台"></p>
<p><strong>个人品评</strong>：<code>Ghost</code>，是个人非常欢喜的博客系统；其 UI 极具美感，集成了非常多插件，如  <a href="https://nicelinks.site/post/59de1d0c23becb573bb95c68" target="_blank" rel="external">Unsplash</a> 等；自带强大的后台，可自定义修改；支持多人协作，部署简单…. 唯一欠缺的是，在国内使用，需要自行关联评论系统；Ghost 示例博客站点：<a href="https://quickapp.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">静轩之别苑</a>。</p>
<h3 id="Solo"><a href="#Solo" class="headerlink" title="Solo"></a><a href="https://solo.b3log.org/?utm_source=jeffjade.com" target="_blank" rel="external">Solo</a></h3><blockquote>
<p>Solo - 一款小而美的 Java 开源博客系统，专为程序员设计。</p>
</blockquote>
<p><strong>个人品评</strong>：Solo，是基于 <code>java</code> 所打造的开源博客系统，沉淀至今，融入了非常多用户应该都会用到功能，包括评论、置顶、国际化、多用户协作、多端适配、社区同步等各种功能；早期也是有尝试使用 Docker 搭建，整个过程较为顺利，只不过未能找到满意主题而作罢；如今，其开发者借鉴了 <a href="https://ghost.org/?utm_source=nicelinks.site" target="_blank" rel="external">Ghost</a> 的一些 <code>UI</code> 设计，已然是弥补了博客皮肤这块的不足，是个人比较推荐的博客系统；另外，基于 Solo 而搭建的博客，也可以同步推送至 <a href="https://hacpai.com/?utm_source=jeffjade.com" target="_blank" rel="external">黑客派</a> 社区，以增加曝光度。Solo 示例博客站点：<a href="https://88250.b3log.org/?utm_source=jeffjade.com" target="_blank" rel="external">D 的个人博客</a></p>
<hr>
<p>备注：以上提及的博文平台或系统，书写都是可基于 <strong>Markdown</strong>；可以基于 <a href="https://nicelinks.site/post/5af55777979f626ea3d37917" target="_blank" rel="external">VsCode</a>、<a href="https://nicelinks.site/post/5af314ad979f626ea3d37912" target="_blank" rel="external">Atom</a> 或者其他 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/markdown-tutorial.md#%E8%B5%84%E6%BA%90%E5%B9%B3%E5%8F%B0" target="_blank" rel="external">Markdown 编辑器</a>，视自己兴趣或习惯而定。</p>
<p>综合以上信息，倘若已拥有个人服务器，推荐使用 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 搭建；暂时还没有：如果是前端开发者，则看个人兴趣，倾向于 <code>VuePress</code>；如不是：建议使用 <a href="https://nicelinks.site/post/5c4c56d5a5957e07a40b3116" target="_blank" rel="external">hexo</a>，相对来讲：产品更为成熟，使用简单，功能强大，插件丰富，社区活跃。</p>
<h2 id="文章最后寄语"><a href="#文章最后寄语" class="headerlink" title="文章最后寄语"></a>文章最后寄语</h2><p>“能够获得暴利的职业，都有一个共同特点：可扩展性，一次劳动可以服务成千上万的人”。软件、电影、游戏行业都具有可扩展性，作品的生产成本是固定的，但可以被消费无数次，所以有巨大的获利空间，创造出许许多多的富豪。阮一峰在其<a href="http://www.ruanyifeng.com/blog/2019/05/weekly-issue-54.html" target="_blank" rel="external">每周分享第 54 期</a>中，引用到一段话：“写作是最具可扩展性的活动。你呆在家里，不去参加活动、会议，只是在网上写下自己的想法，然后你就具有了最好的可扩展性”。对此观点，深以为然，你觉得呢？</p>
<p>@2019-07-29 于东莞.长安 Last Modify：2019-08-01</p>
<hr>
<h3 id="您可能会感兴趣的文章"><a href="#您可能会感兴趣的文章" class="headerlink" title="您可能会感兴趣的文章"></a>您可能会感兴趣的文章</h3><ul>
<li><a href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/">Arya - 在线 Markdown 编辑器</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/">基于 Puppeteer 构建简易机器人</a></li>
<li><a href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/">基于 Vue-Cli3 构建的脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      身处当前数字化社会，打造个人品牌，越发显得重要（自我推销）。对于从事技相关的人群，欲要树立并长时间保持自己的个人品牌，最便捷的方法无疑是：坚持长时间高质量输出原创文章。就择取合适的博文平台，也是项技术活儿；本文主旨，就针对这承载文字的各类平台，结合其功能特点，探讨下其优劣所在，以便可为更多朋友，就如何选择博文平台诉求，提供些参考。
    
    </summary>
    
      <category term="Toss" scheme="https://www.jeffjade.com/categories/Toss/"/>
    
    
      <category term="Tools" scheme="https://www.jeffjade.com/tags/Tools/"/>
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="Hexo" scheme="https://www.jeffjade.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Puppeteer 构建简易机器人</title>
    <link href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/"/>
    <id>https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/</id>
    <published>2019-06-14T05:14:15.000Z</published>
    <updated>2019-07-09T15:11:32.667Z</updated>
    
    <content type="html"><![CDATA[<p>呼，身处这数字信息化智能时代，即便是个人，也是很有必要利用各种工具，打造属于自己的自动化机器人，以协助完成些精确性事物，使得可以节省更多的时间，来学习或者做更有意义的事情；基于这种想法、以及那越发繁忙的现实，现终于开始尝试；<a href="https://github.com/nicejade/puppeteer-robot" target="_blank" rel="external">Puppeteer Robot</a> 仓库的建立，即为这漫漫长路，所迈出的第一步。此文即对此仓库的背景、目标、使用以及进化历程做下阐述。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/puppeteer-robot.jpeg?v1" alt="Puppeteer Robot"></p>
<h2 id="目标与哲学"><a href="#目标与哲学" class="headerlink" title="目标与哲学"></a>目标与哲学</h2><blockquote>
<p>身处这数字信息化智能时代，即便是个人，也是很有必要利用各种工具，打造属于自己的自动化机器人，以协助完成些精确性事物，使得可以节省更多的时间，来学习或者做更有意义的事情；基于新学到技能，再反过来改进、完善自动化流程；如此，形成良性循环，坚持往复，从而在此大争之世，获取更多一些竞争力，以期达成过自己想要的生活。此 <a href="https://github.com/nicejade/puppeteer-robot" target="_blank" rel="external">Puppeteer Robot 仓库</a>的建立，就是为此目标而做的初步尝试。</p>
</blockquote>
<p>截止目前，它可以完成以下事宜：</p>
<ul>
<li>每天指定时间，自动登录<a href="https://hacpai.com/register?r=jeffjade" target="_blank" rel="external">黑客派</a>社区网站，并进行签到；</li>
</ul>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p><code>Puppeteer</code> 至少需要 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> v6.4.0，但下面的示例使用 <code>async</code> / <code>await</code>，它仅在 Node v7.6.0 或更高版本中受支持。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 🎉 clone the project</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/nicejade/puppeteer-robot.git your-project-name</div><div class="line"><span class="built_in">cd</span> your-project-name</div><div class="line"></div><div class="line"><span class="comment"># ➕ install dependencies &amp; start dev</span></div><div class="line">yarn</div></pre></td></tr></table></figure>
<p>此外，你需要单独下载  <code>Chromium</code>（国内用户可以在 <a href="https://npm.taobao.org/mirrors/chromium-browser-snapshots/" target="_blank" rel="external">Taobao Mirrors</a> 根据系统按需下载）,并将其放置到项目根目录下即可；当然，你也可以通过修改代码，指定其所在的其他位置。</p>
<blockquote>
<p><strong>备注：</strong> <code>Puppeteer</code> 需要用到 <code>Chromium</code>，但，即便处于 Science 上网的姿态， 也会遇到 Chromium 无法成功下载的问题；所以在此项目中，有替换成使用 <a href="https://github.com/GoogleChrome/puppeteer#puppeteer-core" target="_blank" rel="external">puppeteer-core</a> （默认情况下不下载 Chromium，使用时须要确保您安装的 <code>puppeteer-core</code> 版本与您要连接的浏览器兼容）；鉴于此，还是手动下载 <code>Chromium</code>，通过设定 <code>executablePath</code> 来使用。</p>
</blockquote>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>您需要在 <code>src/config</code> 目录下，根据 <code>secretSample.js</code> 格式，创建 <code>secret.js</code> 文件，并修改其中配置；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn start</div></pre></td></tr></table></figure>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://pptr.dev/" target="_blank" rel="external">Headless Chrome Node API</a></li>
<li><a href="https://github.com/transitive-bullshit/awesome-puppeteer" target="_blank" rel="external">Awesome Puppeteer Curated List</a></li>
<li><a href="https://www.jeffjade.com/2017/12/17/134-kinds-of-toss-using-puppeteer/">大前端神器安利之 Puppeteer</a></li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external"><strong>倾城之链</strong></a></li>
<li><a href="https://about.me/nicejade?utm_source=github.com" target="_blank" rel="external">About Me</a></li>
<li><a href="https://jeffjade.com/nicelinks?utm_source=github.com" target="_blank" rel="external">晚晴幽草轩</a></li>
<li><a href="https://quickapp.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">静轩之别苑</a></li>
<li><a href="https://nice.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">静晴轩别苑</a></li>
<li><a href="https://blog.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">天意人间舫</a></li>
<li><a href="https://weibo.com/jeffjade?utm_source=github.com" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">知乎主页</a></li>
<li><a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">简书主页</a></li>
<li><a href="https://segmentfault.com/u/jeffjade" target="_blank" rel="external">SegmentFault</a></li>
<li><a href="https://twitter.com/nicejadeyang" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://www.facebook.com/nice.jade.yang" target="_blank" rel="external">Facebook</a></li>
</ul>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2017/12/17/134-kinds-of-toss-using-puppeteer/">大前端神器安利之 Puppeteer</a></li>
<li><a href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/">Arya - 在线 Markdown 编辑器</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/">基于 Vue-Cli3 构建的脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      身处这数字信息化智能时代，即便是个人，也是很有必要利用各种工具，打造属于自己的自动化机器人，以协助完成些精确性事物，使得可以节省更多的时间，来学习或者做更有意义的事情；基于新学到技能，再反过来改进、完善自动化流程；如此，形成良性循环，坚持往复，从而在此大争之世，获取更多一些竞争力，以期达成过自己想要的生活。此 Puppeteer Robot 仓库的建立，就是为此目标而做的初步尝试。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
      <category term="Puppeteer" scheme="https://www.jeffjade.com/tags/Puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>Arya - 在线 Markdown 编辑器</title>
    <link href="https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/"/>
    <id>https://www.jeffjade.com/2019/05/31/155-arya-markdown-online-editor/</id>
    <published>2019-05-31T10:19:20.000Z</published>
    <updated>2019-12-12T16:35:11.717Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Arya</a>，是一款基于 <code>Vue</code>、<code>Vditor</code>，为未来而构建的在线 Markdown 编辑器；轻量且强大：内置粘贴 HTML 自动转换为 Markdown，支持流程图、甘特图、时序图、任务列表，可导出携带样式的图片、PDF、以及转换 Markdown 成微信公众号特制的 HTML 等；另外支持<strong>实时预览</strong>、<strong>本地存储</strong>、字符计数，提供常用快捷键（含<strong>Tab</strong>），及代码块添加复制等功能。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/arya-markdown-editor.jpg" alt="Arya - 在线 Markdown 编辑器"></p>
<blockquote>
<p><a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Arya</a> 另一大优点在于：编辑内容只会在您本地进行保存，不会上传您的数据至服务器，<strong>绝不窥测用户个人隐私，可放心使用</strong>；Github 源码：<a href="https://github.com/nicejade/markdown-online-editor" target="_blank" rel="external">markdown-online-editor</a>，部分功能仍在开发🚧，敬请期待。</p>
</blockquote>
<h2 id="背景初衷"><a href="#背景初衷" class="headerlink" title="背景初衷"></a>背景初衷</h2><p>早期就有关注到由<a href="https://hacpai.com/?utm_source=jeffjade.com" target="_blank" rel="external">黑客派</a>所出品的 <a href="https://hacpai.com/tag/vditor?utm_source=jeffjade.com" target="_blank" rel="external">Vditor</a>：一款为未来而构建的下一代 <a href="https://nicelinks.site/tags/Markdown/?utm_source=jeffjade.com" target="_blank" rel="external">Markdown</a> 编辑器。然，现而今市面上所存在的 <a href="https://nicelinks.site/tags/Markdown/?utm_source=jeffjade.com" target="_blank" rel="external">Markdown</a> 编辑器，或多或少都存在一些问题（或功能不全，或高级功能收费…），因此基于自身所需，加之 <a href="https://hacpai.com/tag/vditor?utm_source=jeffjade.com" target="_blank" rel="external">Vditor</a> 的强大，就诞生了做一款<a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">在线 Markdown 编辑器</a> 的念头；取其名曰：<code>Arya</code>，个中原由，有在<a href="https://quickapp.lovejade.cn/talking-game-of-thrones/?utm_source=jeffjade.com" target="_blank" rel="external">观《权利的游戏》感记</a>一文有做记载。</p>
<h2 id="功能支持🎉"><a href="#功能支持🎉" class="headerlink" title="功能支持🎉"></a>功能支持🎉</h2><input type="checkbox" checked="checked" disabled="disabled">     🎉 通常 <code>Markdown</code> 解析器自带的基本功能；<br><input type="checkbox" checked="checked" disabled="disabled">     ✨ 支持<strong>流程图</strong>、<strong>甘特图</strong>、<strong>时序图</strong>、<strong>任务列表</strong>；<br><input type="checkbox" checked="checked" disabled="disabled">     🏁 支持粘贴 HTML 自动转换为 Markdown；<br><input type="checkbox" checked="checked" disabled="disabled">     💃🏻 支持插入原生 Emoji、设置常用表情列表；<br><input type="checkbox" checked="checked" disabled="disabled">     🚑 支持编辑内容保存<strong>本地存储</strong>，防止意外丢失；<br><input type="checkbox" checked="checked" disabled="disabled">     📝 支持<strong>实时预览</strong>，主窗口大小拖拽，字符计数；<br><input type="checkbox" checked="checked" disabled="disabled">     🛠 支持常用快捷键(<strong>Tab</strong>)，及代码块添加复制；<br><input type="checkbox" checked="checked" disabled="disabled">     🚧 支持<strong>导出</strong>携带样式PDF、PNG、JPEG 等；<br><input type="checkbox" checked="checked" disabled="disabled">     ✨ 注入 <a href="https://revealjs.com/#/" target="_blank" rel="external">RevealJs</a>，增设对 <code>PPT</code> 预览支持；<br><input type="checkbox" checked="checked" disabled="disabled">     👏 支持检查并格式化 Markdown 语法，使其专业；<br><input type="checkbox" checked="checked" disabled="disabled">     🦑 支持五线谱、及<a href="https://github.com/b3log/vditor/issues/117?utm_source=hacpai.com#issuecomment-526986052" target="_blank" rel="external">部分站点、视频、音频解析</a>;<br><input type="checkbox" disabled="disabled">     🚧 增加对<strong>所见即所得</strong>编辑模式的支持(开发中)；

<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>清空目前 <a href="https://markdown.lovejade.cn/?utm_source=github.com" target="_blank" rel="external">Arya</a> 编辑区默认文档，即可使用。</p>
<h3 id="PPT-预览"><a href="#PPT-预览" class="headerlink" title="PPT 预览"></a>PPT 预览</h3><p>如果您用作 <code>PPT</code> 预览（入口在<code>设置</code>中），需要注意，这里暂还不能支持各种图表的渲染；您可以使用 <code>---</code> 来定义水平方向上幻灯片，用 <code>--</code> 来定义垂直幻灯片；更多设定可以参见 <a href="https://github.com/hakimel/reveal.js#table-of-contents" target="_blank" rel="external">RevealJs 文档</a>。</p>
<h2 id="如何开发"><a href="#如何开发" class="headerlink" title="如何开发"></a>如何开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 🎉 克隆项目</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/nicejade/markdown-online-editor.git</div><div class="line"><span class="built_in">cd</span> markdown-online-editor</div><div class="line"></div><div class="line"><span class="comment"># ➕ 安装依赖(跳过安装 )</span></div><div class="line">env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=<span class="literal">true</span> yarn</div><div class="line"></div><div class="line"><span class="comment"># 🚧 开始开发</span></div><div class="line">yarn start</div><div class="line"></div><div class="line"><span class="comment"># 🚀 部署 Github Pages(需修改 commands/deploy.sh)</span></div><div class="line">yarn deploy</div></pre></td></tr></table></figure>
<blockquote>
<p>关于本应用构建：因采用 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="external">prerender-spa-plugin</a> 以解决 SPA SEO 问题，故而，您需要在根目录下创建 <code>arya.config.js</code>，根据 <em>arya.config.sample.js</em> 中示例格式，来设定 <code>executablePath</code> 参数，从而指定插件中捆绑的 <strong>Chromium</strong> 所在目录，使得 <code>prerender-spa-plugin</code> 可以正常工作。更多详情，可以参见 <a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">Puppeteer 安装注意事项</a>。</p>
</blockquote>
<h2 id="关于定位📌"><a href="#关于定位📌" class="headerlink" title="关于定位📌"></a>关于定位📌</h2><p>众所周知，早在几年前，市面上就充盈百余种不同的 <code>Markdown</code>  编辑器；其中不乏很多功能强大，体验良好的 <code>Markdown</code>  神器；在 <a href="https://nicelinks.site/tags/Markdown/?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链 | Markdown</a>  标签中，也是收录了些 <code>Markdown</code>  相关工具。但，就如在<code>初衷</code>中提及的，那些工具或多或少都存在一些问题比如：功能不全，使用不便，体验不佳，或高级功能收费等；对于 <a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Arya</a>，无意让她在 <code>Markdown</code>  的江湖逐鹿中原，目前给其设定就是：<strong>轻盈且强大</strong>，<strong>免费又安全</strong>。关于 <a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Arya</a> 能做的，可参见 <a href="https://github.com/nicejade/markdown-online-editor#功能支持" target="_blank" rel="external">Arya Markdown 功能支持</a>；当然，那并不是 <code>Arya</code> 最终形态，如果您有更多关于 <code>Markdown</code> 相关的诉求或建议，欢迎👏提给我（可以通过<a href="https://aboutme.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">各种渠道</a>），这边会尽最大努力满足您。</p>
<blockquote>
<p>额外补充，因为数据使它们更具说服力且易于理解，能够将可视化嵌入到文本中的技术非常重要；受益于 <a href="https://github.com/geekplux/markvis" target="_blank" rel="external">markvis</a> (make visualization in markdown.) 的启发，完全可以将 <code>Arya</code> 中内置 <code>d3</code> 等可视化库，从而使用户可以更加方便，在 <a href="https://markdown.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">Arya Markdown</a> 中进行数据可视化操作；再辅之以导出功能，哇哦，至少这些功能于我而言，是超有用的存在。另外，很多同学，在写中文文案时候，不太会注重格式，如中英文间未有空格等；后面 <code>Arya</code> 也会考虑注入自动格式化文档的功能….. 诸此等等；此篇文章，也会随之而来的新想法、新功能以及其他新建议，而不断完善；总之呢，敬请期待。（2019.06.02）</p>
</blockquote>
<p>于 2019 年 5 月 19 号，深圳.福田；last modify: 2019.06.02。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://nicelinks.site/?utm_source=jeffjade.com" target="_blank" rel="external"><strong>倾城之链</strong></a></li>
<li><a href="https://about.me/nicejade?utm_source=jeffjade.com" target="_blank" rel="external">About Me</a></li>
<li><a href="https://jeffjade.com/nicelinks?utm_source=jeffjade.com" target="_blank" rel="external">个人博客</a></li>
<li><a href="https://quickapp.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">静轩之别苑</a></li>
<li><a href="https://nice.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">静晴轩别苑</a></li>
<li><a href="https://docz.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">吾意静晴轩</a></li>
<li><a href="https://blog.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">天意人间舫</a></li>
<li><a href="https://weibo.com/jeffjade?utm_source=jeffjade.com" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">知乎主页</a></li>
<li><a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">简书主页</a></li>
<li><a href="https://segmentfault.com/u/jeffjade" target="_blank" rel="external">SegmentFault</a></li>
<li><a href="https://twitter.com/nicejadeyang" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://www.facebook.com/nice.jade.yang" target="_blank" rel="external">Facebook</a></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">微信公众号</th>
<th style="text-align:center">前端微信群</th>
<th style="text-align:center">推荐 Web 应用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">😉 静晴轩</td>
<td style="text-align:center">✨ 大前端联盟</td>
<td style="text-align:center">🎉 倾城之链</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://image.nicelinks.site/qrcode_jqx.jpg" alt="静晴轩" width="200px"></td>
<td style="text-align:center"><img src="https://image.nicelinks.site/wqycx-weixin.png?ver=1" alt="倾城之链" width="200px"></td>
<td style="text-align:center"><img src="https://image.nicelinks.site/nice-links.png" width="200px" alt="倾城之链"></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="您可能会感兴趣的文章"><a href="#您可能会感兴趣的文章" class="headerlink" title="您可能会感兴趣的文章"></a>您可能会感兴趣的文章</h3><ul>
<li><a href="https://www.jeffjade.com/2019/08/25/156-arya-jarvis-born-for-efficiency">为高效而生：Arya Jarvis</a></li>
<li><a href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/">基于 Vue-Cli3 构建的脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
<li><a href="https://www.jeffjade.com/2019/06/14/156-puppeteer-robot/">基于 Puppeteer 构建简易机器人</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      Arya，是一款基于 Vue、Vditor，为未来而构建的在线 Markdown 编辑器；轻量且强大：内置粘贴 HTML 自动转换为 Markdown，支持流程图、甘特图、时序图、任务列表，可导出携带样式的图片、PDF、以及转换 Markdown 成微信公众号特制的 HTML 等；另外支持实时预览、本地存储、字符计数，提供常用快捷键(Tab)，及代码块添加复制等功能。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
      <category term="Arya" scheme="https://www.jeffjade.com/tags/Arya/"/>
    
      <category term="Markdown" scheme="https://www.jeffjade.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>为你的 JavaScript 代码日志着色</title>
    <link href="https://www.jeffjade.com/2019/04/26/154-colorize-your-javascript-code-logs/"/>
    <id>https://www.jeffjade.com/2019/04/26/154-colorize-your-javascript-code-logs/</id>
    <published>2019-04-25T16:10:00.000Z</published>
    <updated>2019-04-28T14:27:41.363Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>JavaScript</code> 开发项目，可借助 <code>console.log</code> 来打印日志，以便捷分析问题；但，当接触相对比较项目，纯黑色的日志输出，就会使得其作用大大削弱；虽然  <code>info</code>， <code>wran</code>、<code>error</code> 等方法会区别颜色输出，但各自皆有其职责，不便挪来加以滥用；此时，就需求扩展些方法，来为你的 <code>JavaScript</code> 代码日志着色，使得日志可以发挥更大的价值。</p>
<a id="more"></a>
<p><img src="https://images.unsplash.com/photo-1550645612-83f5d594b671?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" alt="为你的 JavaScript 代码日志着色"></p>
<blockquote>
<p><strong>微注</strong>：原文首发于个人基于 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 所搭建的最新博客：<a href="https://quickapp.lovejade.cn/colorize-your-javascript-code-logs/?utm_source=jeffjade.com" target="_blank" rel="external">静轩之别苑 | 为你的 JavaScript 代码日志着色</a>。</p>
</blockquote>
<p>要实现这个功能，其实很简单；利用 <code>console.log</code> 字符串替代和格式设置功能即可；下面为其格式说明符的完整列表：</p>
<table>
<thead>
<tr>
<th>说明符</th>
<th style="text-align:left">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>%s</td>
<td style="text-align:left">将值格式化为字符串</td>
</tr>
<tr>
<td>%i 或 %d</td>
<td style="text-align:left">将值格式化为整型</td>
</tr>
<tr>
<td>%f</td>
<td style="text-align:left">将值格式化为浮点值</td>
</tr>
<tr>
<td>%o</td>
<td style="text-align:left">将值格式化为可扩展 DOM 元素。如同在 Elements 面板中显示的一样</td>
</tr>
<tr>
<td>%O</td>
<td style="text-align:left">将值格式化为可扩展 JavaScript 对象</td>
</tr>
<tr>
<td>%c</td>
<td style="text-align:left">将 CSS 样式规则应用到第二个参数指定的输出字符串</td>
</tr>
</tbody>
</table>
<blockquote>
<p>传递到任何记录方法的第一个参数可能包含一个或多个格式说明符。格式说明符由一个 % 符号与后面紧跟的一个字母组成，字母指示应用到值的格式。字符串后面的参数会按顺序应用到占位符。</p>
</blockquote>
<p>关于 <code>console</code> 更多功能和用法，可参见 <a href="https://developers.google.com/web/tools/chrome-devtools/console/" target="_blank" rel="external">使用控制台 | Google Developers</a>；下面是对彩色输出 log 的一个简单示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">`%c 倾城之链: %s`</span>, <span class="string">'color: #65c294'</span>, <span class="string">': 一个蛮有用的网站'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`%c 倾城之链: %c%s`</span>, <span class="string">'color: #65c294'</span>, <span class="string">'color: #1a1a1a'</span>, <span class="string">': 一个蛮有用的网站'</span>)</div></pre></td></tr></table></figure>
<p>前面提及，当涉及到较大型项目，为了能从日志显现代码大致流向，最好可以封装方法，针对不同的模块日志，以不同颜色作下区分显示；这在一定程度上可以将所打出的日志利益更大化；下面是对此的一点实践方案：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> _gLogColorObj = &#123;</div><div class="line">  <span class="attr">moduleA</span>: <span class="string">'#009ad6'</span>, <span class="comment">// 青色</span></div><div class="line">  moduleB: <span class="string">'#65c294'</span> <span class="comment">// 若竹色</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> _gConsole = <span class="function">(<span class="params">theme, args</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> regStr = <span class="string">`%c@λ~<span class="subst">$&#123;theme.toLocaleUpperCase()&#125;</span>: <span class="subst">$&#123;_gGetMatchStr(args)&#125;</span>`</span></div><div class="line">  <span class="keyword">const</span> color = _gLogColorObj[theme]</div><div class="line">  <span class="built_in">console</span>.log(regStr, <span class="string">`color: <span class="subst">$&#123;color&#125;</span>`</span>, ...args)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> _gRegMatchObj = &#123;</div><div class="line">  <span class="attr">object</span>: <span class="string">'%o'</span>,</div><div class="line">  <span class="attr">function</span>: <span class="string">'%o'</span>,</div><div class="line">  <span class="attr">number</span>: <span class="string">'%i'</span>,</div><div class="line">  <span class="attr">string</span>: <span class="string">'%s'</span>,</div><div class="line">  <span class="attr">undefined</span>: <span class="string">'%s'</span>,</div><div class="line">  <span class="attr">boolean</span>: <span class="string">'%s'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> _gGetMatchStr = <span class="function"><span class="params">args</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> cMatchArr = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> args) &#123;</div><div class="line">    cMatchArr.push(_gRegMatchObj[<span class="keyword">typeof</span> args[key]])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cMatchArr.join(<span class="string">' '</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> $log = &#123;</div><div class="line">  <span class="attr">moduleA</span>: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">    _gConsole(<span class="string">'moduleA'</span>, args)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">moduleB</span>: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">    _gConsole(<span class="string">'moduleB'</span>, args)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 您可以在此定义更多方法，来区分不同模块； </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，主要基于<strong>表驱动法</strong>，根据所设计的模块名（Eg： moduleA）以及既定色值，彩色化你的 JS 代码日志输出，并指明日志所在模块；这样一来，即可使得日志输出更加清晰。</p>
<p>需要补充探讨的是，对于 <code>Terminal</code> 控制台的日志，对于关键部分，也是推荐着色输出的；这里推荐基于 <a href="https://github.com/chalk/chalk" target="_blank" rel="external">chalk</a> 来处理，例如 <code>Vue</code> 等流行框架也是采用这个库。另外，<a href="https://github.com/Tencent/vConsole" target="_blank" rel="external">vConsole</a>：一个针对手机网页的前端 console 调试面板，专为手机 Web 页面量身设计，帮助开发者更为便捷地进行开发调试工作。当你开发移动端相关项目，这也是蛮有用的工具。</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2015/08/03/2015-08-03-javascript-this/">JavaScript 之 this 详解</a></li>
<li><a href="https://www.jeffjade.com/2015/08/28/2015-09-02-js-string-compare/">JavaScript字符串间的比较</a></li>
<li><a href="https://www.jeffjade.com/2015/10/08/2015-10-08-js-object-length/">JavaScript 对象 length</a></li>
<li><a href="https://www.jeffjade.com/2015/08/15/2015-08-15-html-a-href/">Html<a>标签href的困惑记载</a></a></li>
<li><a href="https://www.jeffjade.com/2016/01/10/2016-01-10-javacript-setTimeout/">你所不知道的 setTimeout</a></li>
<li><a href="https://www.jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/">你所不知道的 setInterval</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      本文意在探讨为 JavaScript 日志（log）着色，从而令 console.log 彩色化输出，使得打印日志发挥更大价值，以便更好的理解项目、分析问题等。其中主要涉及 console.log 功能深入以及再封装。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>最好的前端黑客秘籍</title>
    <link href="https://www.jeffjade.com/2019/03/18/153-best-front-end-hacking-cheatsheets/"/>
    <id>https://www.jeffjade.com/2019/03/18/153-best-front-end-hacking-cheatsheets/</id>
    <published>2019-03-18T14:22:00.000Z</published>
    <updated>2019-04-28T14:21:57.877Z</updated>
    
    <content type="html"><![CDATA[<p>对于编程开发而言，用心记住所有 <code>API</code> 是不可能的，也没有这个必要；精力有限，你应该将放在更多重要的事情上；出于效率角度考虑，一份好的 <code>API</code> 备忘单是你须要拥有的；这是我所见收集的最好的前端备忘单（ Front-end Hacking Cheatsheets）,悉心整理至此，希望对你的工作有所帮助。</p>
<a id="more"></a>
<p>需要说明的是，这份列表引自 <a href="https://www.strilliant.com/2017/10/26/the-best-front-end-hacking-cheatsheets-%E2%80%94-all-in-one-place/" target="_blank" rel="external">The best front-end hacking cheatsheets</a>；如果您知晓更多喜欢的前端备忘单，不妨留言相告，一起完善使其能帮助到更多人。关于更多流行语言、框架和开发工具的精选备忘单，可以参见 <a href="https://github.com/LeCoupa/awesome-cheatsheets/?utm_source=jeffjade.com" target="_blank" rel="external">Awesome Cheatsheets</a>。</p>
<blockquote>
<p><strong>微注</strong>：原文首发于个人基于 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 所搭建的最新博客：<a href="https://quickapp.lovejade.cn/best-front-end-hacking-cheatsheets/" target="_blank" rel="external">静轩之别苑 | 最好的前端黑客秘籍</a>。</p>
</blockquote>
<h2 id="Javascript-ES2015-Cheatsheet"><a href="#Javascript-ES2015-Cheatsheet" class="headerlink" title="Javascript ES2015 Cheatsheet"></a><a href="https://devhints.io/es6?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Javascript ES2015 Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/es6-cheatsheet.jpg" alt="es6-cheatsheet"></p>
<h2 id="JavaScript-Cheatsheet"><a href="#JavaScript-Cheatsheet" class="headerlink" title="JavaScript Cheatsheet"></a><a href="http://overapi.com/javascript?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">JavaScript Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/javascript-cheatsheet.jpg" alt="javascript-cheatsheet"></p>
<h2 id="Vue-Cheatsheet"><a href="#Vue-Cheatsheet" class="headerlink" title="Vue Cheatsheet"></a><a href="https://vuejs-tips.github.io/cheatsheet/?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Vue Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/vue-cheatsheet.jpg" alt="vue-cheatsheet"></p>
<h2 id="Vuex-Cheatsheet"><a href="#Vuex-Cheatsheet" class="headerlink" title="Vuex Cheatsheet"></a><a href="https://vuejs-tips.github.io/vuex-cheatsheet/?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Vuex Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/vuex-cheatsheet.jpg" alt="vuex-cheatsheet"></p>
<h2 id="React-Cheatsheet"><a href="#React-Cheatsheet" class="headerlink" title="React Cheatsheet"></a><a href="https://devhints.io/react?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">React Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/react-cheatsheet.jpg" alt="react-cheatsheet"></p>
<h2 id="Angular4-Cheatsheet"><a href="#Angular4-Cheatsheet" class="headerlink" title="Angular4 Cheatsheet"></a><a href="https://angular.io/guide/cheatsheet?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Angular4 Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/angular4-cheatsheet.jpg" alt="angular4-cheatsheet"></p>
<h2 id="Flexbox-Cheatsheet"><a href="#Flexbox-Cheatsheet" class="headerlink" title="Flexbox Cheatsheet"></a><a href="https://yoksel.github.io/flex-cheatsheet/?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Flexbox Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/flex-cheatsheet.jpg" alt="flexbox-cheatsheet"></p>
<h2 id="SCSS-Cheatsheet"><a href="#SCSS-Cheatsheet" class="headerlink" title="SCSS Cheatsheet"></a><a href="https://devhints.io/sass?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">SCSS Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/scss-cheatsheet-1.png" alt="scss-cheatsheet-1"></p>
<h2 id="Stylus-Cheatsheet"><a href="#Stylus-Cheatsheet" class="headerlink" title="Stylus Cheatsheet"></a><a href="https://devhints.io/stylus?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">Stylus Cheatsheet</a></h2><p><img src="https://quickapp.lovejade.cn/content/images/2019/03/stylus-cheatsheet.png" alt="stylus-cheatsheet"></p>
<h2 id="GraphQL-Cheatsheet"><a href="#GraphQL-Cheatsheet" class="headerlink" title="GraphQL Cheatsheet"></a><a href="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">GraphQL Cheatsheet</a></h2><p><img src="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png?utm_source=quickapp.lovejade.cn" alt="GraphQL Cheatsheet"></p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
<li><a href="https://quickapp.lovejade.cn/aweome-beautiful-picture-website-list/" target="_blank" rel="external">高质量美图资源，一网收尽</a></li>
<li><a href="https://quickapp.lovejade.cn/vim-common-shortcuts/" target="_blank" rel="external">Vim 常用快捷键分类备忘单</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2017/11/29/133-high-quality-front-end-channel/">『优质』前端频道汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/06/04/141-talk-about-my-blogs/">轩帅的博客之旅</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      对于编程开发而言，用心记住所有 API 是不可能的，也没有这个必要；精力有限，你应该将放在更多重要的事情上；出于效率角度考虑，一份好的 API 备忘单是你须要拥有的；这是我所见收集的最好的前端备忘单（ Front-end Hacking Cheatsheets）,悉心整理至此，希望对你的工作有所帮助。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="React" scheme="https://www.jeffjade.com/tags/React/"/>
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>快应用开发常见问题及解决方案</title>
    <link href="https://www.jeffjade.com/2019/03/10/151-quickapp-common-problems-and-solutions/"/>
    <id>https://www.jeffjade.com/2019/03/10/151-quickapp-common-problems-and-solutions/</id>
    <published>2019-03-10T14:22:00.000Z</published>
    <updated>2019-06-02T15:14:29.836Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>是移动互联网新型应用生态，与手机系统深度整合，为用户提供更加场景化的体验。具备传统 APP 完整的应用体验，但无需安装、即点即用。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>是基于手机硬件平台的新型应用形态，由国内十大手机厂商基于硬件平台共同推出，其标准是由主流手机厂商组成的快应用联盟联合制定。这里记录下在<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>开发中，涉及的常见问题及其对应解决方案；同时也会给出如何更好开发<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>的一些建议。</p>
<a id="more"></a>
<blockquote>
<p><strong>温馨提醒</strong>：如果您目前有涉及进行快应用开发，那么您不妨看下<a href="https://nice.lovejade.cn/zh/article/quickapp-boilerplate-template.html#" target="_blank" rel="external">快应用脚手架，为优雅而生</a>一文，其中将开发所遇到的一些问题、以及开发体验都作了很大程度上的优化，相信会给你带来帮助(另外， Github 上的 <a href="https://github.com/nicejade/awesome-quickapp" target="_blank" rel="external">awesome-quickapp</a> 仓库：云集最新快应用相关教程文章、开发资源、项目案例及新闻动态；相信也会给您更好进行快应用开发，提供更多帮助)。</p>
</blockquote>
<blockquote>
<p><strong>微注</strong>：原文首发于个人基于 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 所搭建的最新博客：<a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">静轩之别苑 | 快应用开发常见问题及解决方案</a>。</p>
</blockquote>
<h2 id="快应用引擎相关"><a href="#快应用引擎相关" class="headerlink" title="快应用引擎相关"></a>快应用引擎相关</h2><h3 id="快应用生命周期函数"><a href="#快应用生命周期函数" class="headerlink" title="快应用生命周期函数"></a>快应用生命周期函数</h3><ul>
<li><strong>现有的APP生命周期函数有</strong>： onCreate, onDestroy</li>
<li><strong>现有的页面级组件生命周期函数</strong>：onCreate、onInit、onReady、onShow、onHide、onDestroy（onBackPress、onMenuPress）</li>
<li><strong>已有的自定义组件生命周期函数</strong>： onCreate、onInit、onReady、onDestroy（onDestroy 只会在页面销毁的时候触发，用 <code>if</code> 指令卸载无法触发）</li>
</ul>
<h3 id="快应用的-app、-def、-data-以及-global"><a href="#快应用的-app、-def、-data-以及-global" class="headerlink" title="快应用的 $app、$def、$data 以及 global"></a>快应用的 $app、$def、$data 以及 global</h3><p>在快应用中，暴露了 <code>$app</code> 对象；此对象下有暴露出  <code>$def</code>，<code>$data</code>等字段：</p>
<ul>
<li><code>$def</code>： 使用 this.$app.$def 获取在 app.ux 中暴露的对象;</li>
<li><code>$data</code>：使用 this.$app.$data 获取在 manifest.json 的 config.data 中声明的全局数据；</li>
</ul>
<p>但需要注意的是：直接挂在于 <code>this</code> 上，需通过 this.$app 来取；挂在于 <code>this.$def</code> 上，才可通过 this.$app.$def 来取，二者不可混淆。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.ux</span></div><div class="line"><span class="keyword">import</span> device <span class="keyword">from</span> <span class="string">'@system.device'</span></div><div class="line"><span class="keyword">const</span> hook2global = global.__proto__ || global</div><div class="line">hook2global.$apis = $apis</div><div class="line"></div><div class="line">  &lt; script &gt;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">$deviceInfo</span>: &#123;&#125;,</div><div class="line">  <span class="attr">$xDeviceInfo</span>: &#123;&#125;,</div><div class="line">  <span class="keyword">async</span> onCreate() &#123;</div><div class="line">    <span class="keyword">this</span>.$def.$deviceInfo = <span class="keyword">await</span> <span class="keyword">this</span>.getInfo()</div><div class="line">    <span class="keyword">this</span>.$xDeviceInfo = <span class="keyword">await</span> <span class="keyword">this</span>.getInfo()</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">async</span> getInfo() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      device.getInfo(&#123;</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="params">ret</span> =&gt;</span> &#123;</div><div class="line">          resolve(ret)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(err)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script &gt;</span></div></pre></td></tr></table></figure>
<p>如上示例代码，在其他页面代码中，this.$app.$def.$deviceInfo、 this.$app.$xDeviceInfo 这两种调用方式是期待的写法；如果混淆调用，得到的结果则是 <code>undefined</code>。</p>
<p>而挂在于 <code>global</code> 的变量(如 $apis )，可通过 global.$apis 或直接 $apis 来调用；但如果在 DOM 结构中，不可直接使用，因为其默认主题是页面级 <code>this</code>，所以 Toolkit 编译出的结果就会是 this.$apis or this.global.$apis，如此就不能达到预期；在页面属性中定义声明下即可，如下代码示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">$apis</span>: $apis <span class="comment">// or global.$apis</span></div><div class="line">  &#125;</div><div class="line">&lt;script&gt;</div></pre></td></tr></table></figure>
<h3 id="如何解决快应用-Input-失去焦点，输入法不收起来问题"><a href="#如何解决快应用-Input-失去焦点，输入法不收起来问题" class="headerlink" title="如何解决快应用 Input 失去焦点，输入法不收起来问题"></a>如何解决快应用 Input 失去焦点，输入法不收起来问题</h3><p>目前(<code>1050-</code>)可以解决的办法是，在空白区域，添加事件，注入如下逻辑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$element(<span class="string">'yourInputId'</span>).focus(&#123;<span class="attr">focus</span>: <span class="literal">false</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="如何解决快应用-textarea-无法清空数据问题"><a href="#如何解决快应用-textarea-无法清空数据问题" class="headerlink" title="如何解决快应用 textarea 无法清空数据问题"></a>如何解决快应用 textarea 无法清空数据问题</h3><p>快应用（version &lt;= <code>1030</code>）目前存在 textarea 无法清空数据问题，目前只能采取 Hack 的办法解决，即在需要清除时候 <code>this.$delete</code> 掉该绑定的值，<strong>onchange</strong> 回调中再通过 <code>this.$set</code> 将数据属性添加回去，使得可以正常工作；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">onchange</span>=<span class="string">'handleChange'</span> <span class="attr">placeholder</span>=<span class="string">"&#123;&#123;placeholder&#125;&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;contentValue&#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"keyborder"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"onHandleBtnClick"</span> <span class="attr">value</span>=<span class="string">"处理"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  handleChange(response) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(response, <span class="literal">null</span>, <span class="number">2</span>))</div><div class="line"></div><div class="line">    <span class="comment">// 以 Hack 的方式解决无法清空 textarea 输入数据@18-12-06;</span></div><div class="line">    <span class="keyword">this</span>.$set(<span class="string">'contentValue'</span>, response.text)</div><div class="line">  &#125;,</div><div class="line">  onHandleBtnClick() &#123;</div><div class="line">    <span class="comment">// Here ....... 处理你的数据；</span></div><div class="line"></div><div class="line">    <span class="comment">// 以 Hack 的方式解决无法清空 textarea 输入数据@18-12-06;</span></div><div class="line">    <span class="keyword">this</span>.$<span class="keyword">delete</span>(<span class="string">'contentValue'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="快应用中如何使用「字体图标」"><a href="#快应用中如何使用「字体图标」" class="headerlink" title="快应用中如何使用「字体图标」"></a>快应用中如何使用「字体图标」</h3><p>在应用中，可以使用<strong>字体图标</strong>如 <a href="https://icomoon.io/" target="_blank" rel="external">icomoon</a>，可以帮着有更好的方案来展示应用图标；在快应用中，可以直接在 dom 中使用，如下示例。但，对于定义在变量中的字体编码，则需要借助 <code>unescape</code> 做一层转换。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;text class="font-icon" style="font-size: &#123;&#123;fontSize&#125;&#125;px;"&gt;&amp;#xe900;&lt;/text&gt;</div><div class="line">  &lt;text class="font-icon" style="font-size: &#123;&#123;fontSize&#125;&#125;px;"&gt;&#123;&#123; iconCode &#125;&#125;&lt;/text&gt;</div><div class="line">  &lt;text class="font-icon" style="font-size: &#123;&#123;fontSize&#125;&#125;px;"&gt;&#123;&#123; unescapeFontIconCode(iconCode) &#125;&#125;&lt;/text&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  private: &#123;</div><div class="line">    fontSize: 100,</div><div class="line">    iconCode: '&amp;#xe900;'</div><div class="line">  &#125;,</div><div class="line">  unescapeFontIconCode(iconCode = '') &#123;</div><div class="line">  return unescape(iconCode.replace(/&amp;#x/g, '%u').replace(/;/g, ''))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">@font-face &#123;</div><div class="line">  font-family: iconfont;</div><div class="line">  src: url('./../../assets/fonts/icomoon.ttf');</div><div class="line">&#125;</div><div class="line"></div><div class="line">.font-icon &#123;</div><div class="line">  font-family: iconfont;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="如何动态处理修改快应用样式"><a href="#如何动态处理修改快应用样式" class="headerlink" title="如何动态处理修改快应用样式"></a>如何动态处理修改快应用样式</h3><p>鉴于些原因快应用 <code>hap-toolkit</code> 打包，无法对逻辑代码进行处理；而快应用引擎内部，也没有对逻辑代码中样式做很好的兼顾；所以，当需要动态处理修改快应用样式时，你需要对涉及的代码进行转义处理，如下代码示例（备注：在 <code>1030</code> 版本，组件的 style 属性，支持直接绑定 Object 或 String）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper-padding"</span> <span class="attr">style</span>=<span class="string">"&#123;&#123; styleObj &#125;&#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>如何动态处理修改快应用样式<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">protected</span>: &#123;</div><div class="line">    <span class="attr">styleObj</span>: &#123;&#125;,</div><div class="line">    <span class="attr">dynamicUrl</span>: <span class="string">'https://image.nicelinks.site/jpg/nice-links-039.jpg'</span></div><div class="line">  &#125;,</div><div class="line">  onReady() &#123;</div><div class="line">    <span class="keyword">this</span>.styleObj = &#123;</div><div class="line">      <span class="attr">backgroundColor</span>: <span class="string">'#fe0'</span>,</div><div class="line">      <span class="attr">color</span>: <span class="string">'#212121'</span>,</div><div class="line">      <span class="attr">backgroundImage</span>: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.dynamicUrl&#125;</span>`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>至于为何要这么处理，可以参看开发时，<code>build</code> 目录下所打包后的代码，<code>hap-toolkit</code> 是对样式进行了处理，只要逻辑层的代码修改，跟打包后的样式处置保持一致，那么就可以实现动态处理修改快应用样式；如上代码中对 <code>background-image</code> 的设置，就是为了兼容快应用内部打包适配（此解决方案针对 <code>1040</code> 及以前版本，未知快应用何时修复）。</p>
<h3 id="如何从外部打开快应用："><a href="#如何从外部打开快应用：" class="headerlink" title="如何从外部打开快应用："></a>如何从外部打开快应用：</h3><p>从外部打开快应用，可以是从一个快应用，打开另一个快应用；也可以是从网页上打开快应用；实现此共功能，可以使用快应用提供的 <code>deeplink</code> 接口，其语法格式如下：</p>
<blockquote>
<p><a href="http://hapjs.org/app/" target="_blank" rel="external">http://hapjs.org/app/</a><package>/[path][?key=value]<br><a href="https://hapjs.org/app/" target="_blank" rel="external">https://hapjs.org/app/</a><package>/[path][?key=value]<br>hap://app/<package>/[path][?key=value]</package></package></package></p>
</blockquote>
<p><strong>具体参数说明如下</strong>：</p>
<p><strong>package</strong>: 应用包名，必选;<br><strong>path</strong>: 应用内页面的 path，可选，默认为首页;<br><strong>key-value</strong>: 希望传给页面的参数，可选，可以有多个;</p>
<p><strong>EG</strong>: hap://app/com.quickapp.nicelinks/?utm_source=quickapp-blog；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">href</span>=<span class="string">"hap://app/com.quickapp.nicelinks"</span>&gt;</span>打开倾城之链快应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="网页中打开「快应用」"><a href="#网页中打开「快应用」" class="headerlink" title="网页中打开「快应用」"></a>网页中打开「快应用」</h4><p>嵌入如下 <code>JS</code> 代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//statres.quickapp.cn/quickapp/js/routerinline.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 调起应用 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></span></span></div><div class="line">  <span class="comment">// 无需用户确认的调用方式，xxx.yyy.zzz 为包名</span></div><div class="line">  appRouter(<span class="string">"xxx.yyy.zzz"</span>, <span class="string">"/Home"</span>, &#123; paramA: <span class="number">1</span>, paramB: <span class="string">'2'</span> &#125;)</div><div class="line">  <span class="comment">// 需要用户确认的调用方式，xxx.yyy.zzz为包名</span></div><div class="line">  appRouter(<span class="string">'xxx.yyy.zzz'</span>, <span class="string">'/Home'</span>, &#123; paramA: <span class="number">1</span>, paramB: <span class="string">'2'</span> &#125;, <span class="string">'显示给用户的应用名称'</span>);</div><div class="line">  <span class="comment">// Eg: 比如跳转至「倾城之链」，路径只能为 `/`，因为在 manifest.json 中 router 配置为：pages/Home;</span></div><div class="line">  appRouter(<span class="string">'com.quickapp.nicelinks'</span>, <span class="string">'/'</span>, &#123; utm_source: <span class="string">'github'</span> &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要额外注意的是，你所要跳转的快应用，如果在 <code>manifest.json</code> 中对路由加前缀，需要使用 <code>path</code> 字段予以“修正”，否则使用 <code>deeplink</code> 功能时候，将不能很好的工作。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"router"</span>: &#123;</div><div class="line">  <span class="string">"entry"</span>: <span class="string">"pages/Main"</span>,</div><div class="line">  <span class="string">"pages"</span>: &#123;</div><div class="line">    <span class="string">"pages/Main"</span>: &#123;</div><div class="line">      <span class="string">"component"</span>: <span class="string">"index"</span></div><div class="line">      <span class="comment">// ✗ appRouter('com.quickapp.nicelinks', '/pages/Main' );</span></div><div class="line">      <span class="comment">// ✓ appRouter('com.quickapp.nicelinks', '/about' );</span></div><div class="line">      <span class="string">"path"</span>: <span class="string">"/about"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何解决快应用“莫名”报错"><a href="#如何解决快应用“莫名”报错" class="headerlink" title="如何解决快应用“莫名”报错"></a>如何解决快应用“莫名”报错</h3><p>在开发快应用时候，有时会遇到些“莫名”报错提示，比如下面这样：</p>
<blockquote>
<p><span style="color: red">TypeError: Cannot read property ‘manifest’ of null<br>at XPage.initMeta (<anonymous>:xxxx:yy) <span></span></anonymous></span></p>
</blockquote>
<p>从经验上看，由于些未知原因，导致程序出错，但没有给出具体错误原因，从而引起的抛出异常不精准（从错误提示上看，是因为在 initMeta 方法体中，某空对象调用了 <code>manifest</code> 属性）；但，引起该问题的根本原因，就很多，比如 <code>hap-toolkit</code> 升级打包出错，或者该页面初始化前的代码存在异常等，都有可能导致该问题；这时能做的就是：仔细检查下代码以及打包（在官方修复之前）。</p>
<h2 id="打包工具相关"><a href="#打包工具相关" class="headerlink" title="打包工具相关"></a>打包工具相关</h2><h3 id="如何升级-hap-toolkit-从-lt-0-0-38-至最新："><a href="#如何升级-hap-toolkit-从-lt-0-0-38-至最新：" class="headerlink" title="如何升级 hap-toolkit 从 &lt;0.0.38 至最新："></a>如何升级 <code>hap-toolkit</code> 从 <code>&lt;0.0.38</code> 至最新：</h3><ol>
<li>将本地 <code>hap-toolkit</code> 升级至新版本如 <code>0.2.0</code>: <code>yarn upgrade hap-toolkit@0.1.0</code>;</li>
<li>运行 <code>npx hap update --force</code> 命令将本地配置升级（会新建 <code>package.json</code>, 原文件成 <em>old package.json</em>）;  </li>
<li>手动将 <em>old package.json</em> 中的自己的额外配置，同步至新的 <code>package.json</code>；</li>
<li>将本地的 <em>node_modules</em> 和 <em>package-lock.json</em>: <code>rm -rf node_modules</code>; </li>
<li>重新安装依赖即可：重新运行 <code>yarn</code> or <code>npm i</code>;</li>
</ol>
<h3 id="如何为快应用设置别名-alias"><a href="#如何为快应用设置别名-alias" class="headerlink" title="如何为快应用设置别名(alias)"></a>如何为快应用设置别名(alias)</h3><p>在已有项目根目录下创建 <code>config</code> 文件夹，并在该文件夹下添加 <code>webpack.config.js</code>,然后注入类似如下代码即可：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">postHook</span>: <span class="function"><span class="keyword">function</span>(<span class="params">webpackConf, options</span>)</span>&#123;</div><div class="line">    <span class="keyword">const</span> alias = <span class="built_in">Object</span>.assign(webpackConf.resolve.alias || &#123;&#125;, &#123;</div><div class="line">      <span class="string">'@components'</span>: path.join(process.cwd(), <span class="string">'src/components'</span>)</div><div class="line">    &#125;)</div><div class="line">    webpackConf.resolve.alias = alias</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此，对于 import 自定义组件或方法，就会得到优化，而不用费神去关心相对路径（需要提醒的是：因为快应用现有设计缘故，别名不能作用于 Dom 结构以及 style）；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">import</span> name=<span class="string">"HellorWorld"</span> src=<span class="string">"./../../components/HellorWorld"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span></div><div class="line"><span class="comment">// 为快应用注入别名(alias)之后的写法</span></div><div class="line">&lt;<span class="keyword">import</span> name=<span class="string">"HellorWorld"</span> src=<span class="string">"@components/HellorWorld"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>备注</strong>：这种方法，在 <code>0.4.*</code> 版本中，已被快应用引擎相关开发擅自移除（新增了所谓 <code>hap.config.js</code>，但并不具备添加别名的功能）；强烈谴责相关设计人员，这种奇葩、且不向前兼容的武断决定；我们都该引以为戒，从而避免给别人造成类似糟糕体验。</p>
</blockquote>
<p>@2019-02-24 于深圳.福田 Last Modify：2018-03-07</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/150-prettier-quickapp-plugin">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚
</a></li>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      快应用是移动互联网新型应用生态，与手机系统深度整合，为用户提供更加场景化的体验。具备传统 APP 完整的应用体验，但无需安装、即点即用。快应用是基于手机硬件平台的新型应用形态，由国内十大手机厂商基于硬件平台共同推出，其标准是由主流手机厂商组成的快应用联盟联合制定。这里记录下在快应用开发中，涉及的常见问题及其对应解决方案；同时也会给出如何更好开发快应用的一些建议。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>欲问美图何处寻？倾城之链有定音</title>
    <link href="https://www.jeffjade.com/2019/02/17/151-aweome-beautiful-picture-website-list/"/>
    <id>https://www.jeffjade.com/2019/02/17/151-aweome-beautiful-picture-website-list/</id>
    <published>2019-02-17T09:18:00.000Z</published>
    <updated>2019-05-05T14:51:51.650Z</updated>
    
    <content type="html"><![CDATA[<p>正所谓“一图胜千言”，当在写文章、做设计、搞 PPT、发朋友圈，搭配一些合适的图，这无疑将极大提升内容的表现力。鉴于此，在<a href="https://nicelinks.site/?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链</a>的<a href="https://nicelinks.site/theme/picture/?utm_source=jeffjade.com" target="_blank" rel="external">美图</a>板块，收录了来自世界各地的优质图片网站，它们所提供高品质且免费的资源，相信会给您带来极大帮助；同时，那汲取千万创意的结晶，也将使得您可以获得灵感。今将其梳理成文分享于此，希望可以为您提供更多选择。当然，如果您知晓更多资源网站，欢迎留言相告，或者直接移步<a href="https://nicelinks.site/theme/picture?sort=latest/?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链</a>进行分享，从而让您的见识惠及更多人。</p>
<a id="more"></a>
<blockquote>
<p>可以补充分享的是，在<a href="https://nicelinks.site/?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链</a>还收录了些<a href="https://nicelinks.site/tags/图片/?utm_source=jeffjade.com" target="_blank" rel="external">图片相关的工具网站</a>，也是非常值得收藏的存在；在整理这篇文章时，涉及图片批量修改尺寸、压缩等，都是借助这些工具，从而快速完成的。当然，目前收录的内容，远不止这些，您感兴趣的话，不妨前往<a href="https://nicelinks.site/explore/all?utm_source=jeffjade.com" target="_blank" rel="external">探索更多有趣站点</a>。</p>
</blockquote>
<h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a><a href="https://unsplash.com/?utm_source=nicelinks.site" target="_blank" rel="external">Unsplash</a></h3><blockquote>
<p>Beautiful high quality free images and photos you can download and use for any project. No attribution required.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://unsplash.com/?utm_source=nicelinks.site" target="_blank" rel="external">Unsplash</a>，一个提供高品质免费图像和照片的社区网站，这里有世界上最慷慨的摄影师社区为您带来超过数十万张免费高分辨率照片。在这里可以手动选择的新照片中寻找灵感，或使用其提供的搜索来查找和下载您正在寻找的内容，甚至找到你不知道你需要的那张照片。── 来自 <a href="https://nicelinks.site/post/59de1d0c23becb573bb95c68/?utm_source=jeffjade.com" target="_blank" rel="external">Unsplash | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/unsplash.com.png" alt="Unsplash | 倾城之链"></p>
<h3 id="500px-com"><a href="#500px-com" class="headerlink" title="500px.com"></a><a href="https://500px.com/?utm_source=nicelinks.site" target="_blank" rel="external">500px.com</a></h3><blockquote>
<p>A global photography network and app where over 15 million creatives discover and share incredible photos, gain meaningful exposure, and get paid for their work and skills. Find your home among the world’s best photographers.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://500px.com/?utm_source=nicelinks.site" target="_blank" rel="external">500px</a> 是全球摄影网络和应用程序，超过 1500 万创意人员发现和分享令人难以置信的照片，获得全球曝光并获得工作和技能的报酬。这里有着世界上最好的照片分享，深受世界各地人民的喜爱；您可以在该网站，获得灵感并分享您最好的照片。在此平台您可与各地的摄影师联系，通过喜欢和评论照片分享您的想法，并分组讨论摄影的所有细节。此外，您还可以将照片提交至 <a href="https://500px.com/?utm_source=nicelinks.site" target="_blank" rel="external">500px</a>，通过他们的独家分销合作销售您的作品。── 来自 <a href="https://nicelinks.site/post/59ba84083df6765c75b77919/?utm_source=jeffjade.com" target="_blank" rel="external">500px | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/500px.com.png" alt="500px | 倾城之链"></p>
<h3 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a><a href="https://pixabay.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pixabay</a></h3><blockquote>
<p>Over 1,170,781 high quality photos, illustrations, and vector graphics. Free for commercial use. No attribution required.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://pixabay.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pixabay</a>  : 惊人的免费图片网站；这里慷慨的分享了数百万张图片和视频，且种类足够丰富。所有图片和视频可在任何地方免费使用，这使得它们可以安全使用而无需征得许可或给予艺术家信用 - 即使是出于商业目的。您可以选择加入 <a href="https://nicelinks.site/post/59e320dd23becb573bb95c74?utm_source=jeffjade.com" target="_blank" rel="external">Pixabay</a> ，分享你自己的照片作为公共领域与世界各地的人。── 来自 <a href="https://nicelinks.site/post/59e320dd23becb573bb95c74?utm_source=jeffjade.com" target="_blank" rel="external">Pixabay | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/pixabay.com.png" alt="Pixabay | 倾城之链"></p>
<h3 id="天空之城"><a href="#天空之城" class="headerlink" title="天空之城"></a><a href="https://www.skypixel.com/?utm_source=nicelinks.site" target="_blank" rel="external">天空之城</a></h3><blockquote>
<p>换个角度看世界；加入天空之城，从此拥有全新视角。</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://www.skypixel.com/?utm_source=nicelinks.site" target="_blank" rel="external">天空之城 SkyPixel </a>是<a href="/post/59ba81e73df6765c75b77913">深圳市大疆创新</a>旗下的无人机航拍网站；在这里，你可以探索航拍摄影作品，用全新的上帝视角，来俯瞰这个多彩世界；也可以参与航拍视频、航拍美图分享，赢取各类大奖。除此之外，还可以领略各种<code>航拍攻略</code>，关注世界范围内优秀<code>摄影师</code>。── 来自<a href="https://nicelinks.site/post/59c8e9d38f066a5dda100f4d/?utm_source=jeffjade.com" target="_blank" rel="external">天空之城 | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/skypixel.com.png" alt="天空之城 | 倾城之链"></p>
<h3 id="Zoommy"><a href="#Zoommy" class="headerlink" title="Zoommy"></a><a href="http://zoommyapp.com/?utm_source=nicelinks.site" target="_blank" rel="external">Zoommy</a></h3><blockquote>
<p>Zoommy helps you find awesome free stock photos for your creative product or inspiration</p>
</blockquote>
<p><strong>推荐语：</strong><a href="http://zoommyapp.com/?utm_source=nicelinks.site" target="_blank" rel="external">Zoommy</a> 帮助您找到适合您的创意产品或灵感的超棒免费照片。它聚合了多达 50 家的高质量图片网站，可以从中搜索到超过十余万张免费且精美照片，并可以随意使用；额外的可以通过关键词和 <code>emoji</code> 表情符号来搜索图片，支持通过颜色和形状来筛选、下载原图，堪称是<strong>配图神器</strong>。另外，<a href="http://zoommyapp.com/?utm_source=nicelinks.site" target="_blank" rel="external">Zoommy</a>  拥有自己客户端，支持 macOS、Windows、Linux，售价 4.99 刀。── <a href="https://nicelinks.site/post/59c8eb408f066a5dda100f4f?utm_source=jeffjade.com" target="_blank" rel="external">Zoommy | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/zoommyapp.com.png" alt="Zoommy | 倾城之链"></p>
<h3 id="Pexels"><a href="#Pexels" class="headerlink" title="Pexels"></a><a href="https://www.pexels.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pexels</a></h3><blockquote>
<p>Free stock photos you can use everywhere. ✓ Free for commercial use ✓ No attribution required.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://www.pexels.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pexels</a> 是由才华横溢的摄影师分享的最佳免费照片网站。通过提供高质量和完全免费的库存照片，<a href="https://www.pexels.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pexels</a> 帮助世界各地的数百万创作者轻松创建精美的产品和设计。所有照片都有很好的标记，可搜索，也很容易通过我们的发现页面发现。── 来自<a href="https://nicelinks.site/post/59c8ee408f066a5dda100f53?utm_source=jeffjade.com" target="_blank" rel="external">Free stock photos · Pexels | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/pexels.com.png" alt="Pexels | 倾城之链"></p>
<h3 id="PicJumbo"><a href="#PicJumbo" class="headerlink" title="PicJumbo"></a><a href="https://picjumbo.com/?utm_source=nicelinks.site" target="_blank" rel="external">PicJumbo</a></h3><blockquote>
<p>Most beautiful FREE stock photos on the internet? Check it yourself! 1500+ free images in high resolution for every designer, blogger and entrepreneur!</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://picjumbo.com/?utm_source=nicelinks.site" target="_blank" rel="external">PicJumbo</a> 是非常高分辨率的免费库存照片最受欢迎的来源之一。他们所有的图像，背景和照片都是免费的，没有水印，可以用于个人和商业项目。</p>
<p><a href="https://picjumbo.com/?utm_source=nicelinks.site" target="_blank" rel="external">PicJumbo</a> 是一个叫 Viktor Hanacek 的设计师和摄影师创办的在线免费高质量商用图片网，最初他建站是因为没有任何一家储存照片的网站愿意接纳他的摄影照片，他无奈之余只能从 2013 年 11 月开始建站，目前大家已经从这个网站下载图片高达  6,451,891+  次。── 来自 <a href="https://nicelinks.site/post/59e326cf23becb573bb95c83?utm_source=jeffjade.com" target="_blank" rel="external">Free Stock Photos • picjumbo  - 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/picjumbo.com.png" alt="PicJumbo | 倾城之链"></p>
<h3 id="PxHere"><a href="#PxHere" class="headerlink" title="PxHere"></a><a href="https://pxhere.com/?utm_source=nicelinks.site" target="_blank" rel="external">PxHere</a></h3><p><a href="https://pxhere.com/?utm_source=nicelinks.site" target="_blank" rel="external">PxHere</a> 是免费高清商业素材网站。您可以自由地调整和使用它们用于商业目的，而不会归因于原始作者或来源。在此，你可以根据关键字、颜色、尺寸、图像方向等标签，来搜索您想要目标素材。您可以将照片或图形上传到网站，<a href="https://pxhere.com/?utm_source=nicelinks.site" target="_blank" rel="external">PxHere</a> 将对这些上传进行筛选，以确定它们是否适合分发。<a href="https://pxhere.com/?utm_source=nicelinks.site" target="_blank" rel="external">PxHere</a>  不接受任何面向成人的图像。更多详情，请参见 <a href="https://pxhere.com/zh/terms/?utm_source=nicelinks.site" target="_blank" rel="external">PxHere 的条款
</a>。── 来自 <a href="https://nicelinks.site/post/5cce6c46b448cf0a336a8aa7" target="_blank" rel="external">Free Images &amp; Free stock photos - PxHere | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/pxhere.com.jpg" alt="PxHere | 倾城之链"></p>
<h3 id="SplitShire"><a href="#SplitShire" class="headerlink" title="SplitShire"></a><a href="https://www.splitshire.com/?utm_source=nicelinks.site" target="_blank" rel="external">SplitShire</a></h3><blockquote>
<p>What would you do if you had amazing royalty free photos? Download free stock photos with no copyright restrictions and real look.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://www.splitshire.com/?utm_source=nicelinks.site" target="_blank" rel="external">SplitShire</a> 是由一位叫 Daniel Nanescu 的摄影和平面设计师创立的，据他所说，他在十多年的摄影生涯中，拍了几千张照片，平时只能放在硬盘里积灰，现在拿出来分享给大家。  每天他会分享他所拍摄的各种高分辨率图片，目前大约有 1000 张高清图片，多为作者旅行、生活、工作等场景的照片。在这里你无需注册，即可下载高质量的免费图片。── 来自 <a href="https://nicelinks.site/post/59e3225423becb573bb95c79/?utm_source=jeffjade.com" target="_blank" rel="external">SplitShire | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/splitshire.com.png" alt="SplitShire | 倾城之链"></p>
<h3 id="1x-com"><a href="#1x-com" class="headerlink" title="1x.com"></a><a href="https://1x.com/?utm_source=nicelinks.site" target="_blank" rel="external">1x.com</a></h3><blockquote>
<p>1x.com is the world’s biggest curated photo gallery online. Each photo is selected by professional curators. Curated photography.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://1x.com/?utm_source=nicelinks.site" target="_blank" rel="external">1x.com</a> 是一个优秀的摄影作品网站；由 Jacob Jovelou 和 Ralf Stelander 于 2007 年在瑞典乌普萨拉创建。该网站收集了大量运用出色镜头和色彩的优质图片，同时为摄影师分享摄影作品提供了平台。此外，网站还聘请了大量专业的摄影评论家加入来筛选作品。创意摄影，有很多大图，找灵感的同时还能当素材使用。── 来自 <a href="https://nicelinks.site/post/59e3250523becb573bb95c81/?utm_source=jeffjade.com" target="_blank" rel="external">1x - Curated photography | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/1x.com.png" alt="1x.com | 倾城之链"></p>
<h3 id="PixelSquid"><a href="#PixelSquid" class="headerlink" title="PixelSquid"></a><a href="https://www.pixelsquid.com/?utm_source=nicelinks.site" target="_blank" rel="external">PixelSquid</a></h3><blockquote>
<p>PixelSquid makes 3D content easy for graphic designers to download at any angle as transparent PNG or PSD. Free Photoshop plug-in also available.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://www.pixelsquid.com/?utm_source=nicelinks.site" target="_blank" rel="external">PixelSquid</a> 团队最早 2000 年已经成立，一直专注于 3D 领域，所以 <a href="https://www.pixelsquid.com/?utm_source=nicelinks.site" target="_blank" rel="external">PixelSquid</a> 是一家非常酷的网站，它提供了超过 3000 个透明背景处理并带有阴影效果的 3D 模型素材，图片精度非常高。  最最最酷的是，你可以在网页上随意 360 度旋转图形，随后选择自己最需要、最合适的物件角度，然后把素材图档给下载保存、使用。── 来自 <a href="https://nicelinks.site/post/59e322d623becb573bb95c7b/?utm_source=jeffjade.com" target="_blank" rel="external">PixelSquid | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/pixelsquid.com.png" alt="PixelSquid | 倾城之链"></p>
<h3 id="SocWall"><a href="#SocWall" class="headerlink" title="SocWall"></a><a href="https://www.socwall.com/?utm_source=nicelinks.site" target="_blank" rel="external">SocWall</a></h3><blockquote>
<p>SocWall 是一家海外壁纸网站，以优美的风景图片闻名，目前大约有 10000+ 高清壁纸资源可供下载。</p>
</blockquote>
<p><strong>推荐语：</strong> <a href="https://www.socwall.com/?utm_source=nicelinks.site" target="_blank" rel="external">SocWall</a> 是一个提供高高清壁纸下载的网站。其多以风景、植物、花草为主题。你可以在 <a href="https://www.socwall.com/?utm_source=nicelinks.site" target="_blank" rel="external">SocWall</a> 上下载自己喜欢的图片，只需点击图片下方的箭头即可，可以按照不同的分类进行浏览；你看也可以上传自己喜欢的高分辨率壁纸，上传的壁纸必须是要在 1280×720 分辨率以上。── 来自 <a href="https://nicelinks.site/post/59e329b223becb573bb95c8b/?utm_source=jeffjade.com" target="_blank" rel="external">Desktop Wallpaper - Social Wallpapering | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/socwall.com.png" alt="SocWall | 倾城之链"></p>
<h3 id="Visual-Hunt"><a href="#Visual-Hunt" class="headerlink" title="Visual Hunt"></a><a href="https://visualhunt.com/?utm_source=nicelinks.site" target="_blank" rel="external">Visual Hunt</a></h3><blockquote>
<p>High quality free stock photos in one place. 354 Million Free Stock Photos.</p>
</blockquote>
<p><strong>推荐语：</strong> <a href="https://visualhunt.com/?utm_source=nicelinks.site" target="_blank" rel="external">Visual Hunt</a> 网站是一个提供高品质免费图片素材的站点，覆盖全球 200+ 免费商用图片网站，收录了海量的 <code>CC0</code> 授权图片整合后生成的站点，用户可以通过内置的搜索引擎来查询海量的免费图片。图片标签很细致，虽不支持中文搜索，但可以按照颜色检索。── 来自 <a href="https://nicelinks.site/post/5a912e505894d742c4050c88/?utm_source=jeffjade.com" target="_blank" rel="external">Visual Hunt | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/visualhunt.com.png" alt="Visual Hunt | 倾城之链"></p>
<h3 id="花瓣网"><a href="#花瓣网" class="headerlink" title="花瓣网"></a><a href="https://huaban.com/?utm_source=nicelinks.site" target="_blank" rel="external">花瓣网</a></h3><blockquote>
<p>花瓣网, 设计师寻找灵感的天堂！图片素材领导者，帮你采集,发现网络上你喜欢的事物.你可以用它收集灵感,保存有用的素材,计划旅行,晒晒自己想要的东西</p>
</blockquote>
<p><a href="https://huaban.com/?utm_source=nicelinks.site" target="_blank" rel="external">花瓣网</a>一个基于兴趣的社交分享网站，它能帮你收集、发现网络上你喜欢的事物。网站为用户提供了一个简单地采集工具，帮助用户将自己喜欢图片重新组织和收藏（汉化版本的 <code>pinterest</code> ）。在这里你可以获取到很多比较接地气的作品，可以为日常的工作提供些素材和灵感；当然，你也可以在此分享自己的作品。── 来自<a href="https://nicelinks.site/post/59c8f1f68f066a5dda100f58/?utm_source=jeffjade.com" target="_blank" rel="external">花瓣网 | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/huaban.com.png" alt="花瓣网 | 倾城之链"></p>
<h3 id="喜欢的图-在旅图-旅图网"><a href="#喜欢的图-在旅图-旅图网" class="headerlink" title="喜欢的图,在旅图 - 旅图网"></a><a href="https://www.imgtrip.com/?utm_source=nicelinks.site" target="_blank" rel="external">喜欢的图,在旅图 - 旅图网</a></h3><blockquote>
<p>旅图网专注提供各类图片服务。目前主要提供图片展示、下载、归类服务。旅图网一直致力于让用户更方便，更容易的找到自己喜欢的图。喜欢的图，在旅图！</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://www.imgtrip.com/?utm_source=nicelinks.site" target="_blank" rel="external">旅图网</a>是一个专注提供各类图片服务的网站。其初衷是让用户发现、找到自己喜欢的图，所以 slogan 也取做：<strong>喜欢的图，在旅图</strong>；目前主要提供图片展示、下载、归类服务。欲更多去了解它，请参见<a href="https://www.imgtrip.com/p/1?utm_source=nicelinks.site" target="_blank" rel="external">关于旅图网</a>。── 来自<a href="https://nicelinks.site/post/5af786be4cef0476e08ed704/?utm_source=jeffjade.com" target="_blank" rel="external">旅图网 | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/imgtrip.com.png" alt="旅图网 | 倾城之链"></p>
<h3 id="别样网-沙沙野俱乐部"><a href="#别样网-沙沙野俱乐部" class="headerlink" title="别样网-沙沙野俱乐部"></a><a href="http://www.ssyer.com/?utm_source=nicelinks.site" target="_blank" rel="external">别样网-沙沙野俱乐部</a></h3><blockquote>
<p>别样网-国内较大的无版权高清图片网站,提供各类高质量的无版权图片,图片来源于大家贡献,用户自行上传,后台审核,优秀摄影师的交流平台,现已成立沙沙野俱乐部</p>
</blockquote>
<p><strong>推荐语：</strong><a href="http://www.ssyer.com/?utm_source=nicelinks.site" target="_blank" rel="external">别样网-沙沙野俱乐部</a>于 2018 年 1 月上线，是一个充满活力的创意社区，分享免费的图片和视频；它依托于原创设计并以此为核心打造“原创生态圈”。平台聚集优秀的设计师、摄影师、插画师、艺术家、创意人，为此提供从学习、展示、交流、交易、流通等环节的专业服务，为设计师的成长之路提供立体服务及解决方案。── 来自<a href="https://nicelinks.site/post/59e3336a23becb573bb95c91?utm_source=jeffjade.com" target="_blank" rel="external">别样网-沙沙野俱乐部 - 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/ssyer.com.png" alt="别样网 | 倾城之链"></p>
<h3 id="Foter"><a href="#Foter" class="headerlink" title="Foter"></a><a href="https://foter.com/?utm_source=nicelinks.site" target="_blank" rel="external">Foter</a></h3><blockquote>
<p>Premium Royalty-Free Stock Photos From The Foter Community.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://foter.com/?utm_source=nicelinks.site" target="_blank" rel="external">Foter</a> 是一个整合型的图片搜索引擎，目前号称已经网罗了大约 3.35 亿张图片资源，涉及：<a href="https://pixabay.com/?utm_source=nicelinks.site" target="_blank" rel="external">Pixabay</a>、<a href="https://www.flickr.com/?utm_source=nicelinks.site" target="_blank" rel="external">Flickr</a> 等网站的图片均为它网罗的对象。它目前只提供 800像 素左右的图片。做做 PPT 应该OK，但是做其他设计可能还不够精度。── 来自<a href="https://nicelinks.site/post/59e3243d23becb573bb95c7d?utm_source=jeffjade.com" target="_blank" rel="external">Foter: Free Stock Photos &amp; Images - 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/foter.com.png" alt="Foter | 倾城之链"></p>
<h3 id="Magdeleine"><a href="#Magdeleine" class="headerlink" title="Magdeleine"></a><a href="https://magdeleine.co/?utm_source=nicelinks.site" target="_blank" rel="external">Magdeleine</a></h3><blockquote>
<p>Free photo of the day on Magdeleine.co, a blog that features the best free high-quality stock photographies for your inspiration.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://magdeleine.co/?utm_source=nicelinks.site" target="_blank" rel="external">Magdeleine</a> 是由一个叫RYAN MCGILCHRIST 的摄影师创立的摄影博客，每天上传一张高清图片; 为了方便大家搜索图片，作者设置了按颜色搜索，这比较容易让你结合你目前的页面颜色进行筛选图片。── 来自 <a href="https://nicelinks.site/post/59e332cf23becb573bb95c8f/?utm_source=jeffjade.com" target="_blank" rel="external">Hand-picked free photos for your inspiration - Magdeleine | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/magdeleine.co.png" alt="Magdeleine | 倾城之链"></p>
<h3 id="Stokpic"><a href="#Stokpic" class="headerlink" title="Stokpic"></a><a href="https://stokpic.com/?utm_source=nicelinks.site" target="_blank" rel="external">Stokpic</a></h3><blockquote>
<p>Free Stock Photos For commercial Use. Download Free Photos In High Resolution. Free photos for websites, free photos for bogs. Free High Quality Photos CC0.</p>
</blockquote>
<p><strong>推荐语：</strong><a href="https://stokpic.com/?utm_source=nicelinks.site" target="_blank" rel="external">Stokpic</a> 网站拥有大量的可用于商业用途的免费图片资源，还能自动把最新的图片推送到邮箱。其图片素材库，提供各式各样的高清晰图片资源，可以按需搜索你想要的图片，下载即可使用。对于通过邮箱订阅的用户，<a href="https://stokpic.com/?utm_source=nicelinks.site" target="_blank" rel="external">Stokpic</a> 每两周推送 10 张最新收录的图片，你如果有需要，只需要在首页填入直接的姓名和邮箱地址即可。── 来自 <a href="https://nicelinks.site/post/5a913c485894d742c4050c8b/?utm_source=jeffjade.com" target="_blank" rel="external">Free Stock Photos - stokpic | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/stokpic.com.png" alt="Stokpic | 倾城之链"></p>
<h3 id="Lifeofpix"><a href="#Lifeofpix" class="headerlink" title="Lifeofpix"></a><a href="http://www.lifeofpix.com/?utm_source=nicelinks.site" target="_blank" rel="external">Lifeofpix</a></h3><blockquote>
<p>Free high resolution photography. Share and download images freely. Search for pictures by color or format. Photographers, get an account now ! </p>
</blockquote>
<p><strong>推荐语：</strong><a href="http://www.lifeofpix.com/?utm_source=nicelinks.site" target="_blank" rel="external">Lifeofpix</a> 网站提供了免费无版权欧美生活图片，图片多为欧洲景观，多为摄影师拍摄的生活类图片。  该网站每周会选择一位专业摄影师担任该周的周摄影师，由他提供十张高清精致图片供大家学习，所以这网站上的图片质量非常高了。── 来自 <a href="https://nicelinks.site/post/59e333cb23becb573bb95c93/?utm_source=jeffjade.com" target="_blank" rel="external">Free high resolution photography - Life of Pix | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/lifeofpix.com.png" alt="Lifeofpix | 倾城之链"></p>
<h3 id="colorhub-me"><a href="#colorhub-me" class="headerlink" title="colorhub.me"></a><a href="https://colorhub.me/?utm_source=nicelinks.site" target="_blank" rel="external">colorhub.me</a></h3><blockquote>
<p>免费高清无版权图片，个人和商业用途免费。</p>
</blockquote>
<p>**推荐语：<a href="https://colorhub.me/?utm_source=nicelinks.site" target="_blank" rel="external">colorhub.me</a> 提供高清无版权图片，可免费用于个人或者商业，目前已收录十余万张。值得一提的是，您可以关键字或(/颜色)进行搜索，还可以对结果按照色值、宽高比进行筛选；每张图都有其颜色所属，速度也非常可观，令人有蛮不错的使用体验。── 来自<a href="https://nicelinks.site/post/59e8c983bb5ddc10fa2ac107/?utm_source=jeffjade.com" target="_blank" rel="external">colorhub.me | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/colorhub.me.png" alt="colorhub.me | 倾城之链"></p>
<h3 id="图虫网"><a href="#图虫网" class="headerlink" title="图虫网"></a><a href="https://tuchong.com/?utm_source=nicelinks.site" target="_blank" rel="external">图虫网</a></h3><blockquote>
<p>图虫APP，图虫客户端，图虫APP下载，图虫网，图虫网是中国最专业的web2.0摄影社区，下属纪实、风光、人像、生态、黑白、器材、佳能、尼康、宾得等几十个专业摄影社区。海量的照片、相册和图博全部由摄影师共同管理和维护。</p>
</blockquote>
<p><a href="https://tuchong.com/?utm_source=nicelinks.site" target="_blank" rel="external">图虫网</a>是由一群资深的摄影发烧友创建，为所有的摄影爱好者提供优质图片社区服务；为您提供最方便的个人图片管理，和图片搜索功能。在这里你可以拥有一个充分展示自己个性和优秀作品的图片博客，将你的作品与朋友分享。你也可以登录，为图片添加各种标签，以便于日后的搜索和分类。── 来自 <a href="https://nicelinks.site/post/5a7fb20e81585151907cb252/?utm_source=jeffjade.com" target="_blank" rel="external">图虫网 | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/tuchong.com.png" alt="图虫网 | 倾城之链"></p>
<h3 id="Flickr"><a href="#Flickr" class="headerlink" title="Flickr"></a><a href="https://www.flickr.com/?utm_source=nicelinks.site" target="_blank" rel="external">Flickr</a></h3><blockquote>
<p>Flickr 幾乎可說是世界上最出色的網上相片管理工具和分享應用程式。 你可與全世界分享你最愛的相片和影片，並安全地以私人方式向朋友和家人展示各種內容，或是將你使用手機所拍攝的相片和影片分享至網誌。</p>
</blockquote>
<p>**推荐语：<a href="https://www.flickr.com/?utm_source=nicelinks.site" target="_blank" rel="external">Flickr</a> 为一家提供图片分享的虚拟网络相册，致力于让大家重视的人都能看到他们的相片；其特点为私人图片授权与标签分类，让用户能作为小型博客。不同用户可互相交流和创建社群。你可与全世界分享你最爱的相片和影片，并安全地以私人方式向朋友和家人展示各种内容，或是将你使用手机所拍摄的相片和影片分享至网志。在这里，你可以在这里发掘数以万计的精美图片。── 来自 <a href="https://nicelinks.site/post/59e321aa23becb573bb95c77/?utm_source=jeffjade.com" target="_blank" rel="external">Flickr | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/flickr.com.png" alt="Flickr | 倾城之链"></p>
<h3 id="美图每周"><a href="#美图每周" class="headerlink" title="美图每周"></a><a href="http://www.picperweek.com/?utm_source=nicelinks.site" target="_blank" rel="external">美图每周</a></h3><blockquote>
<p>与众不同的图片分享群落，在这里发现你想要的。</p>
</blockquote>
<p>**推荐语：<a href="http://www.picperweek.com/?utm_source=nicelinks.site" target="_blank" rel="external">美图每周</a> 汇聚了来自世界各地的高清质量图片，其中不乏优秀的设计师、画师、摄影师、模特的作品；目前已经收录十余万张精美图片。你可以在这里需要进行搜索，也可以按照标签进行查找；比较值得一提的是，这里提供的还有 Gif 图片。── 来自 <a href="https://nicelinks.site/post/5aafaf5d6697bc75267e1944/?utm_source=jeffjade.com" target="_blank" rel="external">美图每周 | 倾城之链</a>。</p>
<p><img src="https://image.nicelinks.site/picperweek.com.png" alt="Flickr | 倾城之链"></p>
<blockquote>
<p>如要转载请注明原文出处链接：<a href="https://www.jeffjade.com/2019/02/17/151-aweome-beautiful-picture-website-list/">欲问美图何处寻？倾城之链有定音 | 晚晴幽草轩</a></p>
</blockquote>
<p>@2019-02-17 于深圳.福田 Last Modify：2018-02-27</p>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2017/11/29/133-high-quality-front-end-channel/">『优质』前端频道汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/06/04/141-talk-about-my-blogs/">轩帅的博客之旅</a></li>
<li><a href="https://www.jeffjade.com/2017/09/28/127-nice-front-end-tutorial/">与时俱进版前端资源教程</a></li>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      所谓“一图胜千言”，当在写文章、做设计、搞 PPT、发朋友圈，搭配一些合适的图，这无疑将极大提升内容的表现力。鉴于此，在倾城之链的美图板块，收录了来自世界各地的优质图片网站，它们所提供高品质且免费的资源，相信会给您带来极大帮助；同时，那汲取千万创意的结晶，也将使得您可以获得灵感。今将其梳理成文分享于此，希望可以惠及更多的人。
    
    </summary>
    
      <category term="Share" scheme="https://www.jeffjade.com/categories/Share/"/>
    
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="美图" scheme="https://www.jeffjade.com/tags/%E7%BE%8E%E5%9B%BE/"/>
    
      <category term="倾城之链" scheme="https://www.jeffjade.com/tags/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE/"/>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>Prettier 插件为更漂亮快应用代码</title>
    <link href="https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/"/>
    <id>https://www.jeffjade.com/2019/02/02/150-prettier-quickapp-plugin/</id>
    <published>2019-02-02T14:22:00.000Z</published>
    <updated>2019-03-18T14:38:41.859Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nicelinks.site/post/5c16083e819ae45de1453caa" target="_blank" rel="external">Prettier</a> 是一个固定的代码格式化程序。此插件集成 <a href="https://github.com/nicejade/prettier-plugin-quickapp" target="_blank" rel="external">prettier-plugin-ux</a> 到 Prettier 中，因此为您提供了代码格式化的通用接口。<code>.ux</code> 通过 Prettier API 处理文件，它可以为项目和团队提供通用的样式指南，并且可以协助发现代码潜在的很多问题；使用它来编写<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>，将能极大提升开发效率和幸福感。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add --dev --exact prettier prettier-plugin-ux</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prettier --<span class="built_in">write</span> <span class="string">"**/*.ux"</span></div><div class="line"><span class="meta"># or</span></div><div class="line">npx prettier --<span class="built_in">write</span> <span class="string">"**/*.ux"</span></div></pre></td></tr></table></figure>
<p>您可以在 package.json 的 <code>scripts</code> 增加类似如下配置，即可一键美化（<code>yarn prettier</code>）您的快应用代码；其中包括使用到的 css、less、sass 等，当然也可以用来美化 markdown 等等，您可以在 <a href="https://github.com/prettier/prettier#opinionated-code-formatter" target="_blank" rel="external">opinionated-code-formatter</a> 看到 <code>prettier</code> 内置了对多种不用语言的支持。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"prettier"</span>: <span class="string">"prettier --write 'src/**/*.js' 'src/**/*.ux'"</span>,</div></pre></td></tr></table></figure>
<p>除此外，您还可以注入 <a href="https://github.com/Qard/onchange" target="_blank" rel="external">onchange</a> 依赖，它使用 <code>glob</code> 模式来监视文件，能在添加，更改或删除任何内容时运行命令。如果您在 package.json 的 <code>scripts</code> 增加类似如下配置，在开发时候，运行 <code>yarn prettier-watch</code> 命令，即可在保存后对代码进行美化，这无疑将极大提升您的开发效率和体验。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"prettier-watch"</span>: <span class="string">"onchange '**/*.md' 'src/**/*.js' 'src/**/*.ux' -- prettier --write &#123;&#123;changed&#125;&#125;"</span></div></pre></td></tr></table></figure>
<p><code>Prettier</code> 包含一些可自定义的格式选项，可在 CLI 和 AP I中使用，您可以根据自己习惯，自行在 package.json 中配置。具体选项及说明，可以参见 <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="external">Options | Prettier</a>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"prettier": &#123;</div><div class="line">    "singleQuote": true,</div><div class="line">    "semi": false,</div><div class="line">    "printWidth": 120,</div><div class="line">    "proseWrap": "never"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">onInit () &#123;</div><div class="line">&#125;,</div><div class="line">onShow   () &#123;</div><div class="line">APP_STATISTICS.page_show(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&lt;style lang=<span class="string">"less"</span>&gt;</div><div class="line">.page-wrapper&#123;flex-direction: column;</div><div class="line">width:<span class="number">6</span> * @size-factor;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/style&gt;</span></div></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  onInit() &#123;&#125;,</div><div class="line">  onShow() &#123;</div><div class="line">    APP_STATISTICS.page_show(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;style lang=<span class="string">"less"</span>&gt;</div><div class="line">.page-wrapper &#123;</div><div class="line">  flex-direction: column;</div><div class="line">  width: <span class="number">6</span> * @size-factor;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/style&gt;</span></div></pre></td></tr></table></figure>
<p>Prettier可以<a href="http://prettier.io/docs/en/editors.html" target="_blank" rel="external">在您的编辑器中</a>运行- <a href="http://prettier.io/docs/en/editors.html" target="_blank" rel="external">保存</a>，<a href="https://prettier.io/docs/en/precommit.html" target="_blank" rel="external">预先提交挂钩</a>或 <a href="https://prettier.io/docs/en/cli.html#list-different" target="_blank" rel="external">CI 环境</a>中，以确保您的代码库具有一致的样式，而不必再次发布针对代码审查的挑剔评论！其中使用与配置，在 <a href="https://nicelinks.site/post/5c16083e819ae45de1453caa" target="_blank" rel="external">Prettier</a> 文档中都有详尽的描述，当然您也可以参考这份── 致力于构建更为优雅的快应用开发脚手架模板：<a href="https://github.com/nicejade/quickapp-boilerplate-template/blob/master/package.json?1547482405011" target="_blank" rel="external">quickapp-boilerplate-template</a>。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>此 <a href="https://github.com/nicejade/prettier-plugin-quickapp" target="_blank" rel="external">prettier-plugin-quickapp</a> 的 <code>parser</code> 直接使用了 <a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a> 内置的 Vue Parser；而 <a href="https://prettier.io/blog/2018/11/07/1.15.0.html" target="_blank" rel="external">prettier@1.15.0</a> 以后对 Prettier Vue 进行一些格式调整，导致在<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f?utm_source=quickapp.lovejade.cn" target="_blank" rel="external">快应用</a>中写如下代码时候：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"onCreateShortcut"</span> <span class="attr">value</span>=<span class="string">"创建快捷方式"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>Prettier</code> 将不会将其修正，而会报出如下错误：</p>
<blockquote>
<p>SyntaxError: Void elements do not have end tags “input”</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"onCreateShortcut"</span> <span class="attr">value</span>=<span class="string">"创建快捷方式"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>因为 <code>Prettier</code> (Vue &amp; Html)对于 <code>input</code> 标签，期待的是如上 <code>self-close</code> 写法。为提升使用体验，您可以注入任意类型脚本（如下这段 <code>node.js</code> 版），使得在 <code>Prettier</code> 前，将 <code>input</code> 标签修正即可;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @file: selfCloseInputTag.js</div><div class="line"> * @desc: 遍历指定目录下 .ux 文件，将其中 input 标签由 &lt;input&gt;&lt;/input&gt; 转换为 &lt;input /&gt;</div><div class="line"> * @date: 2019-01-23</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> quickappCodePath = <span class="string">'./src/'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">codePath</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> traversing = <span class="function"><span class="params">cpath</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> files = fs.readdirSync(cpath)</div><div class="line">    files.forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> fPath = path.join(cpath, fileName)</div><div class="line">      <span class="keyword">const</span> stats = fs.statSync(fPath)</div><div class="line">      stats.isDirectory() &amp;&amp; traversing(fPath)</div><div class="line">      stats.isFile() &amp;&amp; fPath.endsWith(<span class="string">'.ux'</span>) &amp;&amp; matchAndReplace(fPath)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  traversing(codePath)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> matchAndReplace = <span class="function"><span class="params">path</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> pageContent = fs.readFileSync(path, <span class="string">'UTF-8'</span>)</div><div class="line">  <span class="keyword">const</span> newContent = pageContent.replace(<span class="regexp">/(&lt;[\s\S]*?input\b[\s\S]*?)&gt;([\s\S]*?)(&lt;\/input&gt;)/g</span>, <span class="string">'$1 /&gt;'</span>)</div><div class="line">  fs.writeFile(path, newContent, error =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> <span class="string">`Something went wrong: <span class="subst">$&#123;error&#125;</span>`</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(quickappCodePath)</div></pre></td></tr></table></figure>
<p>在 <code>package.json</code> 文件中，可将对应脚本修改为如下模样：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: &#123;</div><div class="line">    <span class="string">"prettier"</span>: <span class="string">"node ./command/selfCloseInputTag.js &amp;&amp; prettier --write \"</span>src/**/*.&#123;js,ts,ux,css&#125;\<span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@2019-01-15 于深圳.福田 Last Modify：2018-02-02</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">快应用开发常见问题及解决方案</a></li>
<li><a href="https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request">如何优雅处理「快应用」数据请求</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚
</a></li>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      Prettier 是一个固定的代码格式化程序，时下已成为解决代码格式问题的优选方案。本文介绍基于 Prettier，转为美化快应用的插件 prettier-plugin-ux，以及其使用方法。它通过 Prettier API 处理 .ux 文件，在项目中使用，可以为团队提供通用的样式指南，从而提高效率和幸福感。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Tools" scheme="https://www.jeffjade.com/tags/Tools/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Prettier" scheme="https://www.jeffjade.com/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅处理「快应用」数据请求</title>
    <link href="https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request/"/>
    <id>https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request/</id>
    <published>2019-01-20T14:22:00.000Z</published>
    <updated>2019-02-14T05:22:14.605Z</updated>
    
    <content type="html"><![CDATA[<p>查阅<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>开发文档，可以知道官方提供了<a href="https://doc.quickapp.cn/features/system/fetch.html" target="_blank" rel="external">数据请求</a>接口；对于如何使用，文档中也给出了简单的说明和代码示例，但很显然，这在实际项目中，不够优雅且更不高效，所以需要对其进行再封装，使得可以大幅提升开发效率，同时也令整个代码优雅，以便于维护。所以在此篇文章的存在，旨在于讨论下<a href="https://quickapp.lovejade.cn/how-to-elegantly-handle-quickapp-request" target="_blank" rel="external">如何优雅处理「快应用」数据请求</a>。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/quickapp-elegantly-fetch.jpeg" alt="如何优雅处理快应用数据请求"></p>
<blockquote>
<p>备注： 本文最先发布于，基于 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 构建的最新博客: <a href="https://quickapp.lovejade.cn/how-to-elegantly-handle-quickapp-request/" target="_blank" rel="external">静轩之别苑</a>。</p>
</blockquote>
<blockquote>
<p>为保证文中的代码，是直接拷贝就可以运行的，特有引用网络开源接口；需要备注说明的是，在<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>使用接口，需要在 <code>manifest.json</code> 中，对所使用的接口进行声明；使用数据请求，就需要注入下面的声明：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"system.fetch"</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="默认的低效率写法"><a href="#默认的低效率写法" class="headerlink" title="默认的低效率写法"></a>默认的低效率写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $fetch <span class="keyword">from</span> <span class="string">'@system.fetch'</span></div><div class="line">$fetch.fetch(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'https://api.apiopen.top/singlePoetry'</span>,</div><div class="line">  <span class="attr">responseType</span>: <span class="string">'text'</span>,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> result = response.data</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`success response, code: <span class="subst">$&#123;result.code&#125;</span>, data: <span class="subst">$&#123;result.data&#125;</span>`</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, code</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`fetch handling fail, code = <span class="subst">$&#123;code&#125;</span>`</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">complete</span>: funtion (data, code) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`fetch handling complete, code = <span class="subst">$&#123;code&#125;</span>`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>以上就是官方文档提供的上古 <code>jQuery</code>  时代的写法，冗长的代码，古老的回调式操作，以及对请求没有做任何必要的处理，如果这在项目中使用，对代码复用度无疑是零，从长期维护角度看，这样的代码就是导致痛苦的根源。虽然，示例代码这样写道，也无可厚非；但先入为主的模范作用，将对于诸多经验不够充足的开发者，起到错误的误导性引领。</p>
<h2 id="改进后的用法"><a href="#改进后的用法" class="headerlink" title="改进后的用法"></a><strong>改进后的用法</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $fetch <span class="keyword">from</span> <span class="string">'@system.fetch'</span></div><div class="line">$fetch.fetch(&#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'https://api.apiopen.top/singlePoetry'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> result = response.data</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`success response, code: <span class="subst">$&#123;result.code&#125;</span>, data: <span class="subst">$&#123;result.data&#125;</span>`</span>)</div><div class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Something Error: <span class="subst">$&#123;error&#125;</span>`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>其实，<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>对部分接口方法调用，返回了 Promise 优化，其中就包括数据请求接口；所以，使用如上这种方式，至少代码显得不那么冗长而古老。但，数据请求相关代码，却依然没有得到复用，这就需要对其进行封装处理。</p>
<h2 id="优化处理数据请求"><a href="#优化处理数据请求" class="headerlink" title="优化处理数据请求"></a><strong>优化处理数据请求</strong></h2><p>如果每次调用接口，都需要 import，外加指定 url，method 等参数，这无异是变相的浪费生命；大道至简，优秀的开发流程，一定是便于编写和维护！所以有必要将其统一封装，如下面所封装的代码（可放置在 <code>helpera/ajax.js</code> 路径下）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandle</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    $fetch.fetch(&#123;</div><div class="line">      <span class="attr">url</span>: params.url,</div><div class="line">      <span class="attr">method</span>: params.method,</div><div class="line">      <span class="attr">data</span>: params.data</div><div class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> result = response.data</div><div class="line">      <span class="keyword">const</span> content = <span class="built_in">JSON</span>.parse(result.data)</div><div class="line">      <span class="comment">/* @desc: 可跟具体不同业务接口数据，返回你所需要的部分，使得使用尽可能便捷 */</span></div><div class="line">      content.code === <span class="number">200</span> ? resolve(content.result) : resolve(content.message)</div><div class="line">    &#125;).catch(<span class="function">(<span class="params">error, code</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`🐛 request fail, code = <span class="subst">$&#123;code&#125;</span>`</span>)</div><div class="line">      reject(error)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 此处只是处于示例代码的可运行性，实际项目中，此方法最好予以封装 &amp; 提取 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">url, query</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> str = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> query) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> query[key] === <span class="string">'object'</span>) &#123;</div><div class="line">      query[key] = <span class="built_in">JSON</span>.stringify(query[key])</div><div class="line">    &#125;</div><div class="line">    str.push(key + <span class="string">'='</span> + query[key])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> paramStr = str.join(<span class="string">'&amp;'</span>)</div><div class="line">  <span class="keyword">return</span> paramStr ? <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;paramStr&#125;</span>`</span> : url</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">post</span>: <span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> requestHandle(&#123;</div><div class="line">      <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">      <span class="attr">url</span>: url,</div><div class="line">      <span class="attr">data</span>: params</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> requestHandle(&#123;</div><div class="line">      <span class="attr">method</span>: <span class="string">'get'</span>,</div><div class="line">      <span class="attr">url</span>: queryString(url, params)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这 $fetch.fetch 返回本就是一个 <code>Promise</code>，这里为何额外要包裹的一层处理呢？这样做的好处不仅在于使其依旧可以链式调用，同时对返回数据统一处理，精简返回内容，使得在获取到最终结果处，可以尽可能简单，更加有利于后期做维护，调用方式就可以成为如下这样（涉及某类模块，可统一在相应模块文件下，如：<code>helper/apis/poetry.js</code> ）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ajax <span class="keyword">from</span> <span class="string">'./../ajax'</span></div><div class="line"><span class="keyword">const</span> baseUrl = <span class="string">'https://api.apiopen.top/'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  getSinglePoetry(data) &#123;</div><div class="line">    <span class="keyword">return</span> $ajax.get(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>singlePoetry`</span>, data)</div><div class="line">  &#125;,</div><div class="line">  getOtherApi(data) &#123;</div><div class="line">    <span class="comment">// other api .... </span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，开发者将接口，按照功能模块规划，分门别类以存放至统一文件夹下，如 <a href="https://github.com/nicejade/nicelinks-quick-app/tree/master/src/helper/apis" target="_blank" rel="external">helper/apis</a>；如此清晰明了，方便调用，且对于多人协作开发，又不相互响应，减少不必要的冲突。类似善用配置，以表驱动法的编程手法，应该活学活用，贯穿始终。这些理念，早在<a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/#更优雅的处理-Http-请求">更优雅的处理-Http-请求 | 开箱即用的 Vue Webpack 脚手架模版</a>中就有阐述。</p>
<p>至此，就对接口进行了完美封装处理；在业务层便捷调用，也是需要优化；在快应用，最为高效的办法，就是将上面封装暴露给 <code>global</code>，如此就可以：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; $apis &#125; <span class="keyword">from</span> <span class="string">'./helper'</span></div><div class="line"><span class="keyword">const</span> hook2global = global.__proto__ || global</div><div class="line">hook2global.$apis = $apis</div><div class="line"></div><div class="line"><span class="comment">// 在任何其他页面、组件、js 文件，接可以像如下调用</span></div><div class="line"><span class="keyword">const</span> params = &#123;&#125;</div><div class="line">$apis.poetry.getSinglePoetry(params).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理正常逻辑</span></div><div class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理请求异常逻辑</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="更近一步体验优化"><a href="#更近一步体验优化" class="headerlink" title="更近一步体验优化"></a><strong>更近一步体验优化</strong></h2><p>在业务逻辑中，发起数据请求时候，都需要添加 Loading，提示用户请求正在进行中，以免响应缓慢给用户带来不必要的疑惑；而，在请求成功或失败情形下，都需要对 Loading 进行消除，如此一来就会有下面的逻辑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$apis.poetry.getSinglePoetry(params).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.isLoading = <span class="literal">false</span></div><div class="line">    <span class="comment">// 处理正常逻辑</span></div><div class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理请求异常逻辑</span></div><div class="line">    <span class="keyword">this</span>.isLoading = <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>很明显，像类似不管请求成功或失败，都需要执行的业务逻辑是存在的，如果分别在对应链式后做处理，谈何优雅呢？在 <code>ES2018</code>  有引入 <code>finally</code> 标准，跟<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>中请求后 <code>complete</code> 回调是一样的作用：不管最后状态如何，都会执行的操作。所以上面的调用，就可以优化成如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$apis.poetry.getSinglePoetry(params).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理正常逻辑</span></div><div class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理请求异常逻辑</span></div><div class="line">&#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.isLoading = <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当按照预期这样写的时候，你会发现 <a href="http://es6.ruanyifeng.com/#docs/promise#Promise-prototype-finally" target="_blank" rel="external">finally</a> 链式并未得到调用。查阅一番，兴许你也会得到一个答案，<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>规范没有 finally，如此一来，就不得不打补丁 (polyfill) 来予以解决了，可以有的途径不少，下面介绍一种简单无依赖的法子，注入以下代码即可；那么上面关于 <code>ajax.js</code> 的封装则可以优化成如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> P = <span class="keyword">this</span>.constructor</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(</div><div class="line">    <span class="function"><span class="params">value</span>  =&gt;</span> P.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),</div><div class="line">    reason =&gt; P.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandle</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    $fetch.fetch(&#123;</div><div class="line">      <span class="attr">url</span>: params.url,</div><div class="line">      <span class="attr">method</span>: params.method,</div><div class="line">      <span class="attr">data</span>: params.data</div><div class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> result = response.data</div><div class="line">      <span class="keyword">const</span> content = <span class="built_in">JSON</span>.parse(result.data)</div><div class="line">      <span class="comment">/* @desc: 可跟具体不同业务接口数据，返回你所需要的部分，使得使用尽可能便捷 */</span></div><div class="line">      content.code === <span class="number">200</span> ? resolve(content.result) : resolve(content.message)</div><div class="line">    &#125;).catch(<span class="function">(<span class="params">error, code</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`🐛 request fail, code = <span class="subst">$&#123;code&#125;</span>`</span>)</div><div class="line">      reject(error)</div><div class="line">    &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`✔️ request @<span class="subst">$&#123;params.url&#125;</span> has been completed.`</span>)</div><div class="line">      resolve()</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要补充说明的是，<code>finally</code> 方法指定的回调函数，用于指定不管 <strong>Promise</strong> 对象最后状态如何，都会执行的操作；它是与状态无关的，不依赖于 Promise 的执行结果，所以此处 polyfill 返回跟标准一致，回调函数不接受任何参数。</p>
</blockquote>
<p>关于快应用数据请求的整体代码优化设计，具体可参见 Github 项目：<a href="https://github.com/nicejade/quickapp-boilerplate-template" target="_blank" rel="external">quickapp-boilerplate-template</a>: 🔨致力于构建更为优雅的「快应用」开发脚手架模板。</p>
<p>至此，对处理「快应用」数据请求，相比开发文档中所写到的示例，是不是优雅很多呢？如果你的项目中，涉及数据请求有超过 3 个的可能，那么你就应该做像着样。当然，这不仅仅限于此接口，其他如数据存储（storage），上传下载（request），你都应该予以封装。这也不仅仅限于<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>，其他如开发 <code>Vue</code>、<code>React</code> 等项目，亦是同理。</p>
<p>@2019-01-17 于深圳.福田 Last Modify：2018-01-19</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/150-prettier-quickapp-plugin">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚
</a></li>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      查阅快应用开发文档，可以知道官方提供了数据请求接口；对于如何使用，文档中也给出了示例，但很显然，这在实际项目中，不够优雅且更不高效，所以需要对其进行再封装，使得可以大幅提升开发效率，同时也令整个代码优雅、便于维护。所以在此篇文章的存在，旨在于讨论下如何优雅处理快应用数据请求。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android" scheme="https://www.jeffjade.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>基于 Vue-Cli3 构建的脚手架模版</title>
    <link href="https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/"/>
    <id>https://www.jeffjade.com/2019/01/13/146-awesome-vue-cli3-example/</id>
    <published>2019-01-13T13:21:00.000Z</published>
    <updated>2019-01-15T05:16:49.346Z</updated>
    
    <content type="html"><![CDATA[<p>早在 2018 年中旬，那时候 <code>Vue-Cl3</code> 还处于 <code>Beta</code> 、<code>RC</code> 版本，就有在公司小项目中予以使用；它集成了更多丰富的功能，以及更多默认配置，可通过附带的图形用户界面创建、开发和管理项目，令人颇为受用，就有将先前写 <a href="https://www.jeffjade.com/2017/03/11/120-how-to-write-vue-better/">Vue 项目的经验</a>，集成进新的模板 <a href="https://github.com/nicejade/awesome-vue-cli3-example" target="_blank" rel="external">awesome-vue-cli3-example</a>，以便更高效和合理地构建 Web 应用程序。如今，它已成为 Vue.js 开发的标准工具，故而就在此略作分享，希冀可以为更多开发者带来些帮助。</p>
<a id="more"></a>
<blockquote>
<p>如果您想预览此脚手架模版，可移步至：<a href="https://vue-cli3.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">https://vue-cli3.lovejade.cn/</a>。</p>
</blockquote>
<p><img src="https://image.nicelinks.site/jpg/nice-links-009.jpg" alt="Vue-Cli3 脚手架模版"></p>
<h3 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h3><p><strong>Vue-Cli3</strong>：对 Babel、TypeScript、ESLint、PostCSS、PWA、单元测试和 End-to-end 测试提供开箱即用的支持。</p>
<p><strong>此脚手架</strong>：基于 Vue-Cli3 所构建，延续早先<a href="https://github.com/nicejade/vue-boilerplate-template" target="_blank" rel="external">vue-boilerplate-template</a>项目所倡导，旨在探究更高效地构建优质 Web 应用（推荐阅读<a href="https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/" target="_blank" rel="external">开箱即用的 Vue Webpack 脚手架模版</a>）；为此，有作以下工作：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入并配置<a href="https://router.vuejs.org/zh/" target="_blank" rel="external">Vue-router</a>，使得构建单页面应用(SPA)变得易如反掌；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入并配置<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="external">Vuex</a>，以方便处理应用程序开发的状态管理；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 引入<a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="external">Element-ui</a>，以便快速搭建网站，而无需过多关注 UI；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 引入<a href="https://github.com/axios/axios" target="_blank" rel="external">Axios</a>并做封装，使得更优雅处理 Http 请求；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 引入<a href="https://github.com/iamkun/dayjs" target="_blank" rel="external">Dayjs</a>，使得以更小的代价，处理日期时间相关；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 引入<a href="https://github.com/markedjs/marked" target="_blank" rel="external">marked</a>插件，并做封装，使得可以充作富文本编辑器；同时亦可借助它的解析功能，实现<code>Markdown</code>来绘制页面；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 基于 Webepack 4.* 新增特性，作了优化，详见<code>vue.config.js</code>；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 引入<a href="https://github.com/declandewet/vue-meta" target="_blank" rel="external">vue-meta</a>插件以便允许您管理应用的元信息，支持 <code>SSR</code> + <code>Streaming</code>，就像<a href="https://github.com/nfl/react-helmet" target="_blank" rel="external">react-helmet</a>对 React 一样，它对<code>SEO</code>很棒。</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 开启 &amp; 运用<a href="https://jestjs.io/" target="_blank" rel="external">Jest</a>对组件做单元测试，并附以 Demo 示例；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 集成<a href="https://prettier.io/" target="_blank" rel="external">Prettier</a>插件并做配置，促使团队写出更好且风格一致的代码，具体参见<a href="https://jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier/" target="_blank" rel="external">使用 ESLint ＆ Prettier美化Vue代码</a>；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入<a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="external">prerender-spa-plugin</a>插件，使得在单页面应用程序中预呈现静态 HTML，优化 SEO 以及首屏渲染。</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="external">webpack-bundle-analyzer</a>插件，使得运行<code>yarn analyz</code>，即可直观得到构建包内容，以助优化；详情参见：<a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/#%E5%AE%9A%E4%BD%8D-webpack-%E5%A4%A7%E7%9A%84%E5%8E%9F%E5%9B%A0" target="_blank" rel="external">Webpack 打包优化之体积篇</a></li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入<a href="https://github.com/GoogleChromeLabs/size-plugin" target="_blank" rel="external">size-plugin</a>插件，使得在构建应用之时，可打印 Webpack 资产的 gzip 大小，以及自上次构建以来的变更。</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 导入为模块提供中间缓存步骤的<a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="external">hard-source-webpack-plugin</a>插件，它使第二次构建速度明显加快。</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> 将此脚手架，结合<strong>Node.js</strong>(Koa2)<strong>Nginx**</strong>MondoDb<strong>**Redis</strong>，汇融入于<strong>Docker</strong>，使 Front-End Developer 可轻松构建整个 Web 应用；目前开源于<a href="https://github.com/nicejade/docker-vue-node-nginx-mongodb-redis" target="_blank" rel="external">Docker Vue Node Nginx Mongodb Redis</a>。</li>
<li style="list-style: none"><input type="checkbox"> 优化内置<code>Icon</code>(Svg) 组件，使可以接收不同方式输入，并将 Svg 提取至单独文件中，以避免资源重复加载；</li>
</ul>
<blockquote>
<p>需要补充说明的是，有些依赖并不是所有项目都需要的；如：<code>prerender-spa-plugin</code>，你知道要实现这个功能点的方法，很多；如 SSR；就实现 <code>SEO</code> 而言，也可以利用 Nginx 组合 <a href="https://github.com/prerender/prerender" target="_blank" rel="external">Prerender</a>，直接在服务器上处理（个人作品<a href="https://nicelinks.site/?utm_source=jeffjade.com" target="_blank" rel="external">倾城之链</a>）目前就是采用这种方案。在实际项目中，可根据诉求，自行决定用哪种方案。如果不启用这种在构建时候的解决方案，最好率先予以从 <code>package.json</code> 中移除，毕竟这个插件中依赖了 <code>Puppeteer</code>，这将是一个 Size 蛮大的库。</p>
</blockquote>
<h3 id="易于扩展"><a href="#易于扩展" class="headerlink" title="易于扩展"></a>易于扩展</h3><p><strong>Vue-Cli3</strong>：它的插件系统可以让社区根据常见需求构建和共享可复用的解决方案。</p>
<p><strong>此脚手架</strong>：你可以在此基础上，根据自己所需，轻易增删插件，无痛变更解决方案；推荐文章：<a href="https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/" target="_blank" rel="external">开箱即用的 Vue Webpack 脚手架模版</a>；<a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/" target="_blank" rel="external">如何写一手漂亮的 Vue</a>。</p>
<h3 id="无需-Eject"><a href="#无需-Eject" class="headerlink" title="无需 Eject"></a>无需 Eject</h3><p><strong>Vue-Cli3</strong>：Vue CLI 完全是可配置的，无需 eject。这样你的项目就可以长期保持更新了。</p>
<p><strong>此脚手架</strong>：默认对项目基本所需，已在 vue.config.js 中做了填写，参照的同时，你可自行修改。</p>
<blockquote>
<p><strong>注意事项</strong>：在vue.config.js中，已对全局样式做了预先注入，可以无需引用即可使用；对此，须要付出的代价是，一旦对预先注入的全局样式做了修改，需要重新运行项目，方可生效。</p>
</blockquote>
<h3 id="CLI-之上的图形化界面"><a href="#CLI-之上的图形化界面" class="headerlink" title="CLI 之上的图形化界面"></a>CLI 之上的图形化界面</h3><p><strong>Vue-Cli3</strong>：通过配套的图形化界面创建、开发和管理你的项目；运行如下命令即可，这个真的太棒了。</p>
<p><code>vue ui</code></p>
<p><code>GUI</code>对新手来说特别有用，但即使你是一个终极极客也很难不喜欢它。你可以用它来创建一个项目、管理 CLI 插件、管理项目的依赖关系、配置项目、运行npm脚本；</p>
<p><img src="https://vue-cli3.lovejade.cn/img/vue-cli-manage-cli-plugin.bece2ac2.png" alt="Vue-Cli3 脚手架模版"></p>
<p><img src="https://vue-cli3.lovejade.cn/img/vue-cli-manage-project-dependencies.f6d9e3a0.png" alt="Vue-Cli3 脚手架模版"></p>
<p><img src="https://vue-cli3.lovejade.cn/img/vue-cli-npm.96fb4309.png" alt="Vue-Cli3 脚手架模版"></p>
<h3 id="即刻创建原型"><a href="#即刻创建原型" class="headerlink" title="即刻创建原型"></a>即刻创建原型</h3><p><strong>Vue-Cli3</strong>：用单个 Vue 文件即刻实践新的灵感。Vue CLI3 带有疯狂的新功能。 当您想要使用组件时，您可以创建单个文件组件（.vue 文件），而不是创建新项目，并通过运行<code>vue serve MyAwesomeComponent.vue</code>在浏览器中提供它。您甚至可以构建组件并在需要时进行部署。</p>
<h3 id="面向未来"><a href="#面向未来" class="headerlink" title="面向未来"></a>面向未来</h3><p><strong>Vue-Cli3</strong>：为现代浏览器轻松产出原生的 ES2015 代码，或将你的 Vue 组件构建为原生的 Web Components 组件。</p>
<h4 id="vue-cli-service-serve"><a href="#vue-cli-service-serve" class="headerlink" title="vue-cli-service serve"></a>vue-cli-service serve</h4><p>用法：vue-cli-service serve [options] [entry] 选项：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-open    在服务器启动时打开浏览器</span></div><div class="line">-<span class="ruby">-copy    在服务器启动时将 URL 复制到剪切版</span></div><div class="line">-<span class="ruby">-mode    指定环境模式 (默认值：development)</span></div><div class="line">-<span class="ruby">-host    指定 host (默认值：<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>)</span></div><div class="line">-<span class="ruby">-port    指定 port (默认值：<span class="number">8080</span>)</span></div><div class="line">-<span class="ruby">-https   使用 https (默认值：<span class="literal">false</span>)</span></div></pre></td></tr></table></figure>
<h4 id="vue-cli-service-serve-1"><a href="#vue-cli-service-serve-1" class="headerlink" title="vue-cli-service serve"></a>vue-cli-service serve</h4><p>命令会启动一个开发服务器 (基于<a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a>) 并附带开箱即用的模块热重载 (Hot-Module-Replacement)。</p>
<p>除了通过命令行参数，你也可以使用 vue.config.js 里的<a href="https://cli.vuejs.org/zh/config/#devserver" target="_blank" rel="external">devServer</a>字段配置开发服务器。</p>
<h4 id="vue-cli-service-build"><a href="#vue-cli-service-build" class="headerlink" title="vue-cli-service build"></a>vue-cli-service build</h4><p>用法：vue-cli-service build [options] [entry|pattern]</p>
<p>选项：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-mode        指定环境模式 (默认值：production)</span></div><div class="line">-<span class="ruby">-dest        指定输出目录 (默认值：dist)</span></div><div class="line">-<span class="ruby">-modern      面向现代浏览器不带自动回退地构建应用</span></div><div class="line">-<span class="ruby">-target      app <span class="params">| lib |</span> wc <span class="params">| wc-async (默认值：app)</span></span></div><div class="line">-<span class="ruby"><span class="params">-name        库或 Web Components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)</span></span></div><div class="line">-<span class="ruby"><span class="params">-no-clean    在构建项目之前不清除目标目录</span></span></div><div class="line">-<span class="ruby"><span class="params">-report      生成 report.html 以帮助分析包内容</span></span></div><div class="line">-<span class="ruby"><span class="params">-report-json 生成 report.json 以帮助分析包内容</span></span></div><div class="line">-<span class="ruby"><span class="params">-watch       监听文件变化</span></span></div></pre></td></tr></table></figure>
<p><code>vue-cli-service build</code>会在<em>dist/</em>目录产生一个可用于生产环境的包，带有 JS/CSS/HTML 的压缩，和为更好的缓存而做的自动的 vendor chunk splitting。它的 chunk manifest 会内联在 HTML 里。</p>
<p>这里还有一些有用的命令参数：</p>
<ul>
<li><p>--modern 使用<a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#%E7%8E%B0%E4%BB%A3%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">现代模式</a>构建应用，为现代浏览器交付原生支持的 ES2015 代码，并生成一个兼容老浏览器的包用来自动回退。</p>
</li>
<li><p>--target 允许你将项目中的任何组件以一个库或 Web Components 组件的方式进行构建。更多细节请查阅<a href="https://cli.vuejs.org/zh/guide/build-targets.html" target="_blank" rel="external">构建目标</a>。</p>
</li>
<li><p>--report 和 –report-json 会根据构建统计生成报告，它会帮助你分析包中包含的模块们的大小。</p>
</li>
</ul>
<p>@2018-11-21 于深圳.福田 Last Modify：2019-01-15</p>
<h3 id="猜你喜欢-对你有用-的文章"><a href="#猜你喜欢-对你有用-的文章" class="headerlink" title="猜你喜欢(/对你有用)的文章"></a><strong>猜你喜欢(/对你有用)的文章</strong></h3><ul>
<li><a href="https://www.jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/">开箱即用的 Vue Webpack 脚手架模版</a></li>
<li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/" target="_blank" rel="external">如何写一手漂亮的 Vue</a></li>
<li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/" target="_blank" rel="external">所历前端“姿势”更替记(其一)</a></li>
<li><a href="https://jeffjade.com/2016/05/08/106-vue-es6-jade-scss-webpack-gulp/" target="_blank" rel="external">Vue ES6 Jade Scss Webpack Gulp</a></li>
<li><a href="https://jeffjade.com/2016/07/06/110-vue-webpack-component-develop/" target="_blank" rel="external">Vue Webpack 组件化开发实践</a></li>
<li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="external">Webpack 打包优化之速度篇</a></li>
<li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      此为基于 Vue-Cli3 搭建的开箱即用 Vue 脚手架模版，致力于探究更高效地构建优质 Web 应用。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>云集优站，尽在「倾城之链」其二</title>
    <link href="https://www.jeffjade.com/2018/12/23/146-talk-about-nice-links/"/>
    <id>https://www.jeffjade.com/2018/12/23/146-talk-about-nice-links/</id>
    <published>2018-12-23T09:21:00.000Z</published>
    <updated>2019-11-03T16:40:27.512Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://nicelinks.site?from=jeffjade.com" target="_blank" rel="external">倾城之链</a>，基于 Vue2 (Webpack4, Es6, Element-Ui…) Node（Koa2）、MongoDB、Nginx、Redis、Pm2、Prerender 等工具/技术，所构建的 Web 应用程序，旨在云集全球优秀网站，方便你我探索互联网中更广阔的世界。</p>
<a id="more"></a>
<p>早在一年以前，就在<a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/#">云集优站，尽在「倾城之链」</a>记载了<a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external">「倾城之链」</a>的由来、动机等；白驹过隙，一年的光景，竟又是这般快的，成了历史；先前为其作的那些<a href="https://github.com/nicejade/nicelinks-vue-client/issues" target="_blank" rel="external">规划</a>，如今回看，大半犹未完成；一如那些所期待的梦，在年与时驰间搁浅、盘桓，不禁令人有些黯然；幸好，初心仍在，现实虽颇为骨感，梦想仍在坚持中向前。此篇就<a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external">「倾城之链」</a>的目标、作用价值、以及访问方式，做下阐述。</p>
<p><img src="https://image.nicelinks.site/nicelinks-181223.png" alt="倾城之链 - NICE LINKS"></p>
<h2 id="目标与哲学"><a href="#目标与哲学" class="headerlink" title="目标与哲学"></a>目标与哲学</h2><p>您知道，如今这时代，无法估量的信息，广阔无垠且散乱无际；担心错过她而努力汲取的同时，却可能错过更多。当上进心充盈之时，难免会因此感到焦虑与惶恐；故此，有意打造一款优良开放型平台，用来承载信息之入口，并对其进行分门别类、过滤排序，从而为获取、发布信息的双方提供便利 —— 此即为<a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external"><strong>「倾城之链」</strong></a>，其旨在云集全球优秀网站，让您更为便捷地探索互联网中那更广阔的世界；在这里，您可以轻松发现、学习、分享更多<code>有用</code>或<code>有趣</code>的事物。更多关于此项目的动机，详见博客文章：<a href="https://jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/" target="_blank" rel="external">云集优站，尽在「倾城之链」</a>。</p>
<h2 id="作用与价值"><a href="#作用与价值" class="headerlink" title="作用与价值"></a>作用与价值</h2><h3 id="探索更广阔的世界，为您"><a href="#探索更广阔的世界，为您" class="headerlink" title="探索更广阔的世界，为您"></a>探索更广阔的世界，为您</h3><blockquote>
<p>在这个信息化的世界，海量的讯息可能让您不知所措；担心错过她而努力汲取的同时，却可能错过更多；<a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external">「倾城之链」</a>的存在，即是为您解决这种困扰；在这里，您可以浏览全球各类智慧的结晶；丰富视野的同时，可以标注抑或分享您喜欢的站点，从而为更多挖掘讯息的人提供建设性参考。</p>
</blockquote>
<h3 id="分享，为您所欢喜的网站"><a href="#分享，为您所欢喜的网站" class="headerlink" title="分享，为您所欢喜的网站"></a>分享，为您所欢喜的网站</h3><blockquote>
<p><mark>在当今这信息化时代，即便是再小的个体，也当有自己的品牌。</mark>然而，独立的才是自己的。<a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external">「倾城之链」</a>作为一个开放平台，鼓励您创造属于您的个人品牌，烙印着自己的风格，替自己代言、发声；如果您已经这样做了，您可以尽情分享在这里，让更多人知道，且从中受益。当然，您也可以分享出您欢喜的其他有意思站点，让您的见识惠及更多人。</p>
</blockquote>
<h3 id="箴言锦语-佳句共赏"><a href="#箴言锦语-佳句共赏" class="headerlink" title="箴言锦语 佳句共赏"></a>箴言锦语 佳句共赏</h3><blockquote>
<p>情不知所起，一往而深。那些与旁人说来脸红的绰号暱称、轻灵的诗意，和深刻的激动，像筛子一般，将文字抖出松弛微醺的质感，历久弥新。任时世流转，风华变迁，在这美妙的质感前，循迹而去，仍能感观：那些在文字中留鲜的岁月，一段段永不衰老的情缘；隔著时空漫漫，跨越千山万水，蹁跹而来，带给我们不曾褪色的悸动。<strong>箴言锦语，云集世间曼妙句子</strong>；或情感、或唯美、或修身、或励志、或哲学、或娱乐，拳拳真情，精心择选，总有荡漾你心的那一言。</p>
</blockquote>
<h2 id="如何访问「倾城之链」"><a href="#如何访问「倾城之链」" class="headerlink" title="如何访问「倾城之链」"></a>如何访问<a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">「倾城之链」</a></h2><ul>
<li><strong>WEB 浏览器</strong>：为便捷用户访问，有为<a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">「倾城之链」</a>注入 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/pwa-tutorial.md" target="_blank" rel="external">Pwa</a> 部分功能，您可通过现代浏览器访问 <a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">https://nicelinks.site</a> （推荐使用 <code>Chrome</code>），可将其“<strong>添加至主屏幕</strong>”，它将为您创建与原生应用类似的桌面图标，以供您下次可便捷且快速打开。</li>
</ul>
<blockquote>
<p><strong>备注</strong>：当您在移动设备浏览器点击“<strong>添加到主屏幕</strong>”后，如未得到预期结果，需要您主动进行设置；可在设备<code>设置</code>项，找到<code>权限管理</code>，进而开启“<strong>桌面快捷方式</strong>”权限即可；这在不同供应商的手机设备间，步骤会有所差别。</p>
</blockquote>
<ul>
<li><p><strong>快应用</strong>：目前<a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="external">倾城之链(快应用版)</a>已在 <code>OPPO</code>、<code>vivo</code>、<code>小米</code>、<code>魅族</code>等平台上线；如果您使用 <code>Android</code> 手机，可以在<em>应用商店</em>、<em>负一屏</em>、<em>浏览器</em>等场景搜索<code>倾城之链</code>，便可<strong>秒开</strong>使用，亦可保存在桌面；也可以在手机<a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">倾城之链(网页版)</a>，点击<strong>快应用中打开</strong>即可(仅限于已上线平台)；未上线平台机型，可参见<a href="https://github.com/nicejade/nicelinks-quick-app#倾城之链快应用版" target="_blank" rel="external">倾城之链 - 快应用版</a>，下载<a href="https://github.com/nicejade/awesome-quickapp#调试器下载" target="_blank" rel="external">快应用调试器</a>扫码体验。</p>
</li>
<li><p><strong>小程序</strong>：在初步完成 Web、「快应用」等版本蛮久以后，最近（2019.10）有基于 <code>mpvue</code> 构建了<a href="https://github.com/nicejade/nicelinks-miniprogram" target="_blank" rel="external">微信「小程序」版本</a>，通过微信扫码、或者在微信搜索「倾城之链」即可访问。</p>
</li>
</ul>
<div align="center"><br>  <img src="https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg" style="width: 300px;min-width: 300px" alt="倾城之链小程序码"><br></div>

<ul>
<li><strong>桌面应用</strong>：如果您想在 <code>MacOS</code>, <code>Windows</code> 或 <code>Linux</code> 中，获得更快捷的访问体验，您可以通过 <a href="https://github.com/jiahaog/nativefier" target="_blank" rel="external">Nativefier</a>（使任何网页成为桌面应用程序的一个命令行工具），轻松创建桌面版<a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">「倾城之链」</a>应用，只需运行以下命令即可：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install nativefier -g</div><div class="line">nativefier --name <span class="string">"倾城之链"</span> <span class="string">"https://nicelinks.site/"</span></div></pre></td></tr></table></figure>
<p><strong>备注</strong>：如果您使用最新版本的 Chrome，用其访问 <a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">https://nicelinks.site</a> ，在地址栏的末尾，点击 <code>⊕</code> 符号，即可快速生成桌面版本「倾城之链」；而且，这这个独立应用中，浏览器插件扩展都在；除此外，浏览器上涉及的<a href="https://nicelinks.site?utm_source=github.com" target="_blank" rel="external">倾城之链</a>的外链，也可以右键选择在这个桌面应用中打开，NICE。</p>
<h2 id="加入倾城之链群聊"><a href="#加入倾城之链群聊" class="headerlink" title="加入倾城之链群聊"></a><strong>加入<a href="https://nicelinks.site/?utm_source=nice.lovejade.cn" target="_blank" rel="external">倾城之链</a>群聊</strong></h2><p>经过近两年的设计，<a href="https://nicelinks.site/?utm_source=nice.lovejade.cn" target="_blank" rel="external">倾城之链</a>目前已趋于稳定；后面将持续迭代，使其拥有更丰富的功能、以及更棒的体验。现创建<a href="https://nicelinks.site/?utm_source=nice.lovejade.cn" target="_blank" rel="external">倾城之链</a>微信、QQ 群（<code>984154031</code>），将会不定期分享最新收录的优质网站；如果您感兴趣，不妨考虑加入；另外，您对<code>倾城之链</code>有任何意见或建议，也可以通过该群向我反馈。</p>
<p><img src="https://image.nicelinks.site/nicelinks-qq-qrcode.jpeg" alt="倾城之链 QQ 群"></p>
<p><img src="https://image.nicelinks.site/nicelinks-wechat-qrcode.jpeg" alt="倾城之链微信群"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://nicelinks.site?from=jeffjade.com" target="_blank" rel="external"><strong>倾城之链</strong></a></li>
<li><a href="https://about.me/nicejade?from=github" target="_blank" rel="external">About Me</a></li>
<li><a href="https://jeffjade.com/nicelinks?from=github" target="_blank" rel="external">个人博客</a></li>
<li><a href="https://nice.lovejade.cn/?from=github" target="_blank" rel="external">静晴轩别苑</a></li>
<li><a href="https://docz.lovejade.cn/?from=github" target="_blank" rel="external">吾意静晴轩</a></li>
<li><a href="https://blog.lovejade.cn/?from=github" target="_blank" rel="external">天意人间舫</a></li>
<li><a href="https://weibo.com/jeffjade?from=github" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">知乎主页</a></li>
<li><a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">简书主页</a></li>
<li><a href="https://segmentfault.com/u/jeffjade" target="_blank" rel="external">SegmentFault</a></li>
<li><a href="https://twitter.com/nicejadeyang" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://www.facebook.com/yang.gang.jade" target="_blank" rel="external">Facebook</a></li>
</ul>
<table>
<thead>
<tr>
<th>微信公众号</th>
<th>前端微信群</th>
<th>推荐 Web 应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>😉 静晴轩</td>
<td>✨ 大前端联盟</td>
<td>🎉 倾城之链</td>
</tr>
<tr>
<td><img src="https://image.nicelinks.site/qrcode_jqx.jpg" alt="静晴轩"></td>
<td><img src="https://image.nicelinks.site/wqycx-weixin.png?ver=1" alt="倾城之链"></td>
<td><img src="https://image.nicelinks.site/nice-links.png" width="300px" alt="倾城之链"></td>
</tr>
</tbody>
</table>
<p>@2018-12-23 于深圳.福田 Last Modify： 2019-03-18</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://www.jeffjade.com/2017/12/31/136-talk-about-nicelinks-site/#">云集优站，尽在「倾城之链」</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚
</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      倾城之链，基于 Vue2 (Webpack4, Es6, Element-Ui...) Node（Koa2）、MongoDB、Nginx、Redis、Pm2、Prerender 等工具/技术，所构建的 Web 应用程序，旨在云集全球优秀网站，方便你我探索互联网中更广阔的世界。
    
    </summary>
    
      <category term="倾城之链" scheme="https://www.jeffjade.com/categories/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE/"/>
    
    
      <category term="Thought" scheme="https://www.jeffjade.com/tags/Thought/"/>
    
      <category term="Tools" scheme="https://www.jeffjade.com/tags/Tools/"/>
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Nice" scheme="https://www.jeffjade.com/tags/Nice/"/>
    
  </entry>
  
  <entry>
    <title>快应用开发资源、教程汇聚</title>
    <link href="https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/"/>
    <id>https://www.jeffjade.com/2018/12/21/146-awesome-quickapp-resource-tutorial/</id>
    <published>2018-12-20T16:10:00.000Z</published>
    <updated>2019-04-03T16:08:27.781Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a></strong>是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的<code>快应用联盟</code>联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>具备传统 APP 完整的应用体验，<strong>无需安装、即点即用</strong>；<strong>覆盖 10 亿设备</strong>，<strong>与操作系统深度集成，探索新型应用场景</strong>。快应用 ──<strong>复杂生活的简单答案，让生活更顺畅</strong> ── 来自 <a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用官方网站 | 倾城之链</a>。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/cool-background-red.png" alt="快应用开发资源、教程汇聚"></p>
<blockquote>
<p>此篇在于云集最新<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>相关教程文章、开发资源、项目案例及新闻动态；为快应用开发者提供便利和参考；目前有在 <a href="https://github.com/nicejade/awesome-quickapp" target="_blank" rel="external">awesome-quickapp</a> 持续性维护、更新。</p>
</blockquote>
<hr>
<ul>
<li><a href="#基础教程篇">基础教程篇</a><ul>
<li><a href="#快应用文档">快应用文档</a></li>
<li><a href="#快应用教程">快应用教程</a></li>
<li><a href="https://quickapp.lovejade.cn/tag/quickapp/?utm_source=github.com" target="_blank" rel="external">快应用博客</a></li>
<li><a href="#快应用常见问题">快应用常见问题</a></li>
</ul>
</li>
<li><a href="#快应用生态篇">快应用生态篇</a><ul>
<li><a href="#脚手架">脚手架</a></li>
<li><a href="#NPM插件篇">NPM插件篇</a></li>
<li><a href="#UI组件库">UI组件库</a></li>
<li><a href="#示例篇">示例篇</a></li>
<li><a href="#工具篇">工具篇</a></li>
</ul>
</li>
<li><a href="#资源引擎篇">资源引擎篇</a><ul>
<li><a href="#调试器下载">调试器下载</a></li>
<li><a href="#快应用预览版">快应用预览版</a></li>
</ul>
</li>
<li><a href="#应用分发">快应用分发</a></li>
<li><a href="#快应用新闻">快应用新闻</a><ul>
<li><a href="#版本新闻">版本新闻</a></li>
<li><a href="#其他新闻">其他新闻</a></li>
</ul>
</li>
<li><a href="#快应用审核规范">快应用审核规范</a></li>
</ul>
<hr>
<h3 id="基础教程篇"><a href="#基础教程篇" class="headerlink" title="基础教程篇"></a>基础教程篇</h3><h4 id="快应用文档"><a href="#快应用文档" class="headerlink" title="快应用文档"></a>快应用文档</h4><ul>
<li><a href="https://www.quickapp.cn/?utm_source=jeffjade.com" target="_blank" rel="external">快应用官方网站</a></li>
<li><a href="https://bbs.quickapp.cn/?utm_source=jeffjade.com" target="_blank" rel="external">快应用开发论坛</a></li>
<li><a href="https://doc.quickapp.cn/?utm_source=jeffjade.com" target="_blank" rel="external">快应用开发文档</a><ul>
<li><a href="https://doc.quickapp.cn/framework/?utm_source=jeffjade.com" target="_blank" rel="external">开发文档 | 框架</a></li>
<li><a href="https://doc.quickapp.cn/widgets/common-events.html?utm_source=jeffjade.com" target="_blank" rel="external">开发文档 | 组件</a></li>
<li><a href="https://doc.quickapp.cn/features/?utm_source=jeffjade.com" target="_blank" rel="external">开发文档 | 接口</a></li>
<li><a href="https://doc.quickapp.cn/?utm_source=jeffjade.com" target="_blank" rel="external">开发文档 | 教程</a></li>
</ul>
</li>
</ul>
<h4 id="快应用教程"><a href="#快应用教程" class="headerlink" title="快应用教程"></a>快应用教程</h4><ul>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">「快应用」开发体验纪要</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/quickapp-boilerplate-template.html" target="_blank" rel="external">快应用脚手架，为优雅而生</a></li>
<li><a href="https://quickapp.lovejade.cn/prettier-quickapp-plugin/" target="_blank" rel="external">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://quickapp.lovejade.cn/how-to-elegantly-handle-quickapp-request/" target="_blank" rel="external">如何优雅处理「快应用」数据请求</a></li>
<li><a href="https://juejin.im/post/5ab27d8e518825557e78485e" target="_blank" rel="external">快应用快速入门教程</a></li>
<li><a href="https://juejin.im/post/5ab26a1e6fb9a028b547c675" target="_blank" rel="external">对标小程序 ? “ 快应用 “ 开发入门指南</a></li>
</ul>
<h4 id="快应用常见问题"><a href="#快应用常见问题" class="headerlink" title="快应用常见问题"></a>快应用常见问题</h4><ul>
<li><a href="https://github.com/quickappcn/issues" target="_blank" rel="external">快应用开发问题反馈和需求征集</a></li>
<li><a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">快应用开发常见问题及解决方案</a></li>
<li><a href="https://quickapp.lovejade.cn/quickapp-phone_model-device-scene-coverage/?utm_source=github" target="_blank" rel="external">快应用的机型覆盖、场景覆盖、框架版本</a></li>
<li><a href="https://bbs.quickapp.cn/forum.php?mod=viewthread&amp;tid=838" target="_blank" rel="external">快应用常见问题和技术帖子汇总</a></li>
<li><a href="https://www.quickapp.cn/docCenter/post/71" target="_blank" rel="external">快应用账号注册流程</a></li>
</ul>
<h3 id="快应用生态篇"><a href="#快应用生态篇" class="headerlink" title="快应用生态篇"></a>快应用生态篇</h3><ul>
<li><a href="http://www.qinglizi.cn/" target="_blank" rel="external">快统计 - 轻粒子</a>: <sub>专注于快应用数据统计分析；数据监控；渠道识别；人群分析；事件/转化漏斗；</sub></li>
<li><a href="https://developer.umeng.com/docs/84810/detail/84811" target="_blank" rel="external">友盟快应用统计 SDK 集成文档</a>: <sub>接入友盟快应用统计 SDK，可以在U-App官网中查看应用新增用户、活跃用户、启动次数、使用时长等基本数据。</sub></li>
<li><a href="https://bbs.quickapp.cn/forum.php?mod=viewthread&amp;tid=552&amp;fromuid=139" target="_blank" rel="external">快应用入口合集</a>：<sub>各大厂商快应用入口汇总说明</sub></li>
<li><a href="https://www.jianshu.com/c/967284997de2" target="_blank" rel="external">快应用简书专题</a>：<sub>汇聚收录简书快应用相关优质文章。</sub></li>
<li><a href="https://toutiao.io/subjects/374789" target="_blank" rel="external">快应用精选 | 开发者头条</a>： <sub>收录优质文章在开发者头条分享。</sub></li>
</ul>
<h4 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h4><ul>
<li><a href="https://github.com/nicejade/quickapp-boilerplate-template" target="_blank" rel="external">quickapp-boilerplate-template</a>: <sub>🔨致力于构建更为优雅的快应用开发脚手架模板。</sub></li>
</ul>
<h4 id="NPM插件篇"><a href="#NPM插件篇" class="headerlink" title="NPM插件篇"></a>NPM插件篇</h4><ul>
<li><a href="https://github.com/prettier/prettier" target="_blank" rel="external">prettier</a>: <sub>Prettier is an opinionated code formatter. <a href="https://prettier.io/" target="_blank" rel="external">https://prettier.io/</a></sub></li>
<li><a href="https://github.com/nicejade/prettier-plugin-quickapp" target="_blank" rel="external">prettier-plugin-quickapp</a>: <sub>Prettier Quickapp Plugin .</sub></li>
</ul>
<h4 id="UI组件库"><a href="#UI组件库" class="headerlink" title="UI组件库"></a>UI组件库</h4><ul>
<li><a href="https://github.com/JDsecretFE/quist-ui" target="_blank" rel="external">Quist-UI | 快应用 UI组件库</a>: <sub>快应用UI组件库，简洁，易用，高效</sub></li>
</ul>
<h3 id="示例篇"><a href="#示例篇" class="headerlink" title="示例篇"></a>示例篇</h3><ul>
<li><a href="https://github.com/TheHumanComedy/appreciate-poetry-quickapp" target="_blank" rel="external">appreciate-poetry-quickapp</a>: <sub>🌊一款精致用于欣赏古诗文的快应用。</sub></li>
<li><a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="external">nicelinks-quick-app</a>: <sub>🌪Awesome NICE LINKS（倾城之链 ) client built with quickapp. <a href="https://nicelinks.site/" target="_blank" rel="external">https://nicelinks.site/</a> </sub></li>
<li><a href="https://github.com/lishuaixingNewBee/babySongQuickapp" target="_blank" rel="external">babySongQuickapp</a>: <sub>熊宝儿歌故事集音乐、视频、育儿信息流的快应用。</sub></li>
<li><a href="https://github.com/quickappcn/sample" target="_blank" rel="external">quickappcn/sample</a>: <sub>一个演示使用 quickapp 的项目，包括组件演示和 apis。 </sub></li>
<li><a href="https://github.com/wotermelon/v2ex-quickapp" target="_blank" rel="external">v2ex-quickapp</a>: <sub>V2ex - 快应用</sub></li>
</ul>
<h4 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h4><ul>
<li><a href="https://bbs.quickapp.cn/forum.php?mod=viewthread&amp;tid=1052" target="_blank" rel="external">快应用开发工具使用说明文档</a>: <sub>快应用【官方IDE】使用说明文档</sub></li>
<li><a href="https://github.com/Youjingyu/vue-hap-tools" target="_blank" rel="external">vue-hap-tools</a>: <sub>一个抹平 vue.js 与快应用差异性的工具，现已支持vue.js的大部分常用特性、vue-router、vuex。</sub></li>
<li><a href="https://rubylouvre.github.io/nanachi/documents/install.html" target="_blank" rel="external">娜娜奇 | 基于 React 的多端小程序转译框架</a>: <sub>是一处编写多处运行的小程序、快应用的转译框架。</sub></li>
<li><a href="https://github.com/didi/chameleon" target="_blank" rel="external">Chameleon | 变色龙</a>: <sub>真正专注于让一套代码运行多端的开发框架，提供标准的MVVM架构开发模式统一各类终端 <a href="https://CMLJS.org" target="_blank" rel="external">https://CMLJS.org</a></sub></li>
</ul>
<h3 id="资源引擎篇"><a href="#资源引擎篇" class="headerlink" title="资源引擎篇"></a>资源引擎篇</h3><h4 id="调试器下载"><a href="#调试器下载" class="headerlink" title="调试器下载"></a>调试器下载</h4><ul>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_debugger.apk?raw=true" target="_blank" rel="external">快应用调试器</a></li>
</ul>
<p><code>快应用调试器</code>可以连接到手机系统内的快应用执行环境，可以让您方便调试<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">「快应用」</a>程序。</p>
<h4 id="快应用预览版"><a href="#快应用预览版" class="headerlink" title="快应用预览版"></a>快应用预览版</h4><p>当您的手机系统尚未内置快应用运行平台，或您想在开发过程中体验快应用尚未正式发布的新功能、新特性，您可以安装 快应用预览版。这是一个包含了快应用基础功能的 <code>Android</code> 应用程序。下载安装成功后，通过快应用调试器可以选择在快应用预览版运行 rpk 包，开发测试对应平台的 <code>api</code> 和功能。</p>
<ul>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_platform_preview_release_v1040.apk?raw=true" target="_blank" rel="external">快应用预览版 v1040</a></li>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_platform_preview_release_v1030.apk?raw=true" target="_blank" rel="external">快应用预览版 v1030</a></li>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_platform_preview_release_v1020.apk?raw=true" target="_blank" rel="external">快应用预览版 v1020</a></li>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_platform_preview_release_v1010.apk?raw=true" target="_blank" rel="external">快应用预览版 v1010</a></li>
<li><a href="https://github.com/nicejade/awesome-quickapp/blob/master/resources/quickapp_platform_preview_release_v1000.apk?raw=true" target="_blank" rel="external">快应用预览版 v1000</a></li>
</ul>
<blockquote>
<p><strong>注意</strong>：如果您之前已经安装过较高版本的快应用预览版，则安装低版本时，需要先卸载之前的预览版。</p>
</blockquote>
<h3 id="应用分发"><a href="#应用分发" class="headerlink" title="应用分发"></a>应用分发</h3><ul>
<li><a href="https://developer.huawei.com/consumer/cn/service/hms/fastapp.html" target="_blank" rel="external">华为 快应用分发</a></li>
<li><a href="https://dev.vivo.com.cn/distribute/quickApp" target="_blank" rel="external">vivo 快应用分发</a></li>
<li><a href="https://open.oppomobile.com/service/distribute#id=4" target="_blank" rel="external">OPPO 快应用分发</a></li>
<li><a href="https://dev.mi.com/console/app/newapp.html" target="_blank" rel="external">小米 快应用分发</a></li>
<li><a href="https://open.flyme.cn/" target="_blank" rel="external">魅族开放平台</a></li>
<li><a href="http://open.lenovo.com/developer/adp/helpData/database_detail.jsp?url=http://open.lenovo.com/sdk/?p=796" target="_blank" rel="external">联想快应用发布</a></li>
</ul>
<h3 id="快应用新闻"><a href="#快应用新闻" class="headerlink" title="快应用新闻"></a>快应用新闻</h3><h4 id="版本新闻"><a href="#版本新闻" class="headerlink" title="版本新闻"></a>版本新闻</h4><ul>
<li><a href="https://doc.quickapp.cn/changelog/1040.html" target="_blank" rel="external">快应用 v1040 上线</a>： <sub>2019-02-22</sub></li>
<li><a href="https://doc.quickapp.cn/changelog/1030.html" target="_blank" rel="external">快应用 v1030 上线</a>： <sub>2018-11-28</sub></li>
</ul>
<h4 id="其他新闻"><a href="#其他新闻" class="headerlink" title="其他新闻"></a>其他新闻</h4><ul>
<li><a href="http://pic-test.kss.ksyun.com/quickapp_statistics/pdf/2018年快应用行业报告-preview.pdf" target="_blank" rel="external">2018 年快应用行业报告</a></li>
</ul>
<h3 id="快应用审核规范"><a href="#快应用审核规范" class="headerlink" title="快应用审核规范"></a>快应用审核规范</h3><ul>
<li><a href="https://developer.huawei.com/consumer/cn/service/hms/catalog/fastapp.html?page=fastapp_fastapp_toapprove_rule" target="_blank" rel="external">华为 | 快应用审核规范</a></li>
<li><a href="https://dev.vivo.com.cn/documentCenter/doc/120" target="_blank" rel="external">vivo | 快应用审核规范</a></li>
<li><a href="https://open.oppomobile.com/service/distribute#id=4" target="_blank" rel="external">OPPO | 快应用审核规范</a></li>
<li><a href="https://bbs.quickapp.cn/forum.php?mod=viewthread&amp;tid=428" target="_blank" rel="external">小米 | 快应用审核规范</a></li>
<li><a href="https://miniapp.meizu.com/resources/document/complaint.html" target="_blank" rel="external">魅族 | 快应用审核规范</a></li>
<li><a href="http://open.lenovo.com/sdk/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83-2/" target="_blank" rel="external">联想 | 快应用审核规范</a></li>
</ul>
<p>@2018-12-23 于深圳.福田 Last Modify：2019-04-03</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">快应用开发常见问题及解决方案</a></li>
<li><a href="https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request">如何优雅处理「快应用」数据请求</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/150-prettier-quickapp-plugin">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚</a></li>
<li><a href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/">TOP 100 大前端超棒精选列表</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      快应用开发资源、教程汇聚，云集最新的快应用教程文章、开发资源、项目案例及新闻动态；为快应用开发者提供便利和参考。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android" scheme="https://www.jeffjade.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>快应用脚手架，为优雅而生</title>
    <link href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/"/>
    <id>https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/</id>
    <published>2018-11-10T16:00:00.000Z</published>
    <updated>2019-09-03T15:07:30.335Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的<code>快应用联盟</code>联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>具备传统 APP 完整的应用体验，<strong>无需安装、即点即用</strong>；<strong>覆盖 10 亿设备</strong>，<strong>与操作系统深度集成，探索新型应用场景</strong>。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a> ── <strong>复杂生活的简单答案，让生活更顺畅</strong>。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/jpg/nice-links-007.jpg" alt="快应用脚手架模板"></p>
<h2 id="目标与哲学"><a href="#目标与哲学" class="headerlink" title="目标与哲学"></a>目标与哲学</h2><p><a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>是一种新型的应用形态，由国内九大手机厂商基于硬件平台共同推出；秒开即点即用，更易于应用的传播和留存，可以为用户提供更高效的服务。在可预见的未来，其将有不错的应用场景和发展空间。此 <a href="https://github.com/nicejade/quickapp-boilerplate-template" target="_blank" rel="external">quickapp-boilerplate-template</a> 仓库的建立，旨在探索如何更为优雅的开发<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>，为广大<code>快应用开发者</code>提供便利和参考，尽可能提升开发效率、优化开发体验，使得可以在更短时间内，塑造出更为优质的<code>快应用</code>。关于<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>开发更详细资料，可参见<a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/quickapp-tutorial.md" target="_blank" rel="external">快应用教程资源列表</a>。</p>
<h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── sign                <span class="comment"># 存储 rpk 包签名模块;</span></div><div class="line">│   ├── <span class="built_in">debug</span>           <span class="comment"># 调试环境证书/私钥文件</span></div><div class="line">│   └── release         <span class="comment"># 正式环境证书/私钥文件</span></div><div class="line">└── src</div><div class="line">│   ├── assets          <span class="comment"># 公用的资源(images/styles/字体...)</span></div><div class="line">│   │   ├──images       <span class="comment"># 存储 png/jpg/svg 等公共图片资源</span></div><div class="line">│   │   ├──<span class="keyword">js </span>          <span class="comment"># 存储公共 javaScript 代码资源</span></div><div class="line">│   │   └──styles       <span class="comment"># 存放 less/css/sass 等公共样式资源</span></div><div class="line">│   ├── helper          <span class="comment"># 项目自定义辅助各类工具</span></div><div class="line">│   │   ├──apis         <span class="comment"># 存储与后台请求接口相关(已封装好)</span></div><div class="line">│   │   ├──ajax.<span class="keyword">js </span>     <span class="comment"># 对系统提供的 fetch api 进行链式封装</span></div><div class="line">│   │   └──utils        <span class="comment"># 存放项目所封装的工具类方法</span></div><div class="line">│   ├── pages           <span class="comment"># 统一存放项目页面级代码</span></div><div class="line">│   ├── app.ux          <span class="comment"># 应用程序代码的人口文件</span></div><div class="line">│   └── manifest.<span class="keyword">json </span>  <span class="comment"># 配置快应用基本信息</span></div><div class="line">└── package.<span class="keyword">json </span>       <span class="comment"># 定义项目需要的各种模块及配置信息</span></div></pre></td></tr></table></figure>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/nicejade/quickapp-boilerplate-template.git</div><div class="line"><span class="built_in">cd</span> quickapp-boilerplate-template &amp;&amp; yarn</div><div class="line">yarn start <span class="comment"># 推荐 ✅✅</span></div><div class="line"></div><div class="line"><span class="comment"># 或者运行以下命令</span></div><div class="line">yarn server &amp; yarn watch</div><div class="line"></div><div class="line"><span class="comment"># 或者在终端一 Tab 下运行：</span></div><div class="line">yarn server</div><div class="line"><span class="comment"># 在终端另一 Tab 下运行：</span></div><div class="line">yarn watch</div><div class="line"></div><div class="line"><span class="comment"># ✨ 新增「快应用」页面</span></div><div class="line">yarn gen YourPageName</div></pre></td></tr></table></figure>
<p>用一台 <code>Android</code> 手机，下载安装<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="external">「快应用」调试器</a>，打开后操作<code>扫码安装</code>，扫描如上命令生成的二维码，即可看到效果；更多讯息，请参见<a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html#环境搭建" target="_blank" rel="external">快应用环境搭建</a>。</p>
<h2 id="改进优势"><a href="#改进优势" class="headerlink" title="改进优势"></a>改进优势</h2><p>有必要谈及的是，此项目秉承在<a href="https://nice.lovejade.cn/zh/article/vue-webpack-boilerplate-template.html" target="_blank" rel="external">高效开发 Web 单页应用解决方案</a>中所传递的理念：为<strong>高效开发</strong>而设计；相比于其内置简陋而凌乱的 Demo，这份脚手架做了以下诸多改进：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>对项目结构进行优化</strong>；如上组织结构所示，将各资源模块，更专业的分门别类，使之可以便捷的去编写、维护、查找，同时也是基于前端开发既定共识去设计，更容易为初接触者所理解 &amp; 上手；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>更优雅的处理数据请求</strong>；采用 <code>Promise</code> 对系统内置请求 <a href="mailto:`@system.fetch" target="_blank" rel="external">`@system.fetch</a>` 进行封装，并抛出至全局，使得可以极简的进行链式调用，同时便捷地处理返回数据；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>内置了样式处理方案</strong>；「快应用」支持 <code>less</code>, <code>sass</code> 的预编译；这里采取 <code>less</code> 方案，并内置了部分变量，以及常用混合方法，使得可以轻松开启样式编写、复用、修改等；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>封装了常用方法</strong>；在 <code>helper/utils</code> 路径下，有对日期、字符串、系统等常用方法，分别进行封装，统一暴露给 <code>global.$utils</code>，使得维护方式更加合理且健壮，同时又可以便捷的使用，高效开发；当然，你也可以根据需要自行增删、抑或扩展；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>简化开始开发流程</strong>； 注入 <a href="https://github.com/kimmobrunfeldt/concurrently" target="_blank" rel="external">Concurrently</a> 插件，使可以运行 <code>yarn start</code> 即可开始开发，而无需更多命令，从而简洁开发流程；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>优化本地开发端口设定</strong>；「快应用」默认端口为 <code>12306</code>，虽说可自定义端口，但使用体验却不够友好；此处参考 <code>creat-react-app</code> 设定，对本地开发地址端口使用进行优化：如果 🈯️ 定端口(默认: <code>8080</code>)被占用，则向上递增寻找新的可用端口(如：8081 / 8082 / … )；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>浏览器打开调试主页二维码</strong>；运行 <code>yarn start</code>，会启动 HTTP 调试服务器，并将该地址在<strong>命令行终端</strong>显示，手机端用快应用调试器扫码，即可下载并运行 rpk 包；当终端积累的信息流多了，就造成扫码不便；故增设在浏览器打开调试主页二维码；如想不使用此功能，在 <em>command/server.js</em> 文件中，将 <strong>autoOpenBrowser</strong> 设置为 <code>false</code> 即可；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>集成轻粒子统计分析</strong>； <a href="https://nicelinks.site/post/5bdfa8ba9fa22b1b40974f63" target="_blank" rel="external">轻粒子</a>作为官方推荐统计方案，此脚手架已做接入；使用时只需修改 <a href="https://github.com/nicejade/quickapp-boilerplate-template/blob/master/src/assets/js/statistics.config.js" target="_blank" rel="external">statistics.config.js</a> 中的 <code>app_key</code>，为在<a href="http://www.qinglizi.cn/" target="_blank" rel="external">轻粒子</a>所申请的快应用 KEY 即可；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>新增快捷命令脚本</strong>；使得可以一键生成新页面，只需运行：<code>yarn gen YourPageName</code> （命名推荐统一为大驼峰，将会在 <code>pages</code> 路径下新建该页面文件夹）命令即可，当然，也可以根据需要，自行定定制模板：<em>/command/gen/template.ux</em>；</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>集成 <a href="https://prettier.io/" target="_blank" rel="external">Prettier</a> &amp; <a href="https://eslint.org/" target="_blank" rel="external">Eslint</a></strong>；在检测代码中潜在问题的同时，统一团队代码规范、风格（<code>js</code>，<code>less</code>，<code>scss</code>等），从而促使写出高质量代码，以提升工作效率(尤其针对团队开发)。</li>
<li style="list-style: none"><input type="checkbox" checked="checked"> <strong>编写 <a href="https://github.com/nicejade/prettier-plugin-quickapp" target="_blank" rel="external">prettier-plugin-quickapp</a> 插件</strong>；为快应用编写 <code>prettier</code> 插件，使其可以针对 <code>.ux</code>/<code>.mix</code> 文件也能很好地工作，从而进一步完善代码风格及规范。</li>
<li>… …</li>
</ul>
<h2 id="快应用脚手架内置命令"><a href="#快应用脚手架内置命令" class="headerlink" title="快应用脚手架内置命令"></a>快应用脚手架内置命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>yarn start</code></td>
<td>开启服务(server)和监听(watch)</td>
<td>附魔<a href="https://nice.lovejade.cn/zh/article/quickapp-boilerplate-template.html#%E6%94%B9%E8%BF%9B%E4%BC%98%E5%8A%BF" target="_blank" rel="external">多步优化</a>，一键开启开发，强烈推荐 ✔️</td>
</tr>
<tr>
<td><code>yarn server</code></td>
<td>开启服务(server)</td>
<td>如不嫌麻烦，可使用，不推荐</td>
</tr>
<tr>
<td><code>yarn watch</code></td>
<td>开启监听(watch)</td>
<td>如不嫌麻烦，可使用，不推荐</td>
</tr>
<tr>
<td><code>yarn build</code></td>
<td>编译打包，生成 <code>rpk</code>包</td>
<td>对内置 <code>hap build</code> 命令的转接</td>
</tr>
<tr>
<td><code>yarn release</code></td>
<td>生成 <code>rpk</code>包并增加签名</td>
<td>对内置 <code>hap release</code> 命令的转接</td>
</tr>
<tr>
<td><code>yarn gen</code></td>
<td>新增「快应用」页面</td>
<td>助你高效生成页面，模版可自定义，推荐 ✓</td>
</tr>
<tr>
<td><code>yarn prettier</code></td>
<td>一键美化代码(js/css/less/ux)</td>
<td>实在是团队开发好帮手，推荐 ✓</td>
</tr>
<tr>
<td><code>yarn prettier-watch</code></td>
<td>对变化代码文件格式、实时美化</td>
<td>极大提升代码编写效率，强烈推荐 ✔️</td>
</tr>
</tbody>
</table>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://nicelinks.site?from=github" target="_blank" rel="external"><strong>倾城之链</strong></a></li>
<li><a href="https://about.me/nicejade" target="_blank" rel="external">About Me</a></li>
<li><a href="https://jeffjade.com/nicelinks" target="_blank" rel="external">个人博客</a></li>
<li><a href="https://blog.lovejade.cn/" target="_blank" rel="external">辅助博客</a></li>
<li><a href="https://weibo.com/jeffjade" target="_blank" rel="external">新浪微博</a></li>
<li><a href="https://www.zhihu.com/people/yang-qiong-pu/" target="_blank" rel="external">知乎主页</a></li>
<li><a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">简书主页</a></li>
<li><a href="https://segmentfault.com/u/jeffjade" target="_blank" rel="external">SegmentFault</a></li>
<li><a href="https://twitter.com/jeffjade2" target="_blank" rel="external">Twitter</a></li>
<li><a href="https://www.facebook.com/yang.gang.jade" target="_blank" rel="external">Facebook</a></li>
</ul>
<table>
<thead>
<tr>
<th>微信公众号</th>
<th>前端微信群</th>
<th>推荐 Web 应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>😉 静晴轩</td>
<td>✨ 大前端联盟</td>
<td>🎉 倾城之链</td>
</tr>
<tr>
<td><img src="https://image.nicelinks.site/qrcode_jqx.jpg" alt="静晴轩"></td>
<td><img src="https://image.nicelinks.site/wqycx-weixin.png?ver=1" alt="倾城之链"></td>
<td><img src="https://image.nicelinks.site/nice-links.png" width="300px" alt="倾城之链"></td>
</tr>
</tbody>
</table>
<blockquote>
<p>原文出处：<a href="https://nice.lovejade.cn/" target="_blank" rel="external">静晴轩别苑</a><br>原文首发：<a href="https://nice.lovejade.cn/zh/article/quickapp-boilerplate-template.html" target="_blank" rel="external">快应用脚手架，为优雅而生</a></p>
</blockquote>
<p>@2018-11-11 于深圳.福田 Last Modify：2018-11-11</p>
<hr>
<h3 id="您可能会感兴趣的文章"><a href="#您可能会感兴趣的文章" class="headerlink" title="您可能会感兴趣的文章"></a>您可能会感兴趣的文章</h3><ul>
<li><a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">快应用开发常见问题及解决方案</a></li>
<li><a href="https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request">如何优雅处理「快应用」数据请求</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/150-prettier-quickapp-plugin">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">快应用之开发体验纪要</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      快应用脚手架模板，旨在探索如何更为优雅的开发快应用，为广大快应用开发者提供便利和参考，尽可能提升开发效率、优化开发体验，使得可以在更短时间内，塑造出更为优质的快应用。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android" scheme="https://www.jeffjade.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>TOP 100 大前端超棒精选列表</title>
    <link href="https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/"/>
    <id>https://www.jeffjade.com/2018/10/13/144-top-100-front-end-awesome-awesome-list/</id>
    <published>2018-10-13T10:18:00.000Z</published>
    <updated>2018-12-20T16:08:09.848Z</updated>
    
    <content type="html"><![CDATA[<p>正值如今这信息爆炸的年代，如何能从中汲取精华，于有限时间内，成为更高效的学习者，从而在激烈的竞争中更具优势，是当下每个人或企业都该思虑的问题；先前创立的 <code>Web</code> 应用：<a href="https://nicelinks.site/?from=awesome-list" target="_blank" rel="external">「倾城之链」</a>，就是为改善这一困扰的探索尝试，具体可参见<a href="https://nice.lovejade.cn/zh/application/" target="_blank" rel="external">关于 | 「倾城之链」</a>。这份为<strong>前端开发者</strong>而精心维护的超棒列表，就是为解决<strong>信息过剩</strong>问题的具体实践：旨在为<code>前端学习</code>，<code>技能提升</code>，<code>视野扩展</code>，<code>资料查找</code>等提供价值性参考。目前选择性收录优质仓库近百个，涉及 Web 前端、后台、流行技术以及其他魔力清单。</p>
<a id="more"></a>
<blockquote>
<p>此份列表，目前维护在 <code>Github</code> 仓库：<a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/awesome-list.md" target="_blank" rel="external">Awesome List 👏 | 与时俱进版前端资源教程</a>，将会持续更新，尽可能使之全而不杂，以避免信息过重而无用，这或将成为你从事现代 <code>Web</code> 开发之路的重要参考，你值得拥有，实可典藏。</p>
</blockquote>
<h2 id="🐉-Awesome-Future-Technology-List"><a href="#🐉-Awesome-Future-Technology-List" class="headerlink" title="🐉 Awesome Future Technology List"></a>🐉 Awesome Future Technology List</h2><ul>
<li><a href="https://github.com/GetStoryline/awesome-bots" target="_blank" rel="external">Awesome-Bots</a>: <sub>The most awesome list about bots ⭐️🤖</sub></li>
<li><a href="https://github.com/ChristosChristofidis/awesome-deep-learning" target="_blank" rel="external">Awesome-Deep-Learning</a>: <sub>A curated list of awesome Deep Learning tutorials, projects and communities.</sub></li>
<li><a href="https://github.com/terryum/awesome-deep-learning-papers" target="_blank" rel="external">Awesome-Deep-Learning-Papers</a>: <sub>The most cited deep learning papers.</sub></li>
<li><a href="https://github.com/endymecy/awesome-deeplearning-resources" target="_blank" rel="external">Awesome-Deeplearning-Resources</a>: <sub>Deep Learning and deep reinforcement learning research papers and some codes</sub></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">Awesome-Machine-Learning</a>: <sub>A curated list of awesome Machine Learning frameworks, libraries and software.</sub></li>
<li><a href="https://github.com/jobbole/awesome-machine-learning-cn" target="_blank" rel="external">Awesome-Machine-Learning-Cn</a>: <sub>机器学习资源大全中文版，包括机器学习领域的框架、<br>库以及软件</sub></li>
<li><a href="https://github.com/src-d/awesome-machine-learning-on-source-code" target="_blank" rel="external">Awesome-Machine-Learning-On-Source-Code</a>: <sub>Cool links &amp; research papers related to Machine Learning applied to source code (MLonCode)</sub></li>
<li><a href="https://github.com/keon/awesome-nlp" target="_blank" rel="external">Awesome-Nlp</a>: <sub>📖 A curated list of resources dedicated to Natural Language Processing (NLP)</sub></li>
<li><a href="https://github.com/NirantK/awesome-project-ideas" target="_blank" rel="external">Awesome-Project-Ideas</a>: <sub>Curated list of Machine Learning, NLP, Vision, Recommender Systems Project Ideas</sub></li>
</ul>
<h2 id="🎨-Awesome-Front-End-List"><a href="#🎨-Awesome-Front-End-List" class="headerlink" title="🎨 Awesome Front-End List"></a>🎨 Awesome Front-End List</h2><h3 id="🗝-Foundation"><a href="#🗝-Foundation" class="headerlink" title="🗝 Foundation"></a>🗝 Foundation</h3><ul>
<li><a href="https://github.com/raphamorim/awesome-canvas" target="_blank" rel="external">Awesome-Canvas</a>: <sub>A curated list of awesome HTML5 Canvas with examples, related articles and posts.</sub></li>
<li><a href="https://github.com/awesome-css-group/awesome-css" target="_blank" rel="external">Awesome-Css</a>: <sub>🎨 A curated contents of amazing CSS Ever.</sub></li>
<li><a href="https://github.com/diegocard/awesome-html5" target="_blank" rel="external">Awesome-HTML5</a>: <sub>📝 A curated list of awesome HTML5 resources. Inspired by awesome-php and awesome-python.</sub></li>
<li><a href="https://github.com/sorrycc/awesome-javascript" target="_blank" rel="external">Awesome-Javascript</a>: <sub>🐢 A collection of awesome browser-side JavaScript libraries, resources and shiny things.</sub></li>
<li><a href="https://github.com/hemanth/awesome-pwa" target="_blank" rel="external">Awesome-Pwa</a>: <sub>Awesome list of progressive web apps! (PR welcomed ;)) </sub></li>
<li><a href="https://github.com/TalAter/awesome-service-workers" target="_blank" rel="external">Awesome-Service-Workers</a>: <sub>🔩 A collection of awesome resources for learning Service Workers</sub></li>
<li><a href="https://github.com/willianjusten/awesome-svg" target="_blank" rel="external">Awesome-SVG</a>: <sub>A curated list of SVG.</sub></li>
<li><a href="https://github.com/sjfricke/awesome-webgl" target="_blank" rel="external">Awesome-WebGL</a>: <sub>A curated list of awesome WebGL libraries, resources and much more.</sub></li>
</ul>
<h3 id="🚈-Framework"><a href="#🚈-Framework" class="headerlink" title="🚈 Framework"></a>🚈 Framework</h3><ul>
<li><a href="https://github.com/gdi2290/awesome-angular" target="_blank" rel="external">Awesome-Angular</a>: <sub>📄 A curated list of awesome Angular resources.</sub></li>
<li><a href="https://github.com/gztchan/awesome-design" target="_blank" rel="external">Awesome-Design</a>: <sub>🎏 Creative Resources for Developer and Designer</sub></li>
<li><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="external">Awesome-Electron</a>: <sub>Useful resources for creating apps with Electron</sub></li>
<li><a href="https://github.com/nicejade/awesome-quickapp" target="_blank" rel="external">Awesome-Quickapp</a>: <sub>🚀 A curated list of awesome quickapp tutorials, articles, projects and resources.</sub></li>
<li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">Awesome-React</a>: <sub>A collection of awesome things regarding React ecosystem.</sub></li>
<li><a href="https://github.com/brillout/awesome-react-components" target="_blank" rel="external">Awesome-React-Components</a>: <sub>Catalog of React Components &amp; Libraries</sub></li>
<li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">Awesome-React-Native</a>: <sub>Awesome React Native components, news, tools, and learning material!</sub></li>
<li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="external">Awesome-Vue.js</a>: <sub>🎉 A curated list of awesome things related to Vue.js</sub></li>
<li><a href="https://github.com/unicodeveloper/awesome-nextjs" target="_blank" rel="external">Awesome-Next.js</a>: <sub>📔 📚 A curated list of awesome resources : books, videos, articles about using Next.js (A minimalistic framework for universal server-rendered React applications).</sub></li>
</ul>
<h3 id="🚅-Advanced"><a href="#🚅-Advanced" class="headerlink" title="🚅 Advanced"></a>🚅 Advanced</h3><ul>
<li><a href="https://github.com/nicolesaidy/awesome-web-design" target="_blank" rel="external">Awesome-Web-Design</a>: <sub>🎨 A curated list of awesome resources for digital designers.</sub></li>
<li><a href="https://github.com/davidsonfellipe/awesome-wpo" target="_blank" rel="external">Awesome-Performance-Optimization</a>: <sub>📝 A curated list of Web Performance Optimization. Everyone can contribute here!</sub></li>
</ul>
<h3 id="⚔️-Tools"><a href="#⚔️-Tools" class="headerlink" title="⚔️ Tools"></a>⚔️ Tools</h3><ul>
<li><a href="https://github.com/wbkd/awesome-d3#readme" target="_blank" rel="external">Awesome-D3</a>: <sub>A list of D3 libraries, plugins and utilities.</sub></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="external">Awesome-Dataviz</a>: <sub>📈 A curated list of awesome data visualization libraries and resources.</sub></li>
<li><a href="https://github.com/alferov/awesome-gulp" target="_blank" rel="external">Awesome-Gulp</a>: <sub>A curated list of awesome gulp resources, plugins, and boilerplfates for a better development workflow automation.</sub></li>
<li><a href="https://github.com/sindresorhus/awesome-npm" target="_blank" rel="external">Awesome-Npm</a>: <sub>Awesome npm resources and tips</sub></li>
<li><a href="https://github.com/transitive-bullshit/awesome-puppeteer" target="_blank" rel="external">Awesome-Puppeteer</a>: <sub>A curated list of awesome puppeteer resources.</sub></li>
<li><a href="https://github.com/webpack-contrib/awesome-webpack" target="_blank" rel="external">Awesome-Webpack</a>: <sub>A curated list of awesome Webpack resources, libraries and tools.</sub></li>
</ul>
<h3 id="📀-Media"><a href="#📀-Media" class="headerlink" title="📀 Media"></a>📀 Media</h3><ul>
<li><a href="https://github.com/willianjusten/awesome-audio-visualization" target="_blank" rel="external">Awesome-Audio-Visualization</a>: <sub>A curated list about Audio Visualization.</sub></li>
<li><a href="https://github.com/brabadu/awesome-fonts" target="_blank" rel="external">Awesome-Fonts</a>: <sub>Curated list of fonts and everything</sub></li>
<li><a href="https://github.com/heyalexej/awesome-images/commits/master" target="_blank" rel="external">Awesome-Images</a>: <sub>A curated list of amazingly awesome free (stock) photo resources inspired by all the other awesomes.</sub></li>
<li><a href="https://github.com/davisonio/awesome-gif" target="_blank" rel="external">Awesome-Gif</a>: <sub>😎 A curated list of awesome GIF resources</sub></li>
</ul>
<h2 id="👽-Awesome-Back-End-List"><a href="#👽-Awesome-Back-End-List" class="headerlink" title="👽 Awesome Back-End List"></a>👽 Awesome Back-End List</h2><ul>
<li><a href="https://github.com/BruceDone/awesome-crawler" target="_blank" rel="external">Awesome-Crawler</a>: <sub>A collection of awesome web crawler,spider in different languages</sub></li>
<li><a href="https://github.com/dzharii/awesome-elasticsearch" target="_blank" rel="external">Awesome-Elasticsearch</a>: <sub>A curated list of the most important and useful resources about elasticsearch: articles, videos, blogs, tips and tricks, use cases. All about Elasticsearch!</sub></li>
<li><a href="https://github.com/ipfs/awesome-ipfs" target="_blank" rel="external">Awesome-Ipfs</a>: <sub>Useful resources for using IPFS and building things on top of it </sub></li>
<li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="external">Awesome-Nodejs</a>: <sub>⚡️ Delightful Node.js packages and resources node.cool</sub></li>
<li><a href="https://github.com/anaibol/awesome-serverless" target="_blank" rel="external">Awesome-Serverless</a>: <sub>☁️ A curated list of awesome services, solutions and resources for serverless / nobackend applications.</sub></li>
<li><a href="https://github.com/lorien/awesome-web-scraping" target="_blank" rel="external">Awesome-Web-Scraping</a>: <sub>List of libraries, tools and APIs for web scraping and data processing.</sub></li>
</ul>
<h3 id="💾-Databases"><a href="#💾-Databases" class="headerlink" title="💾 Databases"></a>💾 Databases</h3><ul>
<li><a href="https://github.com/numetriclabz/awesome-db" target="_blank" rel="external">Awesome-Datebase</a>: <sub>A curated list of amazingly awesome database libraries, resources and shiny things by numetriclabz.com</sub></li>
<li><a href="https://github.com/shlomi-noach/awesome-mysql" target="_blank" rel="external">Awesome-Mysql</a>: <sub>A curated list of awesome MySQL software, libraries, tools and resources</sub></li>
<li><a href="https://github.com/ramnes/awesome-mongodb" target="_blank" rel="external">Awesome-Mongodb</a>: <sub>🍃 A curated list of awesome MongoDB resources, libraries, tools and applications<br></sub></li>
<li><a href="https://github.com/dhamaniasad/awesome-postgres" target="_blank" rel="external">Awesome-Postgres</a>: <sub>A curated list of awesome PostgreSQL software, libraries, tools and resources, inspired by awesome-mysql</sub></li>
</ul>
<h2 id="🎣-Awesome-Front-Back-End-List"><a href="#🎣-Awesome-Front-Back-End-List" class="headerlink" title="🎣 Awesome Front-Back-End List"></a>🎣 Awesome Front-Back-End List</h2><ul>
<li><a href="https://github.com/veggiemonk/awesome-docker" target="_blank" rel="external">Awesome-Docker</a>: <sub>🐳 A curated list of Docker resources and projects</sub></li>
<li><a href="https://github.com/chentsulin/awesome-graphql" target="_blank" rel="external">Awesome-Graphql</a>: <sub>Awesome list of GraphQL &amp; Relay.</sub></li>
<li><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="external">Awesome-Honeypots</a>: <sub>an awesome list of honeypot resources</sub></li>
<li><a href="https://github.com/ramitsurana/awesome-kubernetes/branches" target="_blank" rel="external">Awesome-Kubernetes</a>: <sub>A curated list for awesome kubernetes sources 🚢🎉 </sub></li>
<li><a href="https://github.com/enaqx/awesome-pentest" target="_blank" rel="external">Awesome-Pentest</a>: <sub>A collection of awesome penetration testing resources, tools and other shiny things</sub></li>
<li><a href="https://github.com/qazbnm456/awesome-web-security" target="_blank" rel="external">Awesome-Web-Security</a>: <sub>🐶 A curated list of Web Security materials and resources. </sub></li>
<li><a href="https://github.com/sbilly/awesome-security" target="_blank" rel="external">Awesome-Security</a>: <sub>A collection of awesome software, libraries, documents, books, resources and cools stuffs about security.</sub></li>
<li><a href="https://github.com/s0md3v/AwesomeXSS" target="_blank" rel="external">Awesome-XSS</a>: <sub>Awesome XSS stuff</sub></li>
</ul>
<h3 id="🛠-Tools"><a href="#🛠-Tools" class="headerlink" title="🛠 Tools"></a>🛠 Tools</h3><ul>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">Awesome-Adb</a>: <sub>🍭 ADB Usage Complete / ADB 用法大全</sub></li>
<li><a href="https://github.com/tayllan/awesome-algorithms" target="_blank" rel="external">Awesome-Algorithms</a>: <sub>A curated list of awesome places to learn and/or practice algorithms.</sub></li>
<li><a href="https://github.com/ahkscript/awesome-AutoHotkey" target="_blank" rel="external">Awesome-AutoHotkey</a>: <sub>A curated list of awesome AutoHotkey libraries, library distributions, scripts, tools and resources.</sub></li>
<li><a href="https://github.com/mehcode/awesome-atom" target="_blank" rel="external">Awesome-Atom</a>: <sub>A curated list of delightful Atom packages and resources.</sub></li>
<li><a href="https://github.com/LeCoupa/awesome-cheatsheets" target="_blank" rel="external">Awesome-Cheatsheets</a>: <sub>📚 Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.</sub></li>
<li><a href="https://github.com/ChromeDevTools/awesome-chrome-devtools" target="_blank" rel="external">Awesome-Chrome-Devtools</a>: <sub>Awesome tooling and resources in the Chrome DevTools &amp; DevTools Protocol ecosystem</sub></li>
<li><a href="https://github.com/BubuAnabelas/awesome-markdown" target="_blank" rel="external">Awesome-Markdown</a>: <sub>📝 Delightful Markdown stuff.</sub></li>
<li><a href="https://github.com/krispo/awesome-haskell" target="_blank" rel="external">Awesome-Haskell</a>: <sub>A collection of awesome Haskell links, frameworks, libraries and software. Inspired by awesome projects line.</sub></li>
<li><a href="https://github.com/bnb/awesome-hyper" target="_blank" rel="external">Awesome-Hyper</a>: <sub>🖥 Delightful Hyper plugins, themes, and resources</sub></li>
<li><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="external">Awesome-Shell</a>: <sub>A curated list of awesome command-line frameworks, toolkits, guides and gizmos. Inspired by awesome-php.</sub></li>
<li><a href="https://github.com/viatsko/awesome-vscode" target="_blank" rel="external">Awesome-Vscode</a>: <sub>🎨 A curated list of delightful VS Code packages and resources. </sub></li>
<li><a href="https://github.com/unixorn/awesome-zsh-plugins" target="_blank" rel="external">Awesome-Zsh-Plugins</a>: <sub>A collection of ZSH frameworks, plugins &amp; themes inspired by the various awesome list collections out there.</sub></li>
</ul>
<h3 id="💻-System"><a href="#💻-System" class="headerlink" title="💻 System"></a>💻 System</h3><ul>
<li><a href="https://github.com/aleksandar-todorovic/awesome-linux" target="_blank" rel="external">Awesome-linux</a>: <sub>🐧 A list of awesome projects and resources that make Linux even more awesome.<br></sub></li>
<li><a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="external">Awesome-Mac</a>: <sub> Now we have become very big, Different from the original idea. Collect premium software in various categories.</sub></li>
<li><a href="https://github.com/iCHAIT/awesome-macOS" target="_blank" rel="external">Awesome-MacOS</a>: <sub> A curated list of awesome applications, softwares, tools and shiny things for macOS.</sub></li>
<li><a href="https://github.com/herrbischoff/awesome-macos-command-line" target="_blank" rel="external">Awesome-Macos-Command-Line</a>: <sub>Use your macOS terminal shell to do awesome things.</sub></li>
<li><a href="https://github.com/Awesome-Windows/Awesome" target="_blank" rel="external">Awesome-Windows</a>: <sub>💻 An awesome &amp; curated list of best applications and tools for Windows.</sub></li>
</ul>
<h2 id="🌷-Awesome-Other-Wizards-List"><a href="#🌷-Awesome-Other-Wizards-List" class="headerlink" title="🌷 Awesome Other Wizards List"></a>🌷 Awesome Other Wizards List</h2><ul>
<li><a href="https://github.com/sdras/awesome-actions" target="_blank" rel="external">Awesome-Actions</a>: <sub>A curated list of awesome actions to use on GitHub</sub></li>
<li><a href="https://github.com/Igglybuff/awesome-piracy" target="_blank" rel="external">Awesome-Piracy</a>: <sub>A curated list of awesome warez and piracy links</sub></li>
<li><a href="https://github.com/algolia/awesome-algolia" target="_blank" rel="external">Awesome-Algolia</a>: <sub>🔍👋 START HERE! A curated list of Algolia libraries, resources and projects.</sub></li>
<li><a href="https://github.com/emijrp/awesome-awesome" target="_blank" rel="external">Awesome-Awesome</a>: <sub>A curated list of awesome curated lists of many topics.</sub></li>
<li><a href="https://github.com/huyingjie/Checklist-Checklist" target="_blank" rel="external">Awesome-Checklist-Checklist</a>: <sub>🌈 A Curated List of Checklists ✔︎✔︎ <a href="http://checklist.yingjiehu.com" target="_blank" rel="external">http://checklist.yingjiehu.com</a></sub></li>
<li><a href="https://github.com/terkelg/awesome-creative-coding" target="_blank" rel="external">Awesome-Creative-Coding</a>: <sub>🎨 Creative Coding: Generative Art, Data visualization, Interaction Design, Resources.</sub></li>
<li><a href="https://github.com/agarrharr/awesome-cli-apps" target="_blank" rel="external">Awesome-Cli-Apps</a>: <sub>🖥 📊 🕹 🛠 A curated list of command line apps</sub></li>
<li><a href="https://github.com/bnb/awesome-developer-streams" target="_blank" rel="external">Awesome-Developer-Streams</a>: <sub>👩🏿‍💻👨🏾‍💻👩🏼‍💻👨🏽‍💻👩🏻‍💻 Awesome Developers, Streaming</sub></li>
<li><a href="https://github.com/MunGell/awesome-for-beginners" target="_blank" rel="external">Awesome-For-Beginners</a>: <sub>A list of awesome beginners-friendly projects.</sub></li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome-List</a>: <sub>😎 Curated list of awesome lists</sub></li>
<li><a href="https://github.com/carpedm20/awesome-hacking" target="_blank" rel="external">Awesome-Hacking</a>: <sub>A curated list of awesome Hacking tutorials, tools and resources</sub></li>
<li><a href="https://github.com/prabhic/awesome-health" target="_blank" rel="external">Awesome-Health</a>: <sub>A curated list of health resources</sub></li>
<li><a href="https://github.com/MaximAbramchuck/awesome-interview-questions" target="_blank" rel="external">Awesome-Interview-Questions</a>: <sub>:octocat: A curated awesome list of lists of interview questions. Feel free to contribute! 🎓 </sub></li>
<li><a href="https://github.com/rossant/awesome-math" target="_blank" rel="external">Awesome-Math</a>: <sub>A curated list of awesome mathematics resources</sub></li>
<li><a href="https://github.com/Solido/awesome-flutter" target="_blank" rel="external">Awesome-Flutter</a>: <sub>An awesome list that curates the best Flutter libraries, tools, tutorials, articles and more.</sub></li>
<li><a href="https://github.com/Kikobeats/awesome-github" target="_blank" rel="external">Awesome-Github</a>: <sub>An exquisite list of awesome :octocat: secrets.</sub></li>
<li><a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="external">Awesome-Github-Vue</a>: <sub>Vue相关开源项目库汇总</sub></li>
<li><a href="https://github.com/matiassingers/awesome-readme" target="_blank" rel="external">Awesome-README</a>: <sub>A curated list of awesome READMEs</sub></li>
<li><a href="https://github.com/lyfeyaj/awesome-resources" target="_blank" rel="external">Awesome-Resources</a>: <sub>Awesome resources for coding and learning: open source projects, websites, books e.g.</sub></li>
<li><a href="https://github.com/JanVanRyswyck/awesome-talks" target="_blank" rel="external">Awesome-Talks</a>: <sub>Awesome online talks and screencasts</sub></li>
<li><a href="https://github.com/docsifyjs/awesome-docsify" target="_blank" rel="external">Awesome-Docsify</a>: <sub>💖 A curated list of awesome things related to docsify</sub></li>
</ul>
<p>@2018-10-13 于深圳.福田 Last Modify：2018-12-21</p>]]></content>
    
    <summary type="html">
    
      TOP 100 大前端超棒精选列表，为解决信息过剩问题的具体实践：旨在为前端学习，技能提升，视野扩展，资料查找等提供价值性参考。目前选择性收录优质仓库近百个，涉及 Web 前端、后台、流行技术以及其他有意思清单。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Efficiency" scheme="https://www.jeffjade.com/tags/Efficiency/"/>
    
      <category term="Tools" scheme="https://www.jeffjade.com/tags/Tools/"/>
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="JavaScript" scheme="https://www.jeffjade.com/tags/JavaScript/"/>
    
      <category term="Mac" scheme="https://www.jeffjade.com/tags/Mac/"/>
    
      <category term="CSS" scheme="https://www.jeffjade.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>快应用之开发体验纪要</title>
    <link href="https://www.jeffjade.com/2018/08/31/143-develop-quick-app-experience-notes/"/>
    <id>https://www.jeffjade.com/2018/08/31/143-develop-quick-app-experience-notes/</id>
    <published>2018-08-31T10:18:00.000Z</published>
    <updated>2019-09-03T14:48:51.371Z</updated>
    
    <content type="html"><![CDATA[<p>何谓<a href="https://www.quickapp.cn/" target="_blank" rel="external">「快应用」</a>呢？它是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的<code>快应用联盟</code>联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。<a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用</a>具备传统 APP 完整的应用体验，<strong>无需安装、即点即用</strong>； <strong>覆盖 10 亿设备</strong>，<strong>与操作系统深度集成，探索新型应用场景</strong>。快应用 ──<code>复杂生活的简单答案，让生活更顺畅</code> ── 来自 <a href="https://nicelinks.site/post/5b5fb5bc615bf842b609105f" target="_blank" rel="external">快应用官方网站 | 倾城之链</a>。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/quickapp.png" alt="快应用开发体验纪要"></p>
<blockquote>
<p>本文首发于个人新博客：<a href="https://nice.lovejade.cn/zh/article/develop-quick-app-experience-notes.html" target="_blank" rel="external">静晴轩别苑 | 快应用之开发体验纪要</a>。</p>
</blockquote>
<h2 id="快应用特点"><a href="#快应用特点" class="headerlink" title="快应用特点"></a>快应用特点</h2><p>下面列出些关于「快应用」特点，这将有助于对它有更深刻的理解；</p>
<ul>
<li>基于手机硬件平台，标准由主流手机厂商组成的快应用联盟制定;</li>
<li>无需安装、即点即用，且具备传统 APP 完整的应用体验;</li>
<li>与操作系统深度集成，一键直达;</li>
<li>更新直接推送，新版本直接更新到后台，用户无感知快应用的技术实现;</li>
<li>基于前端技术栈开发、可快速迭代;</li>
<li>通过全新的引擎，将系统原生的渲染机制和接口能力提供给上层应用;</li>
<li>运行在框架应用进程中，对每个快应用会开一个 <code>Launcher</code> 进程快应用的开发、发布和使用流程;</li>
<li>开发者需要在快应用官网注册，上传至快应用官网，测试并通过审核后即可进行分发;</li>
<li>使用前端技术栈进行开发，经过编译、签名后最终产出 <code>rpk</code> 文件;</li>
<li>开发者需登录快应用官网进行上传和发布，发布前会经过审核快应用与小程序的对比;</li>
<li>快应用使用 <code>native</code> 渲染，性能体验会比较好，而小程序是使用 <code>webview</code> 渲染 ;</li>
<li>快应用的系统级能力更强，能调用更多系统级 API;</li>
</ul>
<h2 id="与小程序对比"><a href="#与小程序对比" class="headerlink" title="与小程序对比"></a>与小程序对比</h2><table>
<thead>
<tr>
<th style="text-align:center">──</th>
<th style="text-align:center">开发技术</th>
<th style="text-align:center">渲染方式</th>
<th style="text-align:center">硬件资源扶持</th>
<th style="text-align:center">系统级能力</th>
<th style="text-align:center">桌面留存</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">小程序</td>
<td style="text-align:center">前端技术栈</td>
<td style="text-align:center"><code>webview</code> 渲染</td>
<td style="text-align:center">有</td>
<td style="text-align:center">强</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td style="text-align:center">快应用</td>
<td style="text-align:center">前端技术栈</td>
<td style="text-align:center"><code>native</code> 渲染</td>
<td style="text-align:center">无</td>
<td style="text-align:center">弱</td>
<td style="text-align:center">有</td>
</tr>
</tbody>
</table>
<p>以上这些比对，皆是从两者的出生角度而言；可以肯定的是，「快应用」得益于其与生俱来的优势，将在更多应用场景发挥作用，它的崛起，将会给 <code>Android</code> 用户带来更多的便捷。同时作为后起之秀，其开发体验上，是明显优于<code>小程序</code>的；但目前的小程序，已经有长足的发展，而「快应用」才处于刚起步阶段，在经验累积、应用数量、分发传播、社区建设等方面，两者之间还存在些差距；后续故事将会如何，让我们将拭目以待。</p>
<h2 id="开发-amp-调试"><a href="#开发-amp-调试" class="headerlink" title="开发 &amp; 调试"></a>开发 &amp; 调试</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>鉴于<code>「快应用」</code>基于前端技术栈来开发，因此需要安装 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> (&gt;= 6.0)；<a href="https://yarnpkg.com/" target="_blank" rel="external">yarn</a> （推荐使用）。</li>
<li>安装 <a href="https://www.npmjs.com/package/hap-toolkit" target="_blank" rel="external">hap-toolkit</a> ；它是针对<code>「快应用」</code>衍生出的开发者工具；</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yarn <span class="keyword">global</span> <span class="keyword">add</span> hap-toolkit</div><div class="line"><span class="comment">// 检测是否成功安装 hap-toolkit</span></div><div class="line">hap -V</div></pre></td></tr></table></figure>
<ul>
<li>手机安装<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="external">「快应用」调试器</a> ── 一个 <code>Android</code> 应用程序，它可以连接到手机系统内的快应用执行环境，包含<code>扫码安装</code>、<code>本地安装</code>、<code>在线更新</code>、<code>开始调试</code>、等功能；</li>
</ul>
<blockquote>
<p><strong>扫码安装</strong>：配置 HTTP 服务器地址，下载 rpk 包，并唤起平台运行 rpk 包；<br><strong>本地安装</strong>：选择手机文件系统中的 rpk 包，并唤起平台运行 rpk 包；<br><strong>在线更新</strong>：重新发送 HTTP 请求，更新 rpk 包，并唤起平台运行 rpk 包；<br><strong>开始调试</strong>：唤起平台运行 rpk 包，并启动远程调试工具；</p>
</blockquote>
<blockquote>
<p><strong>备注</strong>：当您的手机系统尚未内置快应用运行平台，或您想在开发过程中体验快应用尚未正式发布的新功能、新特性，您可以安装 <strong><a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="external">快应用预览版</a></strong>,这是一个包含了快应用基础功能的 Android 应用程序。下载安装成功后，通过快应用调试器可以选择在快应用预览版运行 <code>rpk</code>包，开发测试对应平台的 api 和功能。更详细的叙述，请参见<a href="https://doc.quickapp.cn/tutorial/getting-started/build-environment.html" target="_blank" rel="external">快应用开发文档 | 环境搭建
</a>。</p>
</blockquote>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>在「快应用」中，对<a href="https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html" target="_blank" rel="external">代码编辑配置</a>做了说明；你可以使用 <code>VsCode</code>、<code>Sublime Text</code>、<code>WebStorm</code> 等工具来开发。鉴于官方针对 <code>VsCode</code> 推出了 <a href="https://marketplace.visualstudio.com/items?itemName=hap.Hap" target="_blank" rel="external">Hap Extension</a> 扩展，这里推荐使用 <a href="https://code.visualstudio.com/Download" target="_blank" rel="external">VsCode</a> 来编写快应用代码（据悉，专门用于开发「快应用」的编辑器，尚在开发中 18-08-15）。</p>
<h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><p>在开发文档<a href="https://doc.quickapp.cn/tools/debugging-tools.html" target="_blank" rel="external">调试工具</a>一节，对此有详细说明；从一般性开发角度总结而言，只需运行以下两个命令: <code>npm run server</code> 和 <code>npm run watch</code>；前者会在终端会输出一个二维码，用手机上启动快应用调试器，点击<code>扫码安装</code>扫描，即可下载安装 <code>apk</code> 包，并运行之；而后者将会启动文件监视器，每次修改工程文件时，会自动编译并在手机端刷新，速度蛮快；至于日志查看，可利用 devtools 调试界面 console 输出，也可利用 <code>adb</code> 工具，在终端进行查看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat <span class="_">-s</span> JsConsole</div></pre></td></tr></table></figure>
<h2 id="快应用示例"><a href="#快应用示例" class="headerlink" title="快应用示例"></a>快应用示例</h2><p>在安装 <code>Toolkit</code> 工具后，可通过全局 <code>hap</code> 命令创建一个项目模板，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hap init <span class="tag">&lt;<span class="name">YourProjectName</span>&gt;</span></div></pre></td></tr></table></figure>
<p>鉴于其内置的 Demo 项目示例，尚处于入门级项目设定(@18-08)，不便于用户着手开发，且不利于高效编写、维护；因此，有将编写的快应用 <a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="external">nicelinks-quick-app</a> 开源，借此以探索新型应用设计；此外，也是在探索如何构建优质<code>快应用</code>，希望可以在此事儿上提供些参考。其代码组织结构如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">├── sign                <span class="comment"># 存储 rpk 包签名模块;</span></div><div class="line">│   ├── <span class="built_in">debug</span>           <span class="comment"># 调试环境证书/私钥文件</span></div><div class="line">│   └── release         <span class="comment"># 正式环境证书/私钥文件</span></div><div class="line">└── src</div><div class="line">│   ├── assets          <span class="comment"># 公用的资源(Images/Styles/字体...)</span></div><div class="line">│   │   ├──images       <span class="comment"># 存储 png/jpg/svg 等公共图片资源</span></div><div class="line">│   │   └──styles       <span class="comment"># 存放 less/css/sass 等公共样式资源</span></div><div class="line">│   ├── helper          <span class="comment"># 项目自定义辅助各类工具</span></div><div class="line">│   │   ├──apis         <span class="comment"># 存储与后台请求接口相关(已封装好)</span></div><div class="line">│   │   ├──ajax.<span class="keyword">js </span>     <span class="comment"># 对系统提供的 fetch api 进行链式封装</span></div><div class="line">│   │   └──util.<span class="keyword">js </span>     <span class="comment"># 存放项目所需公共工具类方法</span></div><div class="line">│   ├── pages           <span class="comment"># 统一存放项目页面级代码</span></div><div class="line">│   ├── app.ux          <span class="comment"># 应用程序代码的人口文件</span></div><div class="line">│   └── manifest.<span class="keyword">json </span>  <span class="comment"># 配置应用基本信息</span></div><div class="line">└── package.<span class="keyword">json </span>       <span class="comment"># 定义项目需要的各种模块及配置信息</span></div></pre></td></tr></table></figure>
<p>有必要谈及的是，此项目秉承在<a href="https://nice.lovejade.cn/zh/article/vue-webpack-boilerplate-template.html" target="_blank" rel="external">高效开发 Web 单页应用解决方案</a>中所传递的理念：为<strong>高效开发</strong>而设计；相比于其内置简陋而凌乱的 Demo，这份脚手架做了以下诸多改进：</p>
<ul>
<li>✔️ <strong>对项目结构进行优化</strong>；如上组织结构所示，将各资源模块，更专业的分门别类，使之可以便捷的去编写、维护、查找，同时也是基于前端开发既定共识去设计，更容易为初接触者所理解 &amp; 上手；</li>
<li>✔️ <strong>更优雅的处理数据请求</strong>；采用 <code>Promise</code> 对系统内置请求 <a href="mailto:`@system.fetch" target="_blank" rel="external">`@system.fetch</a>` 进行封装，并抛出至全局，使得可以极简的进行链式调用，同时便捷地处理返回数据；</li>
<li>✔️ <strong>内置了样式处理方案</strong>；「快应用」支持 <code>less</code>, <code>sass</code> 的预编译；这里采取 <code>less</code> 方案，并内置了部分变量，以及常用混合方法，使得可以轻松开启样式编写、复用、修改等；</li>
<li>✔️ <strong>封装了常用方法</strong>；在 <code>helper/utils</code> 路径下，有对日期、字符串、系统等常用方法，分别进行封装，统一暴露给 <code>global.$utils</code>，使得维护方式更加合理且健壮，同时又可以便捷的使用，高效开发；当然，你也可以根据需要自行增删、抑或扩展；</li>
<li>✔️ <strong>简化开始开发流程</strong>； 注入 <a href="https://github.com/kimmobrunfeldt/concurrently" target="_blank" rel="external">Concurrently</a> 插件，使可以运行 <code>yarn start</code> 即可开始开发，而无需更多命令，从而简洁开发流程；</li>
<li>✔️ <strong>优化本地开发端口设定</strong>；「快应用」默认端口为 <code>12306</code>，虽说可自定义端口，但使用体验却不够友好；此处参考 <code>creat-react-app</code> 设定，对本地开发地址端口使用进行优化：如果 🈯️ 定端口(默认: <code>8080</code>)被占用，则向上递增寻找新的可用端口(如：8081 / 8082 / … )；</li>
<li>✔️ <strong>浏览器打开调试主页二维码</strong>；运行 <code>yarn start</code>，会启动 HTTP 调试服务器，并将该地址在<strong>命令行终端</strong>显示，手机端用快应用调试器扫码，即可下载并运行 rpk 包；当终端积累的信息流多了，就造成扫码不便；故增设在浏览器打开调试主页二维码；如想不使用此功能，在 <em>command/server.js</em> 文件中，将 <strong>autoOpenBrowser</strong> 设置为 <code>false</code> 即可；</li>
<li>✔️ <strong>集成轻粒子统计分析</strong>； <a href="https://nicelinks.site/post/5bdfa8ba9fa22b1b40974f63" target="_blank" rel="external">轻粒子</a>作为官方推荐统计方案，此脚手架已做接入；使用时只需修改 <a href="https://github.com/nicejade/quickapp-boilerplate-template/blob/master/src/assets/js/statistics.config.js" target="_blank" rel="external">statistics.config.js</a> 中的 <code>app_key</code>，为在<a href="http://www.qinglizi.cn/" target="_blank" rel="external">轻粒子</a>所申请的快应用 KEY 即可；</li>
<li>✔️ <strong>新增快捷命令脚本</strong>；使得可以一键生成新页面，只需运行：<code>yarn gen YourPageName</code> （命名推荐统一为大驼峰，将会在 <code>pages</code> 路径下新建该页面文件夹）命令即可，当然，也可以根据需要，自行定定制模板：<em>/command/gen/template.ux</em>；</li>
<li>✔️ <strong>集成 <a href="https://prettier.io/" target="_blank" rel="external">Prettier</a> &amp; <a href="https://eslint.org/" target="_blank" rel="external">Eslint</a></strong>；在检测代码中潜在问题的同时，统一团队代码规范、风格（<code>js</code>，<code>less</code>，<code>scss</code>等），从而促使写出高质量代码，以提升工作效率(尤其针对团队开发)。</li>
<li>✔️ <strong>编写 <a href="https://github.com/nicejade/prettier-plugin-quickapp" target="_blank" rel="external">prettier-plugin-quickapp</a> 插件</strong>；为快应用编写 <code>prettier</code> 插件，使其可以针对 <code>.ux</code>/<code>.mix</code> 文件也能很好地工作，从而进一步完善代码风格及规范。</li>
</ul>
<h2 id="关于快应用の发布"><a href="#关于快应用の发布" class="headerlink" title="关于快应用の发布"></a>关于快应用の发布</h2><p>关于快应用发布，有必要谈下的理由是，其发布流程说简单却也复杂，说快也慢；这是因为涉及多家厂商，且有着不同规则，导致变数横生；倘若经历过之后，这个流程就可以描述为：说复杂也简单，说慢也快；就以个人开发者来聊下相关经验：</p>
<ul>
<li>首先需要开发一款快应用；务必确认好 <code>minPlatformVersion</code> 版本，应用命名称也该有所考究，最好都是中文(利推广)；</li>
<li>快应用官网注册，完善相关资料之后(须手持身份证反面照片，需清晰)，即可创建 &amp; 提交你的<code>快应用</code>（有些资料要填写）；</li>
<li>厂商审核；对于华为、OPPO、小米等厂商，必须先绑定其开放者账号才可以（Vivo 无需），所以得先到厂商注册，并绑定账号；</li>
<li>绑定账号，应用提交之后，接下来就是坐等；不同平台审核结果许有不同：如华为还需<em>上传免责函签名至版权处</em>等等；</li>
<li>修正审核提到的问题，如指出应用提交分类错误(HuaWei)、应用界面单一、功能过于简单(OPPO)等，继续提交，坐等即可(速度还行)；</li>
</ul>
<blockquote>
<p>个人开发的<a href="https://github.com/nicejade/nicelinks-quick-app" target="_blank" rel="external">倾城之链-快应用版</a>已于 09-05 日，发布上架；目前在 Vivo 厂商已审核通过，可在支持快应用手机的负一屏、浏览器等搜索<code>倾城之链</code>即可率先体验，之后将持续迭代升级，敬请期待。</p>
</blockquote>
<h2 id="快应用存在的缺陷"><a href="#快应用存在的缺陷" class="headerlink" title="快应用存在的缺陷"></a>快应用存在的缺陷</h2><p>从上面<a href="#快应用特点">快应用特点</a>，应该对其优点有所感受；接下来不妨‘揣测’下它或将是缺陷的存在（当然，在年与时驰间，随着版本的不断迭代升级，某些现在看来是缺陷，日后兴许就荡然无存，也说不定）。</p>
<ul>
<li>若要运行「快应用」，须要手机出厂时在底层支持；否则就须要先安装<code>平台预览版</code>;</li>
<li>使用前端技术栈开发，<code>native</code> 渲染，标签、样式、功能等都需要一一映射处理，目前来看支持不够完善；长期迭代情况将会好转；</li>
<li>暂不支持使用主流前端框架（Eg: <code>vue</code>、<code>react</code>）进行开发，且很多功能需要填补；长期迭代情况将会好转；</li>
<li>相比于其他‘竞品’而言，文档、周围生态系统、等都需要亟待完善；长期迭代情况将会好转；</li>
<li>由国内 <code>Android</code> 手机厂商联合推出的，不支持 <code>IOS</code> 操作系统，目测以后也无法给予支持；</li>
<li>社交：「快应用」缺乏微信的社交场景能力和传播手段，推广拉新，成本不低；再有上一条先天不足，现在来看，不容乐观。</li>
<li>……</li>
</ul>
<h2 id="如何看待「快应用」"><a href="#如何看待「快应用」" class="headerlink" title="如何看待「快应用」?"></a>如何看待「快应用」?</h2><p>就目前来看，在移动设备市场，充盈各种类型的应用，大有“诸子百家争鸣”之基础；以技术栈来分，有原生型、混合型、Web 型、小程序、「快应用」…… 百花齐放；从类别上看，有支付宝这般丰富的超级 App，亦有许多精品级小众应用；就用户而言，不仅能享受其便捷性，同时也能体验市场的多元化；而各种不同类型应用间良性竞争，对更一步改善用户体验也是大有裨益。如此，看来「快应用」的诞生，从外部环境来看，有其成长的土壤；而具有体量的公司都参与的事情（如闪充、全面屏），便是不错的趋势，至少不会输，受影响的是旧的模式 ── 原生应用。</p>
<p>出于业务需求以及用户拉新等方面诉求，Native VS Web 这个由来已久之争，如今愈发向前端技术栈倾斜，且已占上风；虽然说，技术的发展，同时有给 Native 和 Web 两种模式，都提供了利好（对 Web，硬件提升使得体验越来越好；于 Native，越来越大的存储空间使得用户装 APP 成本下降），但“即点即用”这种快捷模式的横空出世，附带以前端技术栈开发的低成本，将打破固有局面，修改用户原有习惯，从而渐变整个格局。</p>
<p>谈及「快应用」，微信小程序是无法绕过的点；两者肯定存在竞争关系，同时也可算是伙伴：如同两部同时上映的电影，虽有竞争，也会是彼此之助力，共同把盘子做大，吸引更多的用户倾斜，从而变更未来的应用格局。再有，都是基于前端技术栈，如能有互转工具给予铺成，对于开发者而言，即可实现一次编写，多平台运行；将会为这种模式提升更多竞争力。</p>
<p>上面已经从出生层面，对「快应用」和小程序做了对比；「快应用」使用 <code>Native</code> 渲染，而非小程序基于 <code>Webview</code> 渲染，再加上硬件资源扶持，体验上则能更上一层楼。况且，对于已经司空见惯的事物，新鲜感在如今看来，也极具诱惑，如<code>子弹短信</code>的出现；就小程序而言目前火热程度，已有百万应用，渐成<strong>垄断</strong>之势，从过往历史来看，这对于用户来讲，绝不都是好事；而对于开发商来说，也尽是受制于人(腾讯有绝对控制权)，无法主导自己命运，多个渠道，则多份活路；况且，兵无常势，水无常形，在大时代的拉锯之下，微信又岂会是永恒的王者？<strong>独立的才是自己的</strong>，而小程序并不提供这方面红利；对于个人开发者来讲，加入「快应用」阵营，借助厂商流量扶持，为自己独立平台倒量，不失为更明智的抉择；现在来看「快应用」，机遇与挑战并存，未来它将如何，朋友你怎么看？</p>
<p>@2018-08-06 于深圳.福田 Last Modify：2018-09-02</p>
<hr>
<h3 id="您可能会感兴趣的文章："><a href="#您可能会感兴趣的文章：" class="headerlink" title="您可能会感兴趣的文章："></a>您可能会感兴趣的文章：</h3><ul>
<li><a href="https://quickapp.lovejade.cn/quickapp-common-problems-and-solutions/" target="_blank" rel="external">快应用开发常见问题及解决方案</a></li>
<li><a href="https://www.jeffjade.com/2019/01/20/149-how-to-elegantly-handle-quickapp-request">如何优雅处理「快应用」数据请求</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/">云集优站，尽在「倾城之链」其二</a></li>
<li><a href="https://www.jeffjade.com/2017/10/09/146-talk-about-nice-links/150-prettier-quickapp-plugin">Prettier 插件为更漂亮快应用代码</a></li>
<li><a href="https://www.jeffjade.com/2018/11/11/145-quickapp-boilerplate-template/">快应用脚手架，为优雅而生</a></li>
<li><a href="https://www.jeffjade.com/2018/12/21/146-awesome-vue-cli3-example/">快应用开发资源、教程汇聚</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。其标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。快应用具备传统 APP 完整的应用体验，无需安装、即点即用；覆盖 10 亿设备，与操作系统深度集成，探索新型应用场景。
    
    </summary>
    
      <category term="快应用" scheme="https://www.jeffjade.com/categories/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="快应用" scheme="https://www.jeffjade.com/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
      <category term="Android" scheme="https://www.jeffjade.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用ESLint ＆ Prettier美化Vue代码</title>
    <link href="https://www.jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier/"/>
    <id>https://www.jeffjade.com/2018/06/18/142-beautify-vue-by-eslint-and-prettier/</id>
    <published>2018-06-18T10:18:00.000Z</published>
    <updated>2018-06-18T16:17:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a> 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；支持 <code>JavaScript</code>、 <code>Flow</code>、 <code>TypeScript</code>、 <code>CSS</code>、 <code>SCSS</code>、 <code>Less</code>、 <code>JSX</code>、 <code>Vue</code>、 <code>GraphQL</code>、 <code>JSON</code>、 <code>Markdown</code> 等语言，您可以结合 ESLint 和 Prettier，检测代码中潜在问题的同时，还能统一团队代码风格，从而促使写出高质量代码，来提升工作效率。</p>
<a id="more"></a>
<p><img src="https://image.nicelinks.site/prettier-girl.jpg" alt="beautify-vue-by-eslint-and-prettier"></p>
<blockquote>
<p><strong>备注</strong>，此文首发于使用 <code>Vuepress</code> 搭建的新 Web 应用：<a href="https://nice.lovejade.cn/" target="_blank" rel="external">静晴轩别苑</a>；如果您对此感兴趣，可以移步查看：<a href="https://nice.lovejade.cn/zh/article/beautify-vue-by-eslint-and-prettier.html" target="_blank" rel="external">使用ESLint ＆ Prettier美化Vue代码</a>。</p>
</blockquote>
<h2 id="初始化-Vue-项目推介"><a href="#初始化-Vue-项目推介" class="headerlink" title="初始化 Vue 项目推介"></a>初始化 Vue 项目推介</h2><p>在格式化代码方面， Prettier 确实和 ESLint 有重叠，但两者侧重点不同：ESLint 主要工作就是检查代码质量并给出提示，它所能提供的格式化功能很有限；而 Prettier 在格式化代码方面具有更大优势。而 Prettier 被设计为易于与 ESLint 集成，所以你可以轻松在项目中使两者，而无需担心冲突。本文就如何使用 ESLint ＆ Prettier，来格式并美化 Vue 代码做下探讨；如果您使用其他类型框架，这份经验绝大部份依旧适用。</p>
<p>正如在 <a href="https://jeffjade.com/2018/05/20/140-vue-webpack-boilerplate-template/" target="_blank" rel="external">开箱即用的 Vue Webpack 脚手架模版</a> 所倡导的：<code>vue-cli3</code>在这个版本，它集成了更多丰富的功能，以及更多默认配置，可通过附带的图形用户界面创建、开发和管理项目… 而且已发布 <code>RC</code> 版本，核心功能已准备就绪，<code>API</code> 已趋于稳定，所以，建议采用 <code>vue-cli3</code> 来创建您的项目；您只需运行 <code>vue create my-project</code> 命令，接下来按照提示进行选择即可；为了您的项目可持续性愉快进行，<code>ESlint</code> 是您必要的选项。如果，您这样做了，您就可以在 <em>package.json</em> 中 <code>eslintConfig</code> 属性下，找到 <code>ESLint</code> 配置；接下来，只需将 <code>Prettier</code> 与 <code>ESLint</code> 集成即可。</p>
<h2 id="集成-ESLint-amp-Prettier"><a href="#集成-ESLint-amp-Prettier" class="headerlink" title="集成 ESLint &amp; Prettier"></a>集成 ESLint &amp; Prettier</h2><p>对于二者集成，可以利用插件来完成；<a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="external">eslint-plugin-prettier</a> 公开了一个 “recommended” 配置，将 <code>plugin:prettier/recommended</code> 添加到 <code>extends</code> 的子属性 <code>plugin:vue/essential</code> 之后，以默认设置在 <code>ESLint</code> 中启用对 <code>Prettier</code> 的支持：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">"eslintConfig": &#123;</div><div class="line">    "root": true,</div><div class="line">    "extends": [</div><div class="line">      "plugin:vue/essential",</div><div class="line">      "plugin:prettier/recommended",</div><div class="line">      "eslint:recommended"</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>当然，还需安装依赖库： eslint-plugin-prettier 和 eslint-config-prettier (下文会讲到此依赖的作用)，更详细信息可以参见 Prettier 文档： <a href="https://prettier.io/docs/en/eslint.html" target="_blank" rel="external">Integrating with ESLint
</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add --dev eslint-plugin-prettier eslint-config-prettier prettier-eslint-cli</div></pre></td></tr></table></figure>
<p>这里需要补充说明下的是 <code>eslint-plugin-prettier</code> 得工作原理，它会对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错提示；我们可以借助一些工具来修复，比如： <code>eslint --fix</code>，<a href="https://github.com/prettier/prettier-eslint-cli" target="_blank" rel="external">prettier-eslint-cli</a>；可将其配置在 package scripts 中，以方便使用：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"eslint-fix"</span>: <span class="string">"eslint src/**/**/*.vue --fix"</span>,</div><div class="line">    <span class="attr">"format-code"</span>: <span class="string">"prettier-eslint --write \"src/**/*.js\" \"src/**/*.vue\""</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://image.nicelinks.site/vue-eslint-prettier.png" alt="beautify-vue-by-eslint-and-prettier"></p>
<h2 id="修改规则配置"><a href="#修改规则配置" class="headerlink" title="修改规则配置"></a>修改规则配置</h2><p>您需要知道的是，两者混合使用时候，需要修改规则，以防止重复或冲突；<code>eslint-config-prettier</code> 即为解决此问题的存在，可以使用它关闭所有可能引起冲突的规则。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"rules": &#123;</div><div class="line">  "prettier/prettier": "error"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事实上，当在项目中如此配置，可能会出现些“诡异”的报错，即便采用如上修复，也无法解决；而且这也不是您预期的提示；</p>
<p><span style="color: red">error</span>: Delete <code>⏎</code> (prettier/prettier) at src/pages/xxx</p>
<p>此时，可以对规则进行甄别、梳理，择选出适宜的规则；对于此，您可以参考 <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="external">Configuring Prettier Options</a> &amp; <a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="external">eslint-plugin-prettier#options</a>；依据个人编码习惯，有采取如下配置 ( 可在 <a href="https://github.com/nicejade/awesome-vue-cli3-example/blob/master/package.json" target="_blank" rel="external">awesome-vue-cli3-example</a> 查看源码)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">"rules": &#123;</div><div class="line">  "no-console": 0,</div><div class="line">  "prettier/prettier": [</div><div class="line">    "error",</div><div class="line">    &#123;</div><div class="line">      "singleQuote": true,</div><div class="line">      "trailingComma": "none",</div><div class="line">      "bracketSpacing": true,</div><div class="line">      "jsxBracketSameLine": true,</div><div class="line">      "parser": "flow"</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加编辑器配置"><a href="#添加编辑器配置" class="headerlink" title="添加编辑器配置"></a>添加编辑器配置</h2><h4 id="Atom-编辑器"><a href="#Atom-编辑器" class="headerlink" title="Atom 编辑器"></a>Atom 编辑器</h4><p>可以安装 <a href="https://atom.io/packages/prettier-atom" target="_blank" rel="external">prettier-atom</a>；<code>Atom</code> 编辑器还会提示你安装更多辅助插件；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apm install prettier-atom</div></pre></td></tr></table></figure>
<p>它有两种模式可以使用：   </p>
<ul>
<li>保存时自动格式化（Packages → Prettier → Toggle Format on Save）   </li>
<li>使用键盘快捷方式手动调用（如果没有选择，整个文件被格式化）：<code>CTRL + ALT + F</code>   </li>
</ul>
<h4 id="VS-Code-编辑器"><a href="#VS-Code-编辑器" class="headerlink" title="VS Code 编辑器"></a>VS Code 编辑器</h4><p>安装插件：<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external">ESlint</a>，<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external">Prettier</a>，VS Code 插件配置统一在 preference  → setting  → user setting 设置 (快捷键： <code>Command + ,</code>)，即可实现保存时自动格式化：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Sublime-Text-编辑器"><a href="#Sublime-Text-编辑器" class="headerlink" title="Sublime Text 编辑器"></a>Sublime Text 编辑器</h3><p>安装插件：<a href="https://github.com/jonlabelle/SublimeJsPrettier" target="_blank" rel="external">JsPrettier</a>，它有依赖到 <code>Prettier</code>  等，所以需要全局安装：<code>yarn global add prettier</code>；在 “Preferences  → Setting” 中添加如下设置，即可实现保存时自动格式化；</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"auto_format_on_save"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然您也可以自定义快捷键，以按需格式化代码；在 “Preferences  → Key Binding” 的 User Keymap 中，参考如下示例，注入命令即可 (Windows OS 则是：<code>ctrl + alt + f</code>)：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"keys"</span>: [<span class="string">"command+alt+f"</span>], <span class="attr">"command"</span>: <span class="string">"js_prettier"</span> &#125;</div></pre></td></tr></table></figure>
<p>更多设置、使用细节，可参见 <a href="https://github.com/jonlabelle/SublimeJsPrettier#usage" target="_blank" rel="external">SublimeJsPrettier#Usage</a>。</p>
<h2 id="Pre-commit-Hook-约束代码提交"><a href="#Pre-commit-Hook-约束代码提交" class="headerlink" title="Pre-commit Hook 约束代码提交"></a>Pre-commit Hook 约束代码提交</h2><p>以上探讨了如何运用 ESLint ＆ Prettier 写出优质代码，这都是针对个人的推荐性行为；为保证团队统一代码风格，则必须采取些手段以强制约束；假如您的团队使用 <code>Git</code> 作为代码管理工具，在 <code>commit</code> 行为及之前进行甄别约束，是很棒的选择；于此，可借助 <a href="https://github.com/typicode/husky" target="_blank" rel="external">husky</a> &amp; <a href="https://github.com/okonet/lint-staged" target="_blank" rel="external">lint-staged</a> 来实现之。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install husky &amp; lint-staged</span></div><div class="line">yarn add lint-staged husky --dev</div><div class="line"></div><div class="line"><span class="comment"># package.json config</span></div><div class="line"><span class="string">"lint-staged"</span>: &#123;</div><div class="line">  <span class="string">"**/**.&#123;js,json,pcss,md,vue&#125;"</span>: [</div><div class="line">    <span class="string">"prettier --write"</span>,</div><div class="line">    <span class="string">"git add"</span></div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line"><span class="string">"husky"</span>: &#123;</div><div class="line">  <span class="string">"hooks"</span>: &#123;</div><div class="line">    <span class="string">"pre-commit"</span>: <span class="string">"yarn run precommit-msg &amp;&amp; lint-staged"</span>,</div><div class="line">    <span class="string">"pre-push"</span>: <span class="string">"yarn test"</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>值得一提的是，在实际项目中， <code>husky</code> 很可能由于各种原因，导致不能很好的工作；这多半是由于 <code>.git/hooks/pre-commit</code> 与期待目标不匹配所致，您可以手动修改，也可以采取如下办法 (备注：如果您的 <code>husky</code> 版本在 0.14 及以上)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf .git/hooks/*</div><div class="line">node node_modules/husky/lib/installer/bin install</div></pre></td></tr></table></figure>
<h2 id="写在文章最后"><a href="#写在文章最后" class="headerlink" title="写在文章最后"></a>写在文章最后</h2><p>“上邪，我欲与君相知，长命无绝衰。山无陵，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝”。这突如其来的一首古诗，乍看起来，与本文没有丝毫关系；但需要提醒的是：<strong>您在编写高质量代码时付出的努力越多，您花在调试上的时间就越少</strong>。如果您为项目开发工作流程，做了足够充分而适宜的建设，这不仅可以极大提升代码编写质量与速度，同时可节省调试、解决问题时间开销，而且还能避免无端而起的坏心情，从而更进一步促进工作效率，如此造就的这份优质循环，可以使得您拥有更多时间去学习、折腾、品味人生，这其中自然也可包括品读优美<code>古诗词</code>🐉☺️；所以？<strong>工欲善其事，必先利其器</strong>，您学到了么？</p>
<p>@2018-06-15 于深圳.南山 Last Modify： 2018-06-15</p>
<hr>
<h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul>
<li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/" target="_blank" rel="external">如何写一手漂亮的Vue</a></li>
<li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="external">Webpack 打包优化之速度篇</a></li>
<li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li>
<li><a href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/" target="_blank" rel="external">Npm vs Yarn 之备忘详单</a></li>
<li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/" target="_blank" rel="external">『引』最全前端资源汇集</a></li>
<li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/" target="_blank" rel="external">与时俱进版前端资源教程</a></li>
<li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/" target="_blank" rel="external">晚晴幽草说之-前端札记</a></li>
<li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/" target="_blank" rel="external">所历前端“姿势”更替记(其一)</a></li>
<li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/" target="_blank" rel="external">墙裂推荐文章集锦</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      Prettier 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；您可以结合 ESLint 和 Prettier，检测代码中潜在问题的同时，还能统一团队代码风格，从而促使写出高质量代码，来提升工作效率。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="https://www.jeffjade.com/tags/Vue/"/>
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Prettier" scheme="https://www.jeffjade.com/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>轩帅的博客之旅</title>
    <link href="https://www.jeffjade.com/2018/06/04/141-talk-about-my-blogs/"/>
    <id>https://www.jeffjade.com/2018/06/04/141-talk-about-my-blogs/</id>
    <published>2018-06-04T14:22:00.000Z</published>
    <updated>2019-09-05T15:54:50.382Z</updated>
    
    <content type="html"><![CDATA[<p>当时间轴滑至 18 年 6 月，在工作中从事前端相关，已整满三年；这段从征程到旅程的过程，是技术与体力不断交织变更的活计；回顾这几年之种种，多半已是无从言说，随风渐逝；幸好这一路走来，偶有沉淀些文字留存，得以在光阴流逝中使我心安；而本篇就为这些年，承载那些文字的平台作下回顾。</p>
<a id="more"></a>
<h2 id="幽居空谷轩"><a href="#幽居空谷轩" class="headerlink" title="幽居空谷轩"></a><a href="https://www.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">幽居空谷轩</a></h2><p><strong>博客介绍</strong>：<a href="https://www.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">幽居空谷轩</a>，由最新 <code>VuePress</code> 所驱动；部署于 <code>Github Page</code>；采用 <code>Google Analytics</code> 作为分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。目前打算是，会在后续用心经营<a href="https://www.lovejade.cn/?utm_source=jeffjade.com" target="_blank" rel="external">幽居空谷轩</a>，用以承载<a href="https://www.lovejade.cn/zh/blog/?utm_source=jeffjade.com" target="_blank" rel="external">各个博客</a>、<a href="https://www.lovejade.cn/zh/article/?utm_source=jeffjade.com" target="_blank" rel="external">新产出的博文</a>、以及<a href="https://www.lovejade.cn/zh/works/?utm_source=jeffjade.com" target="_blank" rel="external">个人开源作品</a>等。</p>
<p><strong>名字由来</strong>：向来比较喜欢“<a href="https://baike.baidu.com/item/轩/55500" target="_blank" rel="external">轩</a>”这个字，此前在很多博客命名中，都使用了这个字；依据个人之喜好，命名当也是用这“轩”字来结尾（同理，照旧会是五个字）；至于前面几个字选取，当时的操作是这样的：因一时间不好选定，就打开<a href="https://www.gushiwen.org/?utm_source=nicelinks.site" target="_blank" rel="external">古诗文网</a>，略翻了下，杜工部的一首<a href="https://baike.baidu.com/item/佳人/3690867" target="_blank" rel="external">《佳人》</a>映入眼帘，一读之下，当即选定此博客名：<code>幽居空谷轩</code>，描述则是诗句的首尾两句：“绝代有佳人，幽居在空谷。天寒翠袖薄，日暮倚修竹”。</p>
<p><strong>搭建初衷</strong>：蛮早就注册了 <code>lovejade.cn</code> 域名，一直以来使用的都是二级域名，如: <a href="https://github.lovejade.cn/" target="_blank" rel="external">JadeYang(杨琼璞)</a>，<a href="https://nice.lovejade.cn" target="_blank" rel="external">静晴轩别苑</a>，<a href="https://blog.lovejade.cn" target="_blank" rel="external">天意人间舫</a>等；此次要将此域名使用，其初衷是为了可以将本域名下网站，接入 <code>Google AdSense</code>，从而可以在分享的同时略薅羊毛，以促进更充盈的分享热情，从而形成良性循环，于人于己，皆有裨益。</p>
<hr>
<h2 id="静轩之别苑"><a href="#静轩之别苑" class="headerlink" title="静轩之别苑"></a><a href="https://quickapp.lovejade.cn/?utm_source=nice.lovejade.cn" target="_blank" rel="external">静轩之别苑</a></h2><p><a href="https://quickapp.lovejade.cn/?utm_source=nice.lovejade.cn" target="_blank" rel="external">静轩之别苑</a>，由 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 所驱动，运用 <a href="https://nicelinks.site/post/5c40aeaaa5957e07a40b3101" target="_blank" rel="external">Talk</a> 作评论系统，以 <code>Google Analytics</code> 统计分析；现基于 <a href="https://nicelinks.site/post/5b7036890f8719053c094d68" target="_blank" rel="external">Docker</a> 部署于<a href="https://nicelinks.site/post/5b3e412d615bf842b6091041" target="_blank" rel="external">阿里云</a>服务器。(于 2019 年元月)。</p>
<blockquote>
<p><a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 一个简洁、纯粹的内容创作与发布平台，目由非盈利性组织 Ghost Foundation 和一群优秀的独立贡献者共同维护。她是基于 Node.js 构建的开源博客平台。Ghost 具有易用的书写界面和体验，博客内容默认采用 <a href="https://nicelinks.site/tags/Markdown" target="_blank" rel="external">Markdown</a> 语法书写。其目标是取代臃肿的 <code>Wordpress</code>。<a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 具有一个非常强劲好用的后台，丰富的编辑功能，让你触手可及；允许注入代码，结构化数据，自定义 Facebook 和 Twitter 的社交媒体共享卡，使您能够为社交媒体添加自定义图像，标题和说明，十分利于 <code>SEO</code>；并且集成大量外部服务，允许您创建和自定义各种连接的应用程序；并且支持自定义主题，允许多人协作等等等等，更多功能可以参见<a href="https://quickapp.lovejade.cn/ghost-open-source-blog-platform/" target="_blank" rel="external">强大如斯，Ghost 开源博客平台</a>。── 出自<a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">倾城之链 | Ghost</a>。</p>
</blockquote>
<p>早先有运用若干工具（<a href="https://nicelinks.site/post/5c4c56d5a5957e07a40b3116" target="_blank" rel="external">Hexo</a>、<a href="https://nicelinks.site/post/5c4c59c1a5957e07a40b3118" target="_blank" rel="external">Jekyll</a>、<a href="https://nicelinks.site/post/5b2298f5d1c6ca419a9f7e00" target="_blank" rel="external">VuePress</a>、<a href="https://nicelinks.site/post/5b225adfd1c6ca419a9f7dfe" target="_blank" rel="external">Docz</a>）构建了<a href="https://nice.lovejade.cn/zh/blog/" target="_blank" rel="external">诸多个人博客</a>。此<a href="https://quickapp.lovejade.cn/" target="_blank" rel="external">静轩之别苑</a>的搭建，着实是被 <a href="https://nicelinks.site/post/5c3f3151a5957e07a40b30ff" target="_blank" rel="external">Ghost</a> 强大的功能，与其曼妙的设计所打动；目前有打算用她作为个人最新<strong>主博客</strong>；这不仅能够令人可以有更棒的阅读体验，同时由其所带来的巨大便捷性，能使得可以撰写更多的文字。</p>
<p><strong>温馨提醒</strong>：有将基于 <a href="https://nicelinks.site/post/5b7036890f8719053c094d68" target="_blank" rel="external">Docker</a> 来部署个人 <code>Ghost</code>博客的方法，有提交至 <code>Github</code> 仓库：<a href="https://github.com/nicejade/play-with-docker/tree/master/ghost" target="_blank" rel="external">ghost-docker</a>，可基于该配置，极速搭建属于你个人的 <code>Ghost</code>博客。</p>
<p><img src="https://image.nicelinks.site/静轩之别苑.jpg" alt="静轩之别苑"></p>
<hr>
<h2 id="云轩奕鹤"><a href="#云轩奕鹤" class="headerlink" title="云轩奕鹤"></a><a href="https://nice.lovejade.cn/zh/blog/csdn-blog.html" target="_blank" rel="external">云轩奕鹤</a></h2><p>早年在初高中、大学期间，就常爱写点文字以自娱；那些年，在西北一隅，游走于教科书中的世界，闭塞且狭小，贫瘠的见识，根本无从得知 <code>互联网</code> 的存在；偶尔苦吟出的“佳句”，只得在纸笔间存留；即便有心保存，而今也是难觅其踪；大学期间，虽学的是<code>计算机</code>相关专业，鲜有接触的网络，却被更多用以充当<code>游戏机</code>与<code>影视播放机</code>；就如在 <a href="https://jeffjade.com/about-me/" target="_blank" rel="external">Aboue Me</a> 中虽提及的：苦心孤诣想去做些事儿，却未成一事。直到毕业工作后，从事软件开发，才算真正接触到互联网；也是那时方得知并注册了<strong>博客园</strong>： <a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="external">云轩奕鹤</a>，不久“写”了第一篇博文，也是由此开启了写博之旅，那时：2013 年 8 月。</p>
<p><img src="https://image.nicelinks.site/csdn-blog.png" alt="云轩奕鹤"></p>
<h2 id="晚晴幽草轩"><a href="#晚晴幽草轩" class="headerlink" title="晚晴幽草轩"></a><a href="https://nice.lovejade.cn/zh/blog/hexo-blog.html" target="_blank" rel="external">晚晴幽草轩</a></h2><p><a href="https://jeffjade.com/" target="_blank" rel="external">晚晴幽草轩</a>，由 <code>Hexo</code> 所驱动；部署于 <code>Coding page</code>；基于 <code>Github Issue</code> 作评论系统；使用 <code>Gitalk</code> 作为评论插件；有 <code>Google Analytics</code>、<code>Clustrmaps</code>、<code>百度统计</code>三套分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p>
<p><img src="https://image.nicelinks.site/hexo-blog.png" alt="晚晴幽草轩"></p>
<p>坦白说，最开始的“写博”，其实是始自于<strong>纯粹的搬运工</strong>：即遇到觉得好的文章就给移植了来。年随时驰间，技术也有所增长，逐渐会注入有自己的观点；当积淀的多了，也就真正开始写属于自己的技术文章；正如在<a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="external">云轩奕鹤</a>副标题中引用的文字: “勤學如春起之苗，不見其增，日有所長。綴學如磨刀之石，不見其損，日有所虧”。在学于思之后，不停折腾之间，越发感觉到<code>个人品牌</code>的重要性，这便是个人主博客<a href="https://jeffjade.com/" target="_blank" rel="external">晚晴幽草轩</a>诞生的契机。从 <code>jeffjade.com</code> 域名注册时间来看，那是在 2015 年 4 月。</p>
<h2 id="天意人间舫"><a href="#天意人间舫" class="headerlink" title="天意人间舫"></a><a href="https://nice.lovejade.cn/zh/blog/jekyll-blog.html" target="_blank" rel="external">天意人间舫</a></h2><p><a href="https://blog.lovejade.cn/" target="_blank" rel="external">天意人间舫</a>，由 <code>Jekyll</code> 所驱动；部署于 <code>Coding page</code> &amp; <code>Github Page</code>；基于 <code>Github Issue</code> 作评论系统；使用 <code>Gitalk</code> 作为评论插件；采用 <code>Google Analytics</code> 作为分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p>
<p><img src="https://image.nicelinks.site/jekyll-blog.png" alt="天意人间舫"></p>
<p>记得是 14 年的时候，就有使用 <code>jekyll</code> 来折腾个人博客；只是那时候，其文档以英文为主，相关资料又颇显匮乏；邂逅了 <code>hexo</code>，就被“移情别恋”，也是因此成就了主博：<a href="https://jeffjade.com/" target="_blank" rel="external">晚晴幽草轩</a>；事实上，对于 <code>Jekyll</code>，也是念念难忘，在接触到一份挺欢喜的响应式主题后，就分分钟又塑造一博客；在历经几次三番的优化（调<code>UI</code>、自定义域名、引入 AnchorJS、渐进式支持等等）之后，成就了现在的<a href="https://blog.lovejade.cn/" target="_blank" rel="external">天意人间舫</a>；对于此博客的功用、名字的由来等，在<a href="https://jeffjade.com/2016/01/22/2016-01-22-jeffjade-and-nicejade/" target="_blank" rel="external">晚晴幽草轩,天意人间舫</a>一文中，有过专门记载。从 Github 提交时间来看，这始于 2015 年 10 月份左右。</p>
<h2 id="晚晴幽草"><a href="#晚晴幽草" class="headerlink" title="晚晴幽草"></a><a href="https://nice.lovejade.cn/zh/blog/jianshu-blog.html" target="_blank" rel="external">晚晴幽草</a></h2><p>谈起在<code>简书</code>写博，也是和<a href="https://jeffjade.com/" target="_blank" rel="external">晚晴幽草轩</a>有着不小的关系；那时一心想塑造个人品牌，却难于初始流量；可以选择方法就是，在写完文章以后，同步一份到其他平台，如<a href="https://www.cnblogs.com/jadeboy/" target="_blank" rel="external">博客园</a>等；恰好也是在那时候，初出的平台<code>简书</code>，融合读写一体，且也在努力扩大用户；不拍即合双方，自此也就有了在简书平台的博客：<a href="https://www.jianshu.com/u/9aae3d8f4c3d" target="_blank" rel="external">晚晴幽草</a>。那是 2015 年 2 月。</p>
<h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a><a href="https://nice.lovejade.cn/zh/blog/wechat-blog.html" target="_blank" rel="external">微信公众号</a></h2><p>对于开通公众号，当时特有留下一篇文章：<a href="https://jeffjade.com/2016/03/23/2016-03-23-toss-wechat-public_no" target="_blank" rel="external">微信公众号：静晴轩</a>，以作说明。谈起其初衷，无外乎这两点：<strong>跟风</strong>与<strong>无奈</strong>。你知道，对于 <code>wechat</code> 那不支持 <code>Markdown</code> 的‘威武’存在，同步(写)文章显得颇为麻烦；且又不便于引用外链、亦不能修改更新等设定，令人难以心生赞誉；只是有庞大的用户群体，且便于推广扩散；而个人博客也面临与<code>聚合网</code>做斗争等，故而才上了这条船，那是 2016 年 3 月。如今依旧(更)坚信：<strong>独立的才是自己的</strong>；加之如今公众号的红利已过，所以在这方面的经营，只是将博客那边已经沉淀出来的文章，运用工具同步罢了。再怎么威武的平台，不自由的同时，也必定携带你方唱罢我登场的<code>新陈代谢</code>；故而，力荐每个人要建立自己可以掌控的会场，打造属于自己的<code>个人品牌</code>，任江湖兴衰更替，我仍自有一方天地纵横；而这便也是个人作品<a href="https://nicelinks.site/?from=nice.lovejade.cn" target="_blank" rel="external">「倾城之链」</a> 的初衷。</p>
<p><img src="https://image.nicelinks.site/qrcode_jqx.jpg" alt="微信公众号-静晴轩"></p>
<h2 id="静晴轩别苑"><a href="#静晴轩别苑" class="headerlink" title="静晴轩别苑"></a><a href="https://nice.lovejade.cn/zh/blog/vuepress-blog.html" target="_blank" rel="external">静晴轩别苑</a></h2><p><a href="https://nice.lovejade.cn" target="_blank" rel="external">静晴轩别苑</a>，由 <code>VuePress</code> 所驱动；部署于 <code>Github Page</code>；采用 <code>Google Analytics</code> 作为分析方案；支持 <code>Pwa</code>，如添加 Icon 到主屏幕，缓存页面支持离线访问等。</p>
<p><a href="https://nice.lovejade.cn" target="_blank" rel="external">静晴轩别苑</a>的诞生，其初衷完全是为了体验 <code>VuePress</code>: Vue 驱动的静态网站生成器。<a href="https://vuepress.vuejs.org/" target="_blank" rel="external">VuePress</a> 由两部分组成：一部分是支持用 <code>Vue</code> 开发主题的极简静态网站生成器，另一个部分是为书写技术文档而优化的默认主题。它的诞生初衷是为了支持 <code>Vue</code> 及其子项目的文档需求。</p>
<p>每一个由 <code>VuePress</code> 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（<code>SEO</code>）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（<code>SPA</code>），其他的页面则会只在用户浏览到的时候才按需加载。除此之外，它还内置了以下优秀特性：</p>
<ul>
<li>为技术文档而优化的<a href="https://vuepress.vuejs.org/zh/guide/markdown.html" target="_blank" rel="external">内置 Markdown 拓展</a></li>
<li><a href="https://vuepress.vuejs.org/zh/guide/using-vue.html" target="_blank" rel="external">在 Markdown 文件中使用 Vue 组件的能力</a></li>
<li><a href="https://vuepress.vuejs.org/zh/guide/custom-themes.html" target="_blank" rel="external">Vue 驱动的自定义主题系统</a></li>
<li><a href="https://vuepress.vuejs.org/zh/config/#serviceworker" target="_blank" rel="external">自动生成 Service Worker</a></li>
<li><a href="https://vuepress.vuejs.org/zh/config/#ga" target="_blank" rel="external">Google Analytics 集成</a></li>
<li><a href="https://vuepress.vuejs.org/zh/guide/i18n.html" target="_blank" rel="external">多语言支持</a></li>
<li>默认主题包含：<ul>
<li>响应式布局</li>
<li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E9%A6%96%E9%A1%B5" target="_blank" rel="external">可选的主页</a></li>
<li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E5%86%85%E7%BD%AE%E6%90%9C%E7%B4%A2" target="_blank" rel="external">简洁的开箱即用的标题搜索</a></li>
<li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#algolia-%E6%90%9C%E7%B4%A2" target="_blank" rel="external">Algolia 搜索</a></li>
<li>可自定义的<a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E5%AF%BC%E8%88%AA%E6%A0%8F" target="_blank" rel="external">导航栏</a>和<a href="https://vuepress.vuejs.org/zh/default-theme-config/#%E4%BE%A7%E8%BE%B9%E6%A0%8F" target="_blank" rel="external">侧边栏</a></li>
<li><a href="https://vuepress.vuejs.org/zh/default-theme-config/#git-%E4%BB%93%E5%BA%93%E5%92%8C%E7%BC%96%E8%BE%91%E9%93%BE%E6%8E%A5" target="_blank" rel="external">自动生成的 GitHub 链接和页面的编辑链接</a></li>
</ul>
</li>
</ul>
<p>相比与 <code>Nuxt</code>、 <code>Hexo</code>、<code>Jekyll</code>、<code>Docsify</code>、<code>GitBook</code> 等工具，<code>VuePress</code> 在不同方向，都拥有着巨大优势，并且仍在开发更新当中；如果你有搭建个人博客、技术文档的需求，那么 <code>VuePress</code> 将是超棒的选择。</p>
<p>于 2018-05-20 @深圳.南山 last modify: 2019-09-05</p>
<h3 id="你可能感兴趣-有用-的文章："><a href="#你可能感兴趣-有用-的文章：" class="headerlink" title="你可能感兴趣(/有用)的文章："></a><strong>你可能感兴趣(/有用)的文章：</strong></h3><ul>
<li><a href="https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/" target="_blank" rel="external">如何写一手漂亮的Vue</a></li>
<li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="external">Webpack 打包优化之速度篇</a></li>
<li><a href="//jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">Webpack 打包优化之体积篇</a></li>
<li><a href="https://jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/" target="_blank" rel="external">Npm vs Yarn 之备忘详单</a></li>
<li><a href="https://jeffjade.com/2016/03/30/104-front-end-tutorial/" target="_blank" rel="external">『引』最全前端资源汇集</a></li>
<li><a href="https://jeffjade.com/2017/09/28/127-nice-front-end-tutorial/" target="_blank" rel="external">与时俱进版前端资源教程</a></li>
<li><a href="https://jeffjade.com/2017/10/09/130-front-end-notes/" target="_blank" rel="external">晚晴幽草说之-前端札记</a></li>
<li><a href="https://jeffjade.com/2016/05/14/106-front-end-learning-record/" target="_blank" rel="external">所历前端“姿势”更替记(其一)</a></li>
<li><a href="https://jeffjade.com/2015/02/01/2015-02-01-recommended-article/" target="_blank" rel="external">墙裂推荐文章集锦</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      回顾这些年，所搭建的那些个人博客(基于 Hexo、Jekyll、VuePress 等)，以及体验过的写作分享平台(如：博客园、简书、微信公众号等)。
    
    </summary>
    
      <category term="Front-End" scheme="https://www.jeffjade.com/categories/Front-End/"/>
    
    
      <category term="Toss" scheme="https://www.jeffjade.com/tags/Toss/"/>
    
      <category term="Share" scheme="https://www.jeffjade.com/tags/Share/"/>
    
      <category term="Blog" scheme="https://www.jeffjade.com/tags/Blog/"/>
    
  </entry>
  
</feed>
